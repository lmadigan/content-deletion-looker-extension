"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = require("./transport");
var authToken_1 = require("./authToken");
var nodeTransport_1 = require("./nodeTransport");
var apiSettings_1 = require("./apiSettings");
var strPost = 'POST';
var strDelete = 'DELETE';
var NodeSession = /** @class */ (function () {
    function NodeSession(settings, transport) {
        this.settings = settings;
        this.apiPath = "";
        this._authToken = new authToken_1.AuthToken();
        this._sudoToken = new authToken_1.AuthToken();
        this.sudoId = '';
        this.settings = settings;
        this.transport = transport || new nodeTransport_1.NodeTransport(settings);
        this.apiPath = "/api/" + settings.api_version;
    }
    Object.defineProperty(NodeSession.prototype, "activeToken", {
        /**
         * Abstraction of AuthToken retrieval to support sudo mode
         */
        get: function () {
            if (this._sudoToken.access_token) {
                return this._sudoToken;
            }
            return this._authToken;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Is there an active authentication token?
     */
    NodeSession.prototype.isAuthenticated = function () {
        // TODO I think this can be simplified
        var token = this.activeToken;
        if (!(token && token.access_token))
            return false;
        return token.isActive();
    };
    /**
     * Add authentication data to the pending API request
     * @param init {IRequestInit} initialized API request properties
     *
     * @returns the updated request properties"
     */
    NodeSession.prototype.authenticate = function (init) {
        return __awaiter(this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getToken()];
                    case 1:
                        token = _a.sent();
                        if (token && token.access_token)
                            init.headers.Authorization = "Bearer " + token.access_token;
                        return [2 /*return*/, init];
                }
            });
        });
    };
    NodeSession.prototype.isSudo = function () {
        return !!this.sudoId && this._sudoToken.isActive();
    };
    /**
     * retrieve the current authentication token. If there is no active token, performs default
     * login to retrieve the token
     */
    NodeSession.prototype.getToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.isAuthenticated()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.login()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.activeToken];
                }
            });
        });
    };
    /**
     * Reset the authentication session
     */
    NodeSession.prototype.reset = function () {
        this.sudoId = '';
        this._authToken.reset();
        this._sudoToken.reset();
    };
    /**
     * Activate the authentication token for the API3 or sudo user
     * @param sudoId {string | number}: optional. If provided, impersonates the user specified
     *
     */
    NodeSession.prototype.login = function (sudoId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(sudoId || sudoId !== this.sudoId || !this.isAuthenticated())) return [3 /*break*/, 4];
                        if (!sudoId) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._login(sudoId.toString())];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, this._login()];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/, this.activeToken];
                }
            });
        });
    };
    /**
     * Logout the active user. If the active user is impersonated, the session reverts to the API3 user
     */
    NodeSession.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = false;
                        if (!this.isAuthenticated()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this._logout()];
                    case 1:
                        result = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, result];
                }
            });
        });
    };
    NodeSession.prototype.ok = function (promise) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise];
                    case 1:
                        result = _a.sent();
                        if (result.ok) {
                            return [2 /*return*/, result.value];
                        }
                        else {
                            throw transport_1.sdkError(result);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    NodeSession.prototype.sudoLogout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = false;
                        if (!this.isSudo()) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.logout()]; // Logout the current sudo
                    case 1:
                        result = _a.sent(); // Logout the current sudo
                        this._sudoToken.reset();
                        _a.label = 2;
                    case 2: return [2 /*return*/, result];
                }
            });
        });
    };
    // internal login method that manages default auth token and sudo workflow
    NodeSession.prototype._login = function (newId) {
        return __awaiter(this, void 0, void 0, function () {
            var section, client_id, client_secret, token, token_1, promise, accessToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // for linty freshness, always logout sudo if set
                    return [4 /*yield*/, this.sudoLogout()];
                    case 1:
                        // for linty freshness, always logout sudo if set
                        _a.sent();
                        if (newId !== this.sudoId) {
                            // Assign new requested sudo id
                            this.sudoId = newId || '';
                        }
                        if (!!this._authToken.isActive()) return [3 /*break*/, 3];
                        this.reset();
                        section = this.settings.readConfig();
                        client_id = process.env[apiSettings_1.strLookerClientId] || section['client_id'];
                        client_secret = process.env[apiSettings_1.strLookerClientSecret] || section['client_secret'];
                        if (!client_id || !client_secret) {
                            throw transport_1.sdkError({ message: 'API credentials client_id and/or client_secret are not set' });
                        }
                        return [4 /*yield*/, this.ok(this.transport.request(strPost, this.apiPath + "/login", {
                                client_id: client_id,
                                client_secret: client_secret,
                            }))];
                    case 2:
                        token = _a.sent();
                        this._authToken.setToken(token);
                        _a.label = 3;
                    case 3:
                        if (!this.sudoId) return [3 /*break*/, 5];
                        token_1 = this.activeToken;
                        promise = this.transport.request(strPost, 
                        // Don't use api path here since authenticator presence will cause it to be added
                        encodeURI("/login/" + newId), null, null, 
                        // ensure the auth token is included in the sudo request
                        function (init) {
                            if (token_1.access_token) {
                                init.headers.Authorization = "Bearer " + token_1.access_token;
                            }
                            return init;
                        }, this.settings);
                        return [4 /*yield*/, this.ok(promise)];
                    case 4:
                        accessToken = _a.sent();
                        this._sudoToken.setToken(accessToken);
                        _a.label = 5;
                    case 5: return [2 /*return*/, this.activeToken];
                }
            });
        });
    };
    NodeSession.prototype._logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var token, promise;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token = this.activeToken;
                        promise = this.transport.request(strDelete, 
                        // Do not add api path here, since the authenticator will cause the request method to add it automatically
                        '/logout', null, null, 
                        // ensure the auth token is included in the logout promise
                        function (init) {
                            if (token.access_token) {
                                init.headers.Authorization = "Bearer " + token.access_token;
                            }
                            return init;
                        }, this.settings);
                        return [4 /*yield*/, this.ok(promise)
                            // If no error was thrown, logout was successful
                        ];
                    case 1:
                        _a.sent();
                        if (!this.sudoId) return [3 /*break*/, 4];
                        // User was logged out, so set auth back to default
                        this.sudoId = '';
                        this._sudoToken.reset();
                        if (!!this._authToken.isActive()) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.login()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        // completely logged out
                        this.reset();
                        _a.label = 5;
                    case 5: return [2 /*return*/, true];
                }
            });
        });
    };
    return NodeSession;
}());
exports.NodeSession = NodeSession;
