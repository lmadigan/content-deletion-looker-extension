"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = require("./transport");
var readable_stream_1 = require("readable-stream");
var baseTransport_1 = require("./baseTransport");
var BrowserTransport = /** @class */ (function (_super) {
    __extends(BrowserTransport, _super);
    function BrowserTransport(options) {
        var _this = _super.call(this, options) || this;
        _this.options = options;
        return _this;
    }
    BrowserTransport.prototype.request = function (method, path, queryParams, body, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            var requestPath, props, req, res, contentType, parsed, e_1, error;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = __assign(__assign({}, this.options), options);
                        requestPath = this.makePath(path, options, queryParams, authenticator);
                        return [4 /*yield*/, this.initRequest(method, body, authenticator, options)];
                    case 1:
                        props = _a.sent();
                        req = fetch(requestPath, 
                        // @ts-ignore
                        props);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, req];
                    case 3:
                        res = _a.sent();
                        contentType = String(res.headers.get('content-type'));
                        return [4 /*yield*/, parseResponse(contentType, res)];
                    case 4:
                        parsed = _a.sent();
                        if (res.ok) {
                            return [2 /*return*/, { ok: true, value: parsed }];
                        }
                        else {
                            return [2 /*return*/, { ok: false, error: parsed }];
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        error = {
                            type: 'sdk_error',
                            message: typeof e_1.message === 'string'
                                ? e_1.message
                                : "The SDK call was not successful. The error was '" + e_1 + "'.",
                        };
                        return [2 /*return*/, { ok: false, error: error }];
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    BrowserTransport.prototype.initRequest = function (method, body, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            var headers, props;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = options ? __assign(__assign({}, this.options), options) : this.options;
                        headers = { 'x-looker-appid': transport_1.agentTag };
                        if (options && options.headers) {
                            Object.keys(options.headers).forEach(function (key) {
                                headers[key] = options.headers[key];
                            });
                        }
                        props = {
                            body: body ? JSON.stringify(body) : undefined,
                            headers: headers,
                            credentials: 'same-origin',
                            method: method,
                        };
                        if (!authenticator) return [3 /*break*/, 2];
                        return [4 /*yield*/, authenticator(props)];
                    case 1:
                        // Add authentication information to the request
                        props = _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, props];
                }
            });
        });
    };
    // TODO finish this method
    BrowserTransport.prototype.stream = function (callback, method, path, queryParams, body, authenticator, options) {
        return __awaiter(this, void 0, void 0, function () {
            var stream, requestPath, returnPromise, init, streamPromise, results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        options = options ? __assign(__assign({}, this.options), options) : this.options;
                        stream = new readable_stream_1.PassThrough();
                        requestPath = this.makePath(path, options, queryParams, authenticator);
                        returnPromise = callback(stream);
                        return [4 /*yield*/, this.initRequest(method, body, authenticator, options)];
                    case 1:
                        init = _a.sent();
                        transport_1.trace("requestPath: " + requestPath);
                        streamPromise = new Promise(function (resolve, reject) {
                            transport_1.trace("[stream] beginning stream via download url", init);
                            var hasResolved = false;
                            reject('Not implemented yet!');
                            // const req = this.requestor(init)
                            //
                            // req
                            //   .on("error", (err) => {
                            //     if (hasResolved && (err as any).code === "ECONNRESET") {
                            //       trace('ignoring ECONNRESET that occurred after streaming finished', init)
                            //     } else {
                            //       trace('streaming error', err)
                            //       reject(err)
                            //     }
                            //   })
                            //   .on("finish", () => {
                            //     trace(`[stream] streaming via download url finished`, init)
                            //   })
                            //   .on("socket", (socket) => {
                            //     trace(`[stream] setting keepalive on socket`, init)
                            //     socket.setKeepAlive(true)
                            //   })
                            //   .on("abort", () => {
                            //     trace(`[stream] streaming via download url aborted`, init)
                            //   })
                            //   .on("response", () => {
                            //     trace(`[stream] got response from download url`, init)
                            //   })
                            //   .on("close", () => {
                            //     trace(`[stream] request stream closed`, init)
                            //   })
                            //   .pipe(stream)
                            //   .on("error", (err) => {
                            //     trace(`[stream] PassThrough stream error`, err)
                            //     reject(err)
                            //   })
                            //   .on("finish", () => {
                            //     trace(`[stream] PassThrough stream finished`, init)
                            //     resolve()
                            //     hasResolved = true
                            //   })
                            //   .on("close", () => {
                            //     trace(`[stream] PassThrough stream closed`, init)
                            //   })
                        });
                        return [4 /*yield*/, Promise.all([returnPromise, streamPromise])];
                    case 2:
                        results = _a.sent();
                        return [2 /*return*/, results[0]];
                }
            });
        });
    };
    return BrowserTransport;
}(baseTransport_1.BaseTransport));
exports.BrowserTransport = BrowserTransport;
function parseResponse(contentType, res) {
    return __awaiter(this, void 0, void 0, function () {
        var error_1, error_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!contentType.match(/application\/json/g)) return [3 /*break*/, 5];
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, res.json()];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    error_1 = _a.sent();
                    return [2 /*return*/, Promise.reject(error_1)];
                case 4: return [3 /*break*/, 9];
                case 5:
                    if (!(contentType === 'text' || contentType.startsWith('text/'))) return [3 /*break*/, 6];
                    return [2 /*return*/, res.text()];
                case 6:
                    _a.trys.push([6, 8, , 9]);
                    return [4 /*yield*/, res.blob()];
                case 7: return [2 /*return*/, _a.sent()];
                case 8:
                    error_2 = _a.sent();
                    return [2 /*return*/, Promise.reject(error_2)];
                case 9: return [2 /*return*/];
            }
        });
    });
}
