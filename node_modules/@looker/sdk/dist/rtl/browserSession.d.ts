import { IApiSettings } from './apiSettings';
import { IAuthorizer, IRequestInit, ITransport } from './transport';
import { AuthToken } from './authToken';
export declare class BrowserSession implements IAuthorizer {
    settings: IApiSettings;
    transport: ITransport;
    constructor(settings: IApiSettings, transport?: ITransport);
    get activeToken(): string;
    isAuthenticated(): boolean;
    authenticate(init: IRequestInit): Promise<IRequestInit>;
    /**
     * Logout is not supported for a Browser Session
     * @returns {Promise<boolean>}
     */
    logout(): Promise<boolean>;
    reset(): void;
}
/**
 * An AuthSession class intended for use with proxied authentication
 *
 * Override the `authenticate()` method to implmenent a browser authentication hook
 *
 * Override `logout()` if you want to support session logout
 *
 */
export declare abstract class ProxySession implements IAuthorizer {
    settings: IApiSettings;
    activeToken: AuthToken;
    transport: ITransport;
    constructor(settings: IApiSettings, transport?: ITransport);
    /**
     * Is the session active and authenticated?
     * @returns `true` if the session is active
     */
    isAuthenticated(): boolean;
    /**
     * Decorate the request properties with the required authentication information
     *
     * Override this class with the implementation for a specific proxied authentication workflow
     *
     * @param props the properties of the request
     * @returns the same properties with authentication added
     */
    abstract authenticate(props: any): Promise<any>;
    /**
     * Logout does nothing for a proxy session by default.
     *
     * Override to support telling the proxy to log out the session
     *
     * @returns a false Promise
     */
    logout(): Promise<boolean>;
}
