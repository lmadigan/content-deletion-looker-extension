import { IRequestInit, ITransport, IAuthorizer } from './transport';
import { AuthToken } from './authToken';
import { IApiSettingsConfig } from './nodeSettings';
/**
 * Same as the Looker API access token object
 */
interface IAccessToken {
    /**
     * Access Token used for API calls
     */
    access_token?: string;
    /**
     * Type of token
     */
    token_type?: string;
    /**
     * Number of seconds before the token expires
     */
    expires_in?: number;
}
export interface IAuthSession extends IAuthorizer {
    sudoId: string;
    getToken(): Promise<IAccessToken>;
    isSudo(): boolean;
    login(sudoId?: string | number): Promise<IAccessToken>;
    reset(): void;
}
export declare class NodeSession implements IAuthSession {
    settings: IApiSettingsConfig;
    private apiPath;
    _authToken: AuthToken;
    _sudoToken: AuthToken;
    sudoId: string;
    transport: ITransport;
    constructor(settings: IApiSettingsConfig, transport?: ITransport);
    /**
     * Abstraction of AuthToken retrieval to support sudo mode
     */
    get activeToken(): AuthToken;
    /**
     * Is there an active authentication token?
     */
    isAuthenticated(): boolean;
    /**
     * Add authentication data to the pending API request
     * @param init {IRequestInit} initialized API request properties
     *
     * @returns the updated request properties"
     */
    authenticate(init: IRequestInit): Promise<IRequestInit>;
    isSudo(): boolean;
    /**
     * retrieve the current authentication token. If there is no active token, performs default
     * login to retrieve the token
     */
    getToken(): Promise<AuthToken>;
    /**
     * Reset the authentication session
     */
    reset(): void;
    /**
     * Activate the authentication token for the API3 or sudo user
     * @param sudoId {string | number}: optional. If provided, impersonates the user specified
     *
     */
    login(sudoId?: string | number): Promise<AuthToken>;
    /**
     * Logout the active user. If the active user is impersonated, the session reverts to the API3 user
     */
    logout(): Promise<boolean>;
    private ok;
    private sudoLogout;
    private _login;
    private _logout;
}
export {};
