import { ITransportSettings } from './transport';
export interface IValueSettings {
    [name: string]: string;
}
export declare const strLookerBaseUrl: string;
export declare const strLookerApiVersion: string;
export declare const strLookerVerifySsl: string;
export declare const strLookerTimeout: string;
export declare const strLookerClientId: string;
export declare const strLookerClientSecret: string;
export declare const ApiConfigMap: IValueSettings;
export declare const strBadConfiguration: string;
export interface IApiSettings extends ITransportSettings {
    isConfigured(): boolean;
}
/**
 * default the runtime configuration settings
 * @constructor
 *
 */
export declare const DefaultSettings: () => IApiSettings;
/**
 * Return environment variable name value first, otherwise config name value
 * @param {IValueSettings} values
 * @param {string} name
 * @returns {string}
 */
export declare const configValue: (values: IValueSettings, name: string) => string;
/**
 * Read any key/value collection for environment variable names and return as IApiSettings
 * @constructor
 *
 * The keys for the values are:
 *  - <environmentPrefix>_BASE_URL or `base_url`
 *  - <environmentPrefix>_API_VERSION or `api_version`
 *  - <environmentPrefix>_CLIENT_ID or `client_id`
 *  - <environmentPrefix>_CLIENT_SECRET or `client_secret`
 *  - <environmentPrefix>_VERIFY_SSL or `verify_ssl`
 *  - <environmentPrefix>_TIMEOUT or `timeout`
 */
export declare const ValueSettings: (values: IValueSettings) => IApiSettings;
/**
 * @class ApiSettings
 *
 * .ini Configuration initializer
 */
export declare class ApiSettings implements IApiSettings {
    base_url: string;
    api_version: string;
    verify_ssl: boolean;
    timeout: number;
    constructor(settings: Partial<IApiSettings>);
    isConfigured(): boolean;
}
