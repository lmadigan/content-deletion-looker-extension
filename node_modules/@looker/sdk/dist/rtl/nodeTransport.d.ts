import { Authenticator, HttpMethod, ITransportSettings, SDKResponse, Values } from './transport';
import rq, { Request } from 'request';
import rp from 'request-promise-native';
import { Readable } from 'readable-stream';
import { BaseTransport } from './baseTransport';
declare type RequestOptions = rq.RequiredUriUrl & rp.RequestPromiseOptions;
export declare class NodeTransport extends BaseTransport {
    protected readonly options: ITransportSettings;
    constructor(options: ITransportSettings);
    request<TSuccess, TError>(method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<SDKResponse<TSuccess, TError>>;
    /**
     * Http method dispatcher from general-purpose request properties
     * @param props
     * @returns {request.Request}
     */
    protected requestor(props: RequestOptions): Request;
    stream<TSuccess>(callback: (readable: Readable) => Promise<TSuccess>, method: HttpMethod, path: string, queryParams?: Values, body?: any, authenticator?: Authenticator, options?: Partial<ITransportSettings>): Promise<TSuccess>;
    /**
     * should the request verify SSL?
     * @param {Partial<ITransportSettings>} options Defaults to the instance options values
     * @returns {boolean} true if the request should require full SSL verification
     */
    verifySsl(options?: Partial<ITransportSettings>): boolean | undefined;
    /**
     * Request timeout in seconds
     * @param {Partial<ITransportSettings>} options Defaults to the instance options values
     * @returns {number | undefined}
     */
    timeout(options?: Partial<ITransportSettings>): number;
    private initRequest;
    private ok;
}
export {};
