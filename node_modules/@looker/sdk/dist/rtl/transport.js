"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var constants_1 = require("./constants");
exports.agentTag = "TS-SDK " + constants_1.sdkVersion;
/**
 * Set to `true` to follow streaming process
 */
var tracing = false;
/**
 * trivial tracing function that should be replaced with a log plugin
 * @param message description for trace
 * @param info any additional information to produce for output
 */
function trace(message, info) {
    if (tracing) {
        console.debug(message);
        if (info) {
            console.debug({ info: info });
        }
    }
}
exports.trace = trace;
/**
 * ResponseMode for an HTTP request - either binary or "string"
 */
var ResponseMode;
(function (ResponseMode) {
    ResponseMode[ResponseMode["binary"] = 0] = "binary";
    ResponseMode[ResponseMode["string"] = 1] = "string";
    ResponseMode[ResponseMode["unknown"] = 2] = "unknown"; // unrecognized response type
})(ResponseMode = exports.ResponseMode || (exports.ResponseMode = {}));
/**
 * MIME patterns for string content types
 * @type {RegExp}
 */
exports.contentPatternString = new RegExp(constants_1.matchModeString, "i");
/**
 * MIME patterns for "binary" content types
 * @type {RegExp}
 */
exports.contentPatternBinary = new RegExp(constants_1.matchModeBinary, "i");
/**
 * MIME pattern for UTF8 charset attribute
 * @type {RegExp}
 */
exports.charsetUtf8Pattern = new RegExp(constants_1.matchCharsetUtf8, "i");
/**
 * Default request timeout
 * @type {number} default request timeout is 120 seconds, or two minutes
 */
exports.defaultTimeout = 120;
/**
 * HTTP status codes
 * https://developer.mozilla.org/en-US/docs/Web/HTTP/Status for reference
 */
var StatusCode;
(function (StatusCode) {
    StatusCode[StatusCode["OK"] = 200] = "OK";
    StatusCode[StatusCode["Created"] = 201] = "Created";
    StatusCode[StatusCode["Accepted"] = 202] = "Accepted";
    StatusCode[StatusCode["NonAuthoritative"] = 203] = "NonAuthoritative";
    StatusCode[StatusCode["NoContent"] = 204] = "NoContent";
    StatusCode[StatusCode["ResetContent"] = 205] = "ResetContent";
    StatusCode[StatusCode["PartialContent"] = 206] = "PartialContent";
    StatusCode[StatusCode["MultiStatus"] = 207] = "MultiStatus";
    StatusCode[StatusCode["MultiStatusDav"] = 208] = "MultiStatusDav";
    StatusCode[StatusCode["IMUsed"] = 226] = "IMUsed";
    StatusCode[StatusCode["MultipleChoice"] = 300] = "MultipleChoice";
    StatusCode[StatusCode["MovedPermanently"] = 301] = "MovedPermanently";
    StatusCode[StatusCode["Found"] = 302] = "Found";
    StatusCode[StatusCode["SeeOther"] = 303] = "SeeOther";
    StatusCode[StatusCode["NotModified"] = 304] = "NotModified";
    StatusCode[StatusCode["UseProxy"] = 305] = "UseProxy";
    StatusCode[StatusCode["UnusedRedirect"] = 306] = "UnusedRedirect";
    StatusCode[StatusCode["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    StatusCode[StatusCode["PermanentRedirect"] = 308] = "PermanentRedirect";
    StatusCode[StatusCode["BadRequest"] = 400] = "BadRequest";
    StatusCode[StatusCode["Unauthorized"] = 401] = "Unauthorized";
    StatusCode[StatusCode["PaymentRequired"] = 402] = "PaymentRequired";
    StatusCode[StatusCode["Forbidden"] = 403] = "Forbidden";
    StatusCode[StatusCode["NotFound"] = 404] = "NotFound";
    StatusCode[StatusCode["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    StatusCode[StatusCode["NotAcceptable"] = 406] = "NotAcceptable";
    StatusCode[StatusCode["ProxyAuthRequired"] = 407] = "ProxyAuthRequired";
    StatusCode[StatusCode["RequestTimeout"] = 408] = "RequestTimeout";
    StatusCode[StatusCode["Conflict"] = 409] = "Conflict";
    StatusCode[StatusCode["Gone"] = 410] = "Gone";
    StatusCode[StatusCode["LengthRequired"] = 411] = "LengthRequired";
    StatusCode[StatusCode["PreconditionFailed"] = 412] = "PreconditionFailed";
    StatusCode[StatusCode["PayloadTooLarge"] = 413] = "PayloadTooLarge";
    StatusCode[StatusCode["UriTooLong"] = 414] = "UriTooLong";
    StatusCode[StatusCode["UnsupportedMediaType"] = 415] = "UnsupportedMediaType";
    StatusCode[StatusCode["RequestedRangeNotSatisfiable"] = 416] = "RequestedRangeNotSatisfiable";
    StatusCode[StatusCode["ExpectationFailed"] = 417] = "ExpectationFailed";
    StatusCode[StatusCode["ImATeapot"] = 418] = "ImATeapot";
    StatusCode[StatusCode["MisdirectedRequest"] = 421] = "MisdirectedRequest";
    StatusCode[StatusCode["UnprocessableEntity"] = 422] = "UnprocessableEntity";
    StatusCode[StatusCode["Locked"] = 423] = "Locked";
    StatusCode[StatusCode["FailedDependency"] = 424] = "FailedDependency";
    StatusCode[StatusCode["TooEarly"] = 425] = "TooEarly";
    StatusCode[StatusCode["UpgradeRequired"] = 426] = "UpgradeRequired";
    StatusCode[StatusCode["PreconditionRequired"] = 427] = "PreconditionRequired";
    StatusCode[StatusCode["TooManyRequests"] = 428] = "TooManyRequests";
    StatusCode[StatusCode["RequestHeaderFieldsTooLarge"] = 429] = "RequestHeaderFieldsTooLarge";
    StatusCode[StatusCode["UnavailableForLegalReasons"] = 430] = "UnavailableForLegalReasons";
    StatusCode[StatusCode["InternalServerError"] = 500] = "InternalServerError";
    StatusCode[StatusCode["NotImplemented"] = 501] = "NotImplemented";
    StatusCode[StatusCode["BadGateway"] = 502] = "BadGateway";
    StatusCode[StatusCode["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    StatusCode[StatusCode["GatewayTimeout"] = 504] = "GatewayTimeout";
    StatusCode[StatusCode["HttpVersionNotSupported"] = 505] = "HttpVersionNotSupported";
    StatusCode[StatusCode["VariantAlsoNegotiates"] = 506] = "VariantAlsoNegotiates";
    StatusCode[StatusCode["InsufficientStorage"] = 507] = "InsufficientStorage";
    StatusCode[StatusCode["LoopDetected"] = 508] = "LoopDetected";
    StatusCode[StatusCode["NotExtended"] = 510] = "NotExtended";
    StatusCode[StatusCode["NetworkAuthRequired"] = 511] = "NetworkAuthRequired";
})(StatusCode = exports.StatusCode || (exports.StatusCode = {}));
/**
 * Is the content type binary or "string"?
 * @param {string} contentType
 * @returns {ResponseMode.binary | ResponseMode.string}
 */
function responseMode(contentType) {
    if (contentType.match(exports.contentPatternString)) {
        return ResponseMode.string;
    }
    if (contentType.match(exports.contentPatternBinary)) {
        return ResponseMode.binary;
    }
    return ResponseMode.unknown;
}
exports.responseMode = responseMode;
/**
 * Does this content type have a UTF-8 charset?
 * @param contentType
 * @returns match if it exists
 */
function isUtf8(contentType) {
    return contentType.match(/;.*\bcharset\b=\butf-8\b/i);
}
exports.isUtf8 = isUtf8;
/**
 * Converts `Values` to query string parameter format
 * @param values Name/value collection to encode
 * @returns {string} query string parameter formatted values. Both `false` and `null` are included. Only `undefined` are omitted.
 */
function encodeParams(values) {
    if (!values)
        return "";
    var keys = Object.keys(values);
    var params = keys
        .filter(function (k) { return values[k] !== undefined; }) // `null` and `false` will both be passe
        .map(function (k) { return k + '=' + encodeURIComponent(values[k]); })
        .join('&');
    return params;
}
exports.encodeParams = encodeParams;
/**
 * constructs the path argument including any optional query parameters
 * @param path the base path of the request
 * @param obj optional collection of query parameters to encode and append to the path
 */
function addQueryParams(path, obj) {
    if (!obj) {
        return path;
    }
    var qp = encodeParams(obj);
    return "" + path + (qp ? '?' + qp : '');
}
exports.addQueryParams = addQueryParams;
/**
 * SDK error handler
 * @param result any kind of error
 * @returns a new `Error` object with the failure message
 */
function sdkError(result) {
    if ('message' in result && typeof result.message === 'string') {
        return new Error(result.message);
    }
    if ('error' in result && 'message' in result.error && typeof result.error.message === 'string') {
        return new Error(result.error.message);
    }
    var error = JSON.stringify(result);
    return new Error("Unknown error with SDK method " + error);
}
exports.sdkError = sdkError;
