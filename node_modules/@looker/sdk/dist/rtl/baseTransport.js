"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = require("./transport");
var BaseTransport = /** @class */ (function () {
    function BaseTransport(options) {
        this.options = options;
        this.apiPath = '';
        this.options = options;
        this.apiPath = options.base_url + "/api/" + options.api_version;
    }
    /**
     * Determine whether the path should be an API path, a fully specified override, or relative from base_url
     * @param path Request path
     * @param options Transport settings
     * @param queryParams Collection of query Params
     * @param authenticator optional callback
     * @returns the fully specified request path including any query string parameters
     */
    BaseTransport.prototype.makePath = function (path, options, queryParams, authenticator) {
        // is this an API-versioned call?
        var base = (authenticator ? this.apiPath : options.base_url);
        if (!path.match(/^(http:\/\/|https:\/\/)/gi)) {
            path = "" + base + path; // path was relative
        }
        path = transport_1.addQueryParams(path, queryParams);
        return path;
    };
    return BaseTransport;
}());
exports.BaseTransport = BaseTransport;
