import { ApiSettings, IApiSettings } from './apiSettings';
export interface IApiSection {
    [key: string]: string;
}
/**
 * Interface that supports reading the API settings on demand from a configuration store
 *
 */
export interface IApiSettingsConfig extends IApiSettings {
    readConfig(section?: string): IApiSection;
}
/**
 * Parses `.ini` formatted content
 * @param contents formatted as an `.ini` file
 * @constructor
 */
export declare const ApiConfig: (contents: string) => {
    [key: string]: any;
};
/**
 * Extract named or (default) first section from INI file
 * @param contents {string} Parameters formatted as an INI file
 * @param section {[key: string]: any;} Contents of INI section
 * @constructor
 */
export declare const ApiConfigSection: (contents: string, section?: string | undefined) => IApiSection;
/**
 * Configuration initializer for Node applications
 *
 * This class can be used directly when configuration settings should NOT come
 * from the default environment variables or a configuration file
 *
 */
export declare class NodeSettings extends ApiSettings {
    constructor(contents: string | IApiSettings, section?: string);
    /**
     * All descendants of NodeSettings must implement readConfig to retrieve API credentials
     * since credentials are not stored in memory
     *
     * @param {string} section
     * @returns {IApiSection} is not returned and an error is thrown instead
     *
     * @throws sdkError
     *
     */
    readConfig(section?: string): IApiSection;
}
/**
 * Read configuration settings from Node environment variables
 *
 * This class initializes SDK settings **only** from the values passed in to its constructor and
 * (potentially) configured environment variables, and does not read a configuration file at all
 *
 * Any environment variables that **are** set, will override the values passed in to the constructor
 * with the same key
 *
 */
export declare class NodeSettingsEnv extends NodeSettings {
    constructor(contents?: string | IApiSettings, section?: string);
    readConfig(section?: string): IApiSection;
}
/**
 * Example class that reads a configuration from a file in node
 *
 * If `fileName` is not specified in the constructor, the default file name is `./looker.ini`
 *
 * **Warning**: `.ini` files storing credentials should be secured in the run-time environment, and
 * ignored by version control systems so credentials never get checked in to source code repositories.
 * A recommended pattern is using Node environment variables to specify confidential API credentials
 * while using an `.ini` file for values like `base_url` and `api_version`.
 *
 * **Note**: If the configuration file is specified but does **not** exist, an error will be thrown.
 * No error is thrown if the fileName defaulted to `./looker.ini` inside the constructor and that
 * file does not exist. In that case, configuration from environment variables will be required.
 *
 */
export declare class NodeSettingsIniFile extends NodeSettingsEnv implements IApiSettingsConfig {
    private readonly fileName;
    constructor(fileName?: string, section?: string);
    /**
     * Read a configuration section and return it as a generic keyed collection
     * If the configuration file doesn't exist, environment variables will be used for the values
     * Environment variables, if set, also override the configuration file values
     * @param section {string} Name of Ini section to read. Optional. Defaults to first section.
     *
     */
    readConfig(section?: string): IApiSection;
}
