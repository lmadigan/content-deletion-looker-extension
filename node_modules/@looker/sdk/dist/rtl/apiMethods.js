"use strict";
/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var transport_1 = require("./transport");
var APIMethods = /** @class */ (function () {
    function APIMethods(authSession) {
        this.authSession = authSession;
        this.authSession = authSession;
    }
    /** A helper method for simplifying error handling of SDK responses.
     *
     * Pass in a promise returned by any SDK method, and it will return a promise
     * that rejects if the `SDKResponse` is not `ok`. This will swallow the type
     * information in the error case, but allows you to route all the error cases
     * into a single promise rejection.
     *
     * The promise will have an `Error` rejection reason with a string `message`.
     * If the server error contains a `message` field, it will be provided, otherwise a
     * generic message will occur.
     *
     * ```ts
     * const sdk = LookerSDK({...})
     * let look
     * try {
     *    look = await sdk.ok(sdk.create_look({...}))
     *    // do something with look
     * }
     * catch(e) {
     *    // handle error case
     * }
     * ```
     */
    APIMethods.prototype.ok = function (promise) {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, promise];
                    case 1:
                        result = _a.sent();
                        if (result.ok) {
                            return [2 /*return*/, result.value];
                        }
                        else {
                            throw transport_1.sdkError(result);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     *
     * A helper method to add authentication to an API request for deserialization
     *
     * @param {HttpMethod} method type of HTTP method
     * @param {string} path API endpoint path
     * @param {any} queryParams Optional query params collection for request
     * @param {any} body Optional body for request
     * @param {Partial<ITransportSettings>} options Optional overrides like timeout and verify_ssl
     */
    APIMethods.prototype.authRequest = function (method, path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authSession.transport.request(method, path, queryParams, body, function (init) {
                        return _this.authSession.authenticate(init);
                    }, options)];
            });
        });
    };
    /**
     * A helper method to add authentication to an API request for streaming
     * @param {(readable: Readable) => Promise<T>} callback
     * @param {HttpMethod} method
     * @param {string} path
     * @param queryParams
     * @param body
     * @param {Partial<ITransportSettings>} options
     * @returns {Promise<T>}
     */
    APIMethods.prototype.authStream = function (callback, method, path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authSession.transport.stream(callback, method, path, queryParams, body, function (init) {
                        return _this.authSession.authenticate(init);
                    }, options)];
            });
        });
    };
    // // dynamically evaluate a template string
    // macro(template: string, vars: any) {
    //   // replace {foo} from spec path with ${foo} for template string
    //   template = template.replace(/{/gi, '${')
    //   return new Function('return `+ template +`;').call(vars)
    // }
    //
    // pathify(path: string, pathParams?: any) {
    //   if (!pathParams) return path
    //   if (path.indexOf('{') < 0) return path
    //   return this.macro(path, pathParams)
    // }
    /** Make a GET request */
    APIMethods.prototype.get = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('GET', path, queryParams, body, options)];
            });
        });
    };
    /** Make a HEAD request */
    APIMethods.prototype.head = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('HEAD', path, queryParams, body, options)];
            });
        });
    };
    /** Make a DELETE request */
    APIMethods.prototype.delete = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('DELETE', path, queryParams, body, options)];
            });
        });
    };
    /** Make a POST request */
    APIMethods.prototype.post = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('POST', path, queryParams, body, options)];
            });
        });
    };
    /** Make a PUT request */
    APIMethods.prototype.put = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('PUT', path, queryParams, body, options)];
            });
        });
    };
    /** Make a PATCH request */
    APIMethods.prototype.patch = function (path, queryParams, body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.authRequest('PATCH', path, queryParams, body, options)];
            });
        });
    };
    return APIMethods;
}());
exports.APIMethods = APIMethods;
