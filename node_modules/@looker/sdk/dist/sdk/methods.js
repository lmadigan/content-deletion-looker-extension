"use strict";
// 334 API methods
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
// NOTE: Do not edit this source code file. It is generated by Looker SDK Codegen.
var apiMethods_1 = require("../rtl/apiMethods");
var streams_1 = require("./streams");
var LookerSDK = /** @class */ (function (_super) {
    __extends(LookerSDK, _super);
    function LookerSDK(authSession) {
        var _this = _super.call(this, authSession) || this;
        _this.stream = new streams_1.LookerSDKStream(authSession);
        return _this;
    }
    /**
     * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub
     */
    LookerSDK.prototype.accept_integration_hub_legal_agreement = function (
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/integration_hubs/" + integration_hub_id + "/accept_legal_agreement"), null, null, options)];
            });
        });
    };
    /**
     * GET /themes/active -> ITheme[]
     */
    LookerSDK.prototype.active_themes = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/active', { name: request.name, ts: request.ts, fields: request.fields }, null, options)];
            });
        });
    };
    /**
     * POST /groups/{group_id}/groups -> IGroup
     */
    LookerSDK.prototype.add_group_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IGroupIdForGroupInclusion>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/groups/" + group_id + "/groups"), null, body, options)];
            });
        });
    };
    /**
     * POST /groups/{group_id}/users -> IUser
     */
    LookerSDK.prototype.add_group_user = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IGroupIdForGroupUserInclusion>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/groups/" + group_id + "/users"), null, body, options)];
            });
        });
    };
    /**
     * GET /color_collections -> IColorCollection[]
     */
    LookerSDK.prototype.all_color_collections = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /connections -> IDBConnection[]
     */
    LookerSDK.prototype.all_connections = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/connections', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata_access -> IContentMetaGroupUser[]
     */
    LookerSDK.prototype.all_content_metadata_accesses = function (
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_metadata_access', { content_metadata_id: content_metadata_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata -> IContentMeta[]
     */
    LookerSDK.prototype.all_content_metadatas = function (
    /**
     * @param {number} parent_id Parent space of content.
     */
    parent_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_metadata', { parent_id: parent_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards -> IDashboardBase[]
     */
    LookerSDK.prototype.all_dashboards = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dashboards', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /datagroups -> IDatagroup[]
     */
    LookerSDK.prototype.all_datagroups = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/datagroups', null, null, options)];
            });
        });
    };
    /**
     * GET /dialect_info -> IDialectInfo[]
     */
    LookerSDK.prototype.all_dialect_infos = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dialect_info', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders -> IFolder[]
     */
    LookerSDK.prototype.all_folders = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/folders', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branches -> IGitBranch[]
     */
    LookerSDK.prototype.all_git_branches = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_branches"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]
     */
    LookerSDK.prototype.all_git_connection_tests = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_connection_tests"), { remote_url: remote_url }, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id}/groups -> IGroup[]
     */
    LookerSDK.prototype.all_group_groups = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/groups/" + group_id + "/groups"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id}/users -> IUser[]
     */
    LookerSDK.prototype.all_group_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/groups/" + request.group_id + "/users"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /groups -> IGroup[]
     */
    LookerSDK.prototype.all_groups = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/groups', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        ids: request.ids,
                        content_metadata_id: request.content_metadata_id,
                        can_add_to_content_metadata: request.can_add_to_content_metadata,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_items -> IHomepageItem[]
     */
    LookerSDK.prototype.all_homepage_items = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepage_items', {
                        fields: request.fields,
                        sorts: request.sorts,
                        homepage_section_id: request.homepage_section_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_sections -> IHomepageSection[]
     */
    LookerSDK.prototype.all_homepage_sections = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepage_sections', { fields: request.fields, sorts: request.sorts }, null, options)];
            });
        });
    };
    /**
     * GET /homepages -> IHomepage[]
     */
    LookerSDK.prototype.all_homepages = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepages', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integration_hubs -> IIntegrationHub[]
     */
    LookerSDK.prototype.all_integration_hubs = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/integration_hubs', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integrations -> IIntegration[]
     */
    LookerSDK.prototype.all_integrations = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/integrations', {
                        fields: request.fields,
                        integration_hub_id: request.integration_hub_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /legacy_features -> ILegacyFeature[]
     */
    LookerSDK.prototype.all_legacy_features = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/legacy_features', null, null, options)];
            });
        });
    };
    /**
     * GET /locales -> ILocale[]
     */
    LookerSDK.prototype.all_locales = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/locales', null, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models -> ILookmlModel[]
     */
    LookerSDK.prototype.all_lookml_models = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/lookml_models', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]
     */
    LookerSDK.prototype.all_lookml_tests = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} file_id File Id
     */
    file_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/lookml_tests"), { file_id: file_id }, null, options)];
            });
        });
    };
    /**
     * GET /looks -> ILook[]
     */
    LookerSDK.prototype.all_looks = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/looks', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets -> IModelSet[]
     */
    LookerSDK.prototype.all_model_sets = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/model_sets', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /permission_sets -> IPermissionSet[]
     */
    LookerSDK.prototype.all_permission_sets = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/permission_sets', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /permissions -> IPermission[]
     */
    LookerSDK.prototype.all_permissions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/permissions', null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/files -> IProjectFile[]
     */
    LookerSDK.prototype.all_project_files = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/files"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects -> IProject[]
     */
    LookerSDK.prototype.all_projects = function (
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/projects', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /roles -> IRole[]
     */
    LookerSDK.prototype.all_roles = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/roles', { fields: request.fields, ids: request.ids }, null, options)];
            });
        });
    };
    /**
     * GET /running_queries -> IRunningQueries[]
     */
    LookerSDK.prototype.all_running_queries = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/running_queries', null, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans -> IScheduledPlan[]
     */
    LookerSDK.prototype.all_scheduled_plans = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/scheduled_plans', {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces -> ISpaceBase[]
     */
    LookerSDK.prototype.all_spaces = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/spaces', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /themes -> ITheme[]
     */
    LookerSDK.prototype.all_themes = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /timezones -> ITimezone[]
     */
    LookerSDK.prototype.all_timezones = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/timezones', null, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    LookerSDK.prototype.all_user_attribute_group_values = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/user_attributes/" + user_attribute_id + "/group_values"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes -> IUserAttribute[]
     */
    LookerSDK.prototype.all_user_attributes = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user_attributes', { fields: request.fields, sorts: request.sorts }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]
     */
    LookerSDK.prototype.all_user_credentials_api3s = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_api3"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]
     */
    LookerSDK.prototype.all_user_credentials_embeds = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_embed"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_login_lockouts -> IUserLoginLockout[]
     */
    LookerSDK.prototype.all_user_login_lockouts = function (
    /**
     * @param {string} fields Include only these fields in the response
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user_login_lockouts', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/sessions -> ISession[]
     */
    LookerSDK.prototype.all_user_sessions = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/sessions"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users -> IUser[]
     */
    LookerSDK.prototype.all_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/users', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        ids: request.ids,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /workspaces -> IWorkspace[]
     */
    LookerSDK.prototype.all_workspaces = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/workspaces', null, null, options)];
            });
        });
    };
    /**
     * GET /backup_configuration -> IBackupConfiguration
     */
    LookerSDK.prototype.backup_configuration = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/backup_configuration', null, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/{collection_id} -> IColorCollection
     */
    LookerSDK.prototype.color_collection = function (
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/color_collections/" + collection_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/custom -> IColorCollection[]
     */
    LookerSDK.prototype.color_collections_custom = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections/custom', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/standard -> IColorCollection[]
     */
    LookerSDK.prototype.color_collections_standard = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections/standard', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /connections/{connection_name} -> IDBConnection
     */
    LookerSDK.prototype.connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/connections/" + connection_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_favorite/{content_favorite_id} -> IContentFavorite
     */
    LookerSDK.prototype.content_favorite = function (
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/content_favorite/" + content_favorite_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_metadata/{content_metadata_id} -> IContentMeta
     */
    LookerSDK.prototype.content_metadata = function (
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/content_metadata/" + content_metadata_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_validation -> IContentValidation
     */
    LookerSDK.prototype.content_validation = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_validation', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /color_collections -> IColorCollection
     */
    LookerSDK.prototype.create_color_collection = function (
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/color_collections', null, body, options)];
            });
        });
    };
    /**
     * POST /connections -> IDBConnection
     */
    LookerSDK.prototype.create_connection = function (
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/connections', null, body, options)];
            });
        });
    };
    /**
     * POST /content_favorite -> IContentFavorite
     */
    LookerSDK.prototype.create_content_favorite = function (
    /**
     * @param {Partial<IWriteContentFavorite>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/content_favorite', null, body, options)];
            });
        });
    };
    /**
     * POST /content_metadata_access -> IContentMetaGroupUser
     */
    LookerSDK.prototype.create_content_metadata_access = function (
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body, 
    /**
     * @param {boolean} send_boards_notification_email Optionally sends notification email when granting access to a board.
     */
    send_boards_notification_email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/content_metadata_access', { send_boards_notification_email: send_boards_notification_email }, body, options)];
            });
        });
    };
    /**
     * POST /dashboards -> IDashboard
     */
    LookerSDK.prototype.create_dashboard = function (
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboards', null, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_elements -> IDashboardElement
     */
    LookerSDK.prototype.create_dashboard_element = function (
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboard_elements', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_filters -> IDashboardFilter
     */
    LookerSDK.prototype.create_dashboard_filter = function (
    /**
     * @param {Partial<IWriteCreateDashboardFilter>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboard_filters', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /dashboard_layouts -> IDashboardLayout
     */
    LookerSDK.prototype.create_dashboard_layout = function (
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/dashboard_layouts', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_dashboard_render_task = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/dashboards/" + request.dashboard_id + "/" + request.result_format), {
                        width: request.width,
                        height: request.height,
                        fields: request.fields,
                        pdf_paper_size: request.pdf_paper_size,
                        pdf_landscape: request.pdf_landscape,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /folders -> IFolder
     */
    LookerSDK.prototype.create_folder = function (
    /**
     * @param {Partial<IWriteFolder>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/folders', null, body, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDK.prototype.create_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/git_branch"), null, body, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/git/deploy_key -> string
     */
    LookerSDK.prototype.create_git_deploy_key = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/git/deploy_key"), null, null, options)];
            });
        });
    };
    /**
     * POST /groups -> IGroup
     */
    LookerSDK.prototype.create_group = function (
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/groups', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepages -> IHomepage
     */
    LookerSDK.prototype.create_homepage = function (
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/homepages', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepage_items -> IHomepageItem
     */
    LookerSDK.prototype.create_homepage_item = function (
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/homepage_items', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /homepage_sections -> IHomepageSection
     */
    LookerSDK.prototype.create_homepage_section = function (
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/homepage_sections', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /integration_hubs -> IIntegrationHub
     */
    LookerSDK.prototype.create_integration_hub = function (
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/integration_hubs', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /looks -> ILookWithQuery
     */
    LookerSDK.prototype.create_look = function (
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/looks', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_look_render_task = function (
    /**
     * @param {number} look_id Id of look to render
     */
    look_id, 
    /**
     * @param {string} result_format Output type: png, or jpg
     */
    result_format, 
    /**
     * @param {number} width Output width in pixels
     */
    width, 
    /**
     * @param {number} height Output height in pixels
     */
    height, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/looks/" + look_id + "/" + result_format), { width: width, height: height, fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_lookml_dashboard_render_task = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/lookml_dashboards/" + request.dashboard_id + "/" + request.result_format), {
                        width: request.width,
                        height: request.height,
                        fields: request.fields,
                        pdf_paper_size: request.pdf_paper_size,
                        pdf_landscape: request.pdf_landscape,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /lookml_models -> ILookmlModel
     */
    LookerSDK.prototype.create_lookml_model = function (
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/lookml_models', null, body, options)];
            });
        });
    };
    /**
     * POST /merge_queries -> IMergeQuery
     */
    LookerSDK.prototype.create_merge_query = function (
    /**
     * @param {Partial<IWriteMergeQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/merge_queries', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /model_sets -> IModelSet
     */
    LookerSDK.prototype.create_model_set = function (
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/model_sets', null, body, options)];
            });
        });
    };
    /**
     * POST /oidc_test_configs -> IOIDCConfig
     */
    LookerSDK.prototype.create_oidc_test_config = function (
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/oidc_test_configs', null, body, options)];
            });
        });
    };
    /**
     * POST /permission_sets -> IPermissionSet
     */
    LookerSDK.prototype.create_permission_set = function (
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/permission_sets', null, body, options)];
            });
        });
    };
    /**
     * POST /projects -> IProject
     */
    LookerSDK.prototype.create_project = function (
    /**
     * @param {Partial<IWriteProject>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/projects', null, body, options)];
            });
        });
    };
    /**
     * POST /queries -> IQuery
     */
    LookerSDK.prototype.create_query = function (
    /**
     * @param {Partial<IWriteQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/queries', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask
     */
    LookerSDK.prototype.create_query_render_task = function (
    /**
     * @param {number} query_id Id of the query to render
     */
    query_id, 
    /**
     * @param {string} result_format Output type: png or jpg
     */
    result_format, 
    /**
     * @param {number} width Output width in pixels
     */
    width, 
    /**
     * @param {number} height Output height in pixels
     */
    height, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/render_tasks/queries/" + query_id + "/" + result_format), { width: width, height: height, fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /query_tasks -> IQueryTask
     */
    LookerSDK.prototype.create_query_task = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/query_tasks', {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                        fields: request.fields,
                    }, request.body, options)];
            });
        });
    };
    /**
     * POST /roles -> IRole
     */
    LookerSDK.prototype.create_role = function (
    /**
     * @param {Partial<IWriteRole>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/roles', null, body, options)];
            });
        });
    };
    /**
     * POST /saml_test_configs -> ISamlConfig
     */
    LookerSDK.prototype.create_saml_test_config = function (
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/saml_test_configs', null, body, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans -> IScheduledPlan
     */
    LookerSDK.prototype.create_scheduled_plan = function (
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/scheduled_plans', null, body, options)];
            });
        });
    };
    /**
     * POST /spaces -> ISpace
     */
    LookerSDK.prototype.create_space = function (
    /**
     * @param {Partial<IWriteSpace>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/spaces', null, body, options)];
            });
        });
    };
    /**
     * POST /sql_queries -> ISqlQuery
     */
    LookerSDK.prototype.create_sql_query = function (
    /**
     * @param {Partial<IWriteSqlQueryCreate>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/sql_queries', null, body, options)];
            });
        });
    };
    /**
     * POST /embed/sso_url -> IEmbedSsoUrl
     */
    LookerSDK.prototype.create_sso_embed_url = function (
    /**
     * @param {Partial<IWriteEmbedSsoUrlParams>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/embed/sso_url', null, body, options)];
            });
        });
    };
    /**
     * POST /themes -> ITheme
     */
    LookerSDK.prototype.create_theme = function (
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/themes', null, body, options)];
            });
        });
    };
    /**
     * POST /users -> IUser
     */
    LookerSDK.prototype.create_user = function (
    /**
     * @param {Partial<IWriteUser>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/users', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /user_attributes -> IUserAttribute
     */
    LookerSDK.prototype.create_user_attribute = function (
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/user_attributes', { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_api3 -> ICredentialsApi3
     */
    LookerSDK.prototype.create_user_credentials_api3 = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<ICredentialsApi3>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + user_id + "/credentials_api3"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDK.prototype.create_user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail
     */
    LookerSDK.prototype.create_user_credentials_email_password_reset = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + request.user_id + "/credentials_email/password_reset"), { expires: request.expires, fields: request.fields }, null, options)];
            });
        });
    };
    /**
     * POST /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    LookerSDK.prototype.create_user_credentials_totp = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<ICredentialsTotp>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/users/" + user_id + "/credentials_totp"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * GET /custom_welcome_email -> ICustomWelcomeEmail
     */
    LookerSDK.prototype.custom_welcome_email = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/custom_welcome_email', null, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id} -> IDashboard
     */
    LookerSDK.prototype.dashboard = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]
     */
    LookerSDK.prototype.dashboard_dashboard_elements = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id + "/dashboard_elements"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]
     */
    LookerSDK.prototype.dashboard_dashboard_filters = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id + "/dashboard_filters"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]
     */
    LookerSDK.prototype.dashboard_dashboard_layouts = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboards/" + dashboard_id + "/dashboard_layouts"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    LookerSDK.prototype.dashboard_element = function (
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_elements/" + dashboard_element_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    LookerSDK.prototype.dashboard_filter = function (
    /**
     * @param {string} dashboard_filter_id Id of dashboard filters
     */
    dashboard_filter_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_filters/" + dashboard_filter_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    LookerSDK.prototype.dashboard_layout = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layouts
     */
    dashboard_layout_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_layouts/" + dashboard_layout_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    LookerSDK.prototype.dashboard_layout_component = function (
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_layout_components/" + dashboard_layout_component_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]
     */
    LookerSDK.prototype.dashboard_layout_dashboard_layout_components = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout component
     */
    dashboard_layout_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/dashboard_layouts/" + dashboard_layout_id + "/dashboard_layout_components"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /datagroups/{datagroup_id} -> IDatagroup
     */
    LookerSDK.prototype.datagroup = function (
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/datagroups/" + datagroup_id), null, null, options)];
            });
        });
    };
    /**
     * GET /color_collections/default -> IColorCollection
     */
    LookerSDK.prototype.default_color_collection = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/color_collections/default', null, null, options)];
            });
        });
    };
    /**
     * GET /themes/default -> ITheme
     */
    LookerSDK.prototype.default_theme = function (
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/default', { ts: ts }, null, options)];
            });
        });
    };
    /**
     * DELETE /color_collections/{collection_id} -> string
     */
    LookerSDK.prototype.delete_color_collection = function (
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/color_collections/" + collection_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /connections/{connection_name} -> string
     */
    LookerSDK.prototype.delete_connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/connections/" + connection_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /connections/{connection_name}/connection_override/{override_context} -> string
     */
    LookerSDK.prototype.delete_connection_override = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {string} override_context Context of connection override
     */
    override_context, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/connections/" + connection_name + "/connection_override/" + override_context), null, null, options)];
            });
        });
    };
    /**
     * DELETE /content_favorite/{content_favorite_id} -> string
     */
    LookerSDK.prototype.delete_content_favorite = function (
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/content_favorite/" + content_favorite_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /content_metadata_access/{content_metadata_access_id} -> string
     */
    LookerSDK.prototype.delete_content_metadata_access = function (
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/content_metadata_access/" + content_metadata_access_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboards/{dashboard_id} -> string
     */
    LookerSDK.prototype.delete_dashboard = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboards/" + dashboard_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_elements/{dashboard_element_id} -> string
     */
    LookerSDK.prototype.delete_dashboard_element = function (
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboard_elements/" + dashboard_element_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_filters/{dashboard_filter_id} -> string
     */
    LookerSDK.prototype.delete_dashboard_filter = function (
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboard_filters/" + dashboard_filter_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /dashboard_layouts/{dashboard_layout_id} -> string
     */
    LookerSDK.prototype.delete_dashboard_layout = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/dashboard_layouts/" + dashboard_layout_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /folders/{folder_id} -> string
     */
    LookerSDK.prototype.delete_folder = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/folders/" + folder_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /projects/{project_id}/git_branch/{branch_name} -> string
     */
    LookerSDK.prototype.delete_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/projects/" + project_id + "/git_branch/" + branch_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id} -> string
     */
    LookerSDK.prototype.delete_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void
     */
    LookerSDK.prototype.delete_group_from_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} deleting_group_id Id of group to delete
     */
    deleting_group_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id + "/groups/" + deleting_group_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/users/{user_id} -> void
     */
    LookerSDK.prototype.delete_group_user = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_id Id of user to remove from group
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id + "/users/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepages/{homepage_id} -> string
     */
    LookerSDK.prototype.delete_homepage = function (
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/homepages/" + homepage_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepage_items/{homepage_item_id} -> string
     */
    LookerSDK.prototype.delete_homepage_item = function (
    /**
     * @param {number} homepage_item_id Id of homepage_item
     */
    homepage_item_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/homepage_items/" + homepage_item_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /homepage_sections/{homepage_section_id} -> string
     */
    LookerSDK.prototype.delete_homepage_section = function (
    /**
     * @param {number} homepage_section_id Id of homepage_section
     */
    homepage_section_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/homepage_sections/" + homepage_section_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /integration_hubs/{integration_hub_id} -> string
     */
    LookerSDK.prototype.delete_integration_hub = function (
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/integration_hubs/" + integration_hub_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /looks/{look_id} -> string
     */
    LookerSDK.prototype.delete_look = function (
    /**
     * @param {number} look_id Id of look
     */
    look_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/looks/" + look_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /lookml_models/{lookml_model_name} -> string
     */
    LookerSDK.prototype.delete_lookml_model = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/lookml_models/" + lookml_model_name), null, null, options)];
            });
        });
    };
    /**
     * DELETE /model_sets/{model_set_id} -> string
     */
    LookerSDK.prototype.delete_model_set = function (
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/model_sets/" + model_set_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /oidc_test_configs/{test_slug} -> string
     */
    LookerSDK.prototype.delete_oidc_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/oidc_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * DELETE /permission_sets/{permission_set_id} -> string
     */
    LookerSDK.prototype.delete_permission_set = function (
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/permission_sets/" + permission_set_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /projects/{root_project_id}/credential/{credential_id} -> string
     */
    LookerSDK.prototype.delete_repository_credential = function (
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/projects/" + root_project_id + "/credential/" + credential_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /roles/{role_id} -> string
     */
    LookerSDK.prototype.delete_role = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/roles/" + role_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /saml_test_configs/{test_slug} -> string
     */
    LookerSDK.prototype.delete_saml_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/saml_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * DELETE /scheduled_plans/{scheduled_plan_id} -> string
     */
    LookerSDK.prototype.delete_scheduled_plan = function (
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/scheduled_plans/" + scheduled_plan_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /spaces/{space_id} -> string
     */
    LookerSDK.prototype.delete_space = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/spaces/" + space_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /themes/{theme_id} -> string
     */
    LookerSDK.prototype.delete_theme = function (
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/themes/" + theme_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id} -> string
     */
    LookerSDK.prototype.delete_user = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /user_attributes/{user_attribute_id} -> string
     */
    LookerSDK.prototype.delete_user_attribute = function (
    /**
     * @param {number} user_attribute_id Id of user_attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/user_attributes/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void
     */
    LookerSDK.prototype.delete_user_attribute_group_value = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/groups/" + group_id + "/attribute_values/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void
     */
    LookerSDK.prototype.delete_user_attribute_user_value = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/attribute_values/" + user_attribute_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string
     */
    LookerSDK.prototype.delete_user_credentials_api3 = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} credentials_api3_id id of API 3 Credential
     */
    credentials_api3_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_api3/" + credentials_api3_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_email -> string
     */
    LookerSDK.prototype.delete_user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_email"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string
     */
    LookerSDK.prototype.delete_user_credentials_embed = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} credentials_embed_id id of Embedding Credential
     */
    credentials_embed_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_embed/" + credentials_embed_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_google -> string
     */
    LookerSDK.prototype.delete_user_credentials_google = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_google"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_ldap -> string
     */
    LookerSDK.prototype.delete_user_credentials_ldap = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_ldap"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_looker_openid -> string
     */
    LookerSDK.prototype.delete_user_credentials_looker_openid = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_looker_openid"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_oidc -> string
     */
    LookerSDK.prototype.delete_user_credentials_oidc = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_oidc"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_saml -> string
     */
    LookerSDK.prototype.delete_user_credentials_saml = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_saml"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/credentials_totp -> string
     */
    LookerSDK.prototype.delete_user_credentials_totp = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/credentials_totp"), null, null, options)];
            });
        });
    };
    /**
     * DELETE /user_login_lockout/{key} -> string
     */
    LookerSDK.prototype.delete_user_login_lockout = function (
    /**
     * @param {string} key The key associated with the locked user
     */
    key, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/user_login_lockout/" + key), null, null, options)];
            });
        });
    };
    /**
     * DELETE /users/{user_id}/sessions/{session_id} -> string
     */
    LookerSDK.prototype.delete_user_session = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {number} session_id id of Web Login Session
     */
    session_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/users/" + user_id + "/sessions/" + session_id), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/deploy_to_production -> string
     */
    LookerSDK.prototype.deploy_to_production = function (
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/deploy_to_production"), null, null, options)];
            });
        });
    };
    /**
     * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    LookerSDK.prototype.fetch_and_parse_saml_idp_metadata = function (
    /**
     * @param {Partial<string>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/fetch_and_parse_saml_idp_metadata', null, body, options)];
            });
        });
    };
    /**
     * POST /integrations/{integration_id}/form -> IDataActionForm
     */
    LookerSDK.prototype.fetch_integration_form = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/integrations/" + integration_id + "/form"), null, null, options)];
            });
        });
    };
    /**
     * POST /data_actions/form -> IDataActionForm
     */
    LookerSDK.prototype.fetch_remote_data_action_form = function (
    /**
     * @param {Partial<IDictionary<string>>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/data_actions/form', null, body, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch
     */
    LookerSDK.prototype.find_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_branch/" + branch_name), null, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id} -> IFolder
     */
    LookerSDK.prototype.folder = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/ancestors -> IFolder[]
     */
    LookerSDK.prototype.folder_ancestors = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/ancestors"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/children -> ISpace[]
     */
    LookerSDK.prototype.folder_children = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + request.folder_id + "/children"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/children/search -> IFolder[]
     */
    LookerSDK.prototype.folder_children_search = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + request.folder_id + "/children/search"), { fields: request.fields, sorts: request.sorts, name: request.name }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/dashboards -> IDashboard[]
     */
    LookerSDK.prototype.folder_dashboards = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/dashboards"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/looks -> ILookWithQuery[]
     */
    LookerSDK.prototype.folder_looks = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/looks"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /folders/{folder_id}/parent -> IFolder
     */
    LookerSDK.prototype.folder_parent = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/folders/" + folder_id + "/parent"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string
     */
    LookerSDK.prototype.force_password_reset_at_next_login_for_all_users = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/password_config/force_password_reset_at_next_login_for_all_users', null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]
     */
    LookerSDK.prototype.get_all_repository_credentials = function (
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + root_project_id + "/credentials"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDK.prototype.git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_branch"), null, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git/deploy_key -> string
     */
    LookerSDK.prototype.git_deploy_key = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git/deploy_key"), null, null, options)];
            });
        });
    };
    /**
     * GET /groups/{group_id} -> IGroup
     */
    LookerSDK.prototype.group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/groups/" + group_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepages/{homepage_id} -> IHomepage
     */
    LookerSDK.prototype.homepage = function (
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/homepages/" + homepage_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    LookerSDK.prototype.homepage_item = function (
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/homepage_items/" + homepage_item_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    LookerSDK.prototype.homepage_section = function (
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/homepage_sections/" + homepage_section_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard
     */
    LookerSDK.prototype.import_lookml_dashboard = function (
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard
     */
    lookml_dashboard_id, 
    /**
     * @param {string} space_id Id of space to import the dashboard to
     */
    space_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/dashboards/" + lookml_dashboard_id + "/import/" + space_id), { raw_locale: raw_locale }, body, options)];
            });
        });
    };
    /**
     * GET /integrations/{integration_id} -> IIntegration
     */
    LookerSDK.prototype.integration = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/integrations/" + integration_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    LookerSDK.prototype.integration_hub = function (
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/integration_hubs/" + integration_hub_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /internal_help_resources_enabled -> IInternalHelpResources
     */
    LookerSDK.prototype.internal_help_resources = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/internal_help_resources_enabled', null, null, options)];
            });
        });
    };
    /**
     * GET /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    LookerSDK.prototype.internal_help_resources_content = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/internal_help_resources_content', null, null, options)];
            });
        });
    };
    /**
     * DELETE /running_queries/{query_task_id} -> string
     */
    LookerSDK.prototype.kill_query = function (
    /**
     * @param {string} query_task_id Query task id.
     */
    query_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete(encodeURI("/running_queries/" + query_task_id), null, null, options)];
            });
        });
    };
    /**
     * GET /ldap_config -> ILDAPConfig
     */
    LookerSDK.prototype.ldap_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/ldap_config', null, null, options)];
            });
        });
    };
    /**
     * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    LookerSDK.prototype.legacy_feature = function (
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/legacy_features/" + legacy_feature_id), null, null, options)];
            });
        });
    };
    /**
     * POST /login -> IAccessToken
     */
    LookerSDK.prototype.login = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/login', { client_id: request.client_id, client_secret: request.client_secret }, null, options)];
            });
        });
    };
    /**
     * POST /login/{user_id} -> IAccessToken
     */
    LookerSDK.prototype.login_user = function (
    /**
     * @param {number} user_id Id of user.
     */
    user_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/login/" + user_id), null, null, options)];
            });
        });
    };
    /**
     * DELETE /logout -> string
     */
    LookerSDK.prototype.logout = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.delete('/logout', null, null, options)];
            });
        });
    };
    /**
     * GET /looks/{look_id} -> ILookWithQuery
     */
    LookerSDK.prototype.look = function (
    /**
     * @param {number} look_id Id of look
     */
    look_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/looks/" + look_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    LookerSDK.prototype.lookml_model = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/lookml_models/" + lookml_model_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore
     */
    LookerSDK.prototype.lookml_model_explore = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {string} explore_name Name of explore.
     */
    explore_name, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/lookml_models/" + lookml_model_name + "/explores/" + explore_name), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/manifest -> IManifest
     */
    LookerSDK.prototype.manifest = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/manifest"), null, null, options)];
            });
        });
    };
    /**
     * GET /user -> IUser
     */
    LookerSDK.prototype.me = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /merge_queries/{merge_query_id} -> IMergeQuery
     */
    LookerSDK.prototype.merge_query = function (
    /**
     * @param {string} merge_query_id Merge Query Id
     */
    merge_query_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/merge_queries/" + merge_query_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /model_sets/{model_set_id} -> IModelSet
     */
    LookerSDK.prototype.model_set = function (
    /**
     * @param {number} model_set_id Id of model set
     */
    model_set_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/model_sets/" + model_set_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /oidc_config -> IOIDCConfig
     */
    LookerSDK.prototype.oidc_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/oidc_config', null, null, options)];
            });
        });
    };
    /**
     * GET /oidc_test_configs/{test_slug} -> IOIDCConfig
     */
    LookerSDK.prototype.oidc_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/oidc_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    LookerSDK.prototype.parse_saml_idp_metadata = function (
    /**
     * @param {Partial<string>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/parse_saml_idp_metadata', null, body, options)];
            });
        });
    };
    /**
     * GET /password_config -> IPasswordConfig
     */
    LookerSDK.prototype.password_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/password_config', null, null, options)];
            });
        });
    };
    /**
     * POST /data_actions -> IDataActionResponse
     */
    LookerSDK.prototype.perform_data_action = function (
    /**
     * @param {Partial<IWriteDataActionRequest>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/data_actions', null, body, options)];
            });
        });
    };
    /**
     * GET /permission_sets/{permission_set_id} -> IPermissionSet
     */
    LookerSDK.prototype.permission_set = function (
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/permission_sets/" + permission_set_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id} -> IProject
     */
    LookerSDK.prototype.project = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/files/file -> IProjectFile
     */
    LookerSDK.prototype.project_file = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} file_id File Id
     */
    file_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/files/file"), { file_id: file_id, fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/validate -> IProjectValidationCache
     */
    LookerSDK.prototype.project_validation_results = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/validate"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/current_workspace -> IProjectWorkspace
     */
    LookerSDK.prototype.project_workspace = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/current_workspace"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /queries/{query_id} -> IQuery
     */
    LookerSDK.prototype.query = function (
    /**
     * @param {number} query_id Id of query
     */
    query_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/" + query_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /queries/slug/{slug} -> IQuery
     */
    LookerSDK.prototype.query_for_slug = function (
    /**
     * @param {string} slug Slug of query
     */
    slug, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/slug/" + slug), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/{query_task_id} -> IQueryTask
     */
    LookerSDK.prototype.query_task = function (
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/query_tasks/" + query_task_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/multi_results -> IDictionary<string>
     */
    LookerSDK.prototype.query_task_multi_results = function (
    /**
     * @param {DelimArray<string>} query_task_ids List of Query Task IDs
     */
    query_task_ids, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/query_tasks/multi_results', { query_task_ids: query_task_ids }, null, options)];
            });
        });
    };
    /**
     * GET /query_tasks/{query_task_id}/results -> IDictionary<string>
     */
    LookerSDK.prototype.query_task_results = function (
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/query_tasks/" + query_task_id + "/results"), null, null, options)];
            });
        });
    };
    /**
     * GET /render_tasks/{render_task_id} -> IRenderTask
     */
    LookerSDK.prototype.render_task = function (
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/render_tasks/" + render_task_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /render_tasks/{render_task_id}/results -> string
     *
     * **Note**: Binary content is returned by this method.
     */
    LookerSDK.prototype.render_task_results = function (
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/render_tasks/" + render_task_id + "/results"), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/reset_to_production -> string
     */
    LookerSDK.prototype.reset_project_to_production = function (
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/reset_to_production"), null, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/reset_to_remote -> string
     */
    LookerSDK.prototype.reset_project_to_remote = function (
    /**
     * @param {string} project_id Id of project
     */
    project_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/reset_to_remote"), null, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id} -> IRole
     */
    LookerSDK.prototype.role = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/roles/" + role_id), null, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id}/groups -> IGroup[]
     */
    LookerSDK.prototype.role_groups = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/roles/" + role_id + "/groups"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /roles/{role_id}/users -> IUser[]
     */
    LookerSDK.prototype.role_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/roles/" + request.role_id + "/users"), {
                        fields: request.fields,
                        direct_association_only: request.direct_association_only,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult
     */
    LookerSDK.prototype.run_git_connection_test = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} test_id Test Id
     */
    test_id, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + project_id + "/git_connection_tests/" + test_id), { remote_url: remote_url }, null, options)];
            });
        });
    };
    /**
     * POST /queries/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_inline_query = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/queries/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, request.body, options)];
            });
        });
    };
    /**
     * GET /looks/{look_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_look = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/looks/" + request.look_id + "/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]
     */
    LookerSDK.prototype.run_lookml_test = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/projects/" + request.project_id + "/lookml_tests/run"), { file_id: request.file_id, test: request.test, model: request.model }, null, options)];
            });
        });
    };
    /**
     * GET /queries/{query_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_query = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/" + request.query_id + "/run/" + request.result_format), {
                        limit: request.limit,
                        apply_formatting: request.apply_formatting,
                        apply_vis: request.apply_vis,
                        cache: request.cache,
                        image_width: request.image_width,
                        image_height: request.image_height,
                        generate_drill_links: request.generate_drill_links,
                        force_production: request.force_production,
                        cache_only: request.cache_only,
                        path_prefix: request.path_prefix,
                        rebuild_pdts: request.rebuild_pdts,
                        server_table_calcs: request.server_table_calcs,
                    }, null, options)];
            });
        });
    };
    /**
     * POST /sql_queries/{slug}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_sql_query = function (
    /**
     * @param {string} slug slug of query
     */
    slug, 
    /**
     * @param {string} result_format Format of result, options are: ["json", "json_label", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml"]
     */
    result_format, 
    /**
     * @param {string} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
     */
    download, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/sql_queries/" + slug + "/run/" + result_format), { download: download }, null, options)];
            });
        });
    };
    /**
     * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    LookerSDK.prototype.run_url_encoded_query = function (
    /**
     * @param {string} model_name Model name
     */
    model_name, 
    /**
     * @param {string} view_name View name
     */
    view_name, 
    /**
     * @param {string} result_format Format of result
     */
    result_format, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/queries/models/" + model_name + "/views/" + view_name + "/run/" + result_format), null, null, options)];
            });
        });
    };
    /**
     * GET /saml_config -> ISamlConfig
     */
    LookerSDK.prototype.saml_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/saml_config', null, null, options)];
            });
        });
    };
    /**
     * GET /saml_test_configs/{test_slug} -> ISamlConfig
     */
    LookerSDK.prototype.saml_test_config = function (
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/saml_test_configs/" + test_slug), null, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    LookerSDK.prototype.scheduled_plan = function (
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/" + scheduled_plan_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans/run_once -> IScheduledPlan
     */
    LookerSDK.prototype.scheduled_plan_run_once = function (
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/scheduled_plans/run_once', null, body, options)];
            });
        });
    };
    /**
     * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan
     */
    LookerSDK.prototype.scheduled_plan_run_once_by_id = function (
    /**
     * @param {number} scheduled_plan_id Id of schedule plan to copy and run
     */
    scheduled_plan_id, 
    /**
     * @param {Partial<IWriteWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/scheduled_plans/" + scheduled_plan_id + "/run_once"), null, body, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_dashboard = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/dashboard/" + request.dashboard_id), {
                        user_id: request.user_id,
                        all_users: request.all_users,
                        fields: request.fields,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_look = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/look/" + request.look_id), {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_lookml_dashboard = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/lookml_dashboard/" + request.lookml_dashboard_id), {
                        user_id: request.user_id,
                        fields: request.fields,
                        all_users: request.all_users,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]
     */
    LookerSDK.prototype.scheduled_plans_for_space = function (
    /**
     * @param {number} space_id Space Id
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/scheduled_plans/space/" + space_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /content_favorite/search -> IContentFavorite[]
     */
    LookerSDK.prototype.search_content_favorites = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_favorite/search', {
                        id: request.id,
                        user_id: request.user_id,
                        content_metadata_id: request.content_metadata_id,
                        dashboard_id: request.dashboard_id,
                        look_id: request.look_id,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        fields: request.fields,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /content_view/search -> IContentView[]
     */
    LookerSDK.prototype.search_content_views = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/content_view/search', {
                        view_count: request.view_count,
                        group_id: request.group_id,
                        look_id: request.look_id,
                        dashboard_id: request.dashboard_id,
                        content_metadata_id: request.content_metadata_id,
                        start_of_week_date: request.start_of_week_date,
                        all_time: request.all_time,
                        user_id: request.user_id,
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /dashboard_elements/search -> IDashboardElement[]
     */
    LookerSDK.prototype.search_dashboard_elements = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dashboard_elements/search', {
                        dashboard_id: request.dashboard_id,
                        look_id: request.look_id,
                        title: request.title,
                        deleted: request.deleted,
                        fields: request.fields,
                        filter_or: request.filter_or,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /dashboards/search -> IDashboard[]
     */
    LookerSDK.prototype.search_dashboards = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/dashboards/search', {
                        id: request.id,
                        slug: request.slug,
                        title: request.title,
                        description: request.description,
                        content_favorite_id: request.content_favorite_id,
                        space_id: request.space_id,
                        deleted: request.deleted,
                        user_id: request.user_id,
                        view_count: request.view_count,
                        content_metadata_id: request.content_metadata_id,
                        curate: request.curate,
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /folders/search -> IFolder[]
     */
    LookerSDK.prototype.search_folders = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/folders/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        name: request.name,
                        id: request.id,
                        parent_id: request.parent_id,
                        creator_id: request.creator_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /groups/search -> IGroup[]
     */
    LookerSDK.prototype.search_groups = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/groups/search', {
                        fields: request.fields,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                        id: request.id,
                        name: request.name,
                        external_group_id: request.external_group_id,
                        externally_managed: request.externally_managed,
                        externally_orphaned: request.externally_orphaned,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /homepages/search -> IHomepage[]
     */
    LookerSDK.prototype.search_homepages = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/homepages/search', {
                        title: request.title,
                        created_at: request.created_at,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        fields: request.fields,
                        favorited: request.favorited,
                        creator_id: request.creator_id,
                        sorts: request.sorts,
                        page: request.page,
                        per_page: request.per_page,
                        offset: request.offset,
                        limit: request.limit,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /looks/search -> ILook[]
     */
    LookerSDK.prototype.search_looks = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/looks/search', {
                        title: request.title,
                        description: request.description,
                        content_favorite_id: request.content_favorite_id,
                        space_id: request.space_id,
                        user_id: request.user_id,
                        view_count: request.view_count,
                        deleted: request.deleted,
                        query_id: request.query_id,
                        curate: request.curate,
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/search -> ISpace[]
     */
    LookerSDK.prototype.search_spaces = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/spaces/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        name: request.name,
                        id: request.id,
                        parent_id: request.parent_id,
                        creator_id: request.creator_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /themes/search -> ITheme[]
     */
    LookerSDK.prototype.search_themes = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/search', {
                        id: request.id,
                        name: request.name,
                        begin_at: request.begin_at,
                        end_at: request.end_at,
                        limit: request.limit,
                        offset: request.offset,
                        sorts: request.sorts,
                        fields: request.fields,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /user_login_lockouts/search -> IUserLoginLockout[]
     */
    LookerSDK.prototype.search_user_login_lockouts = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/user_login_lockouts/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        auth_type: request.auth_type,
                        full_name: request.full_name,
                        email: request.email,
                        remote_id: request.remote_id,
                        filter_or: request.filter_or,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/search -> IUser[]
     */
    LookerSDK.prototype.search_users = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/users/search', {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        id: request.id,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        verified_looker_employee: request.verified_looker_employee,
                        email: request.email,
                        is_disabled: request.is_disabled,
                        filter_or: request.filter_or,
                        content_metadata_id: request.content_metadata_id,
                        group_id: request.group_id,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/search/names/{pattern} -> IUser[]
     */
    LookerSDK.prototype.search_users_names = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/search/names/" + request.pattern), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                        id: request.id,
                        first_name: request.first_name,
                        last_name: request.last_name,
                        verified_looker_employee: request.verified_looker_employee,
                        email: request.email,
                        is_disabled: request.is_disabled,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /session -> IApiSession
     */
    LookerSDK.prototype.session = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/session', null, null, options)];
            });
        });
    };
    /**
     * GET /session_config -> ISessionConfig
     */
    LookerSDK.prototype.session_config = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/session_config', null, null, options)];
            });
        });
    };
    /**
     * PUT /color_collections/default -> IColorCollection
     */
    LookerSDK.prototype.set_default_color_collection = function (
    /**
     * @param {string} collection_id ID of color collection to set as default
     */
    collection_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/color_collections/default', { collection_id: collection_id }, null, options)];
            });
        });
    };
    /**
     * PUT /themes/default -> ITheme
     */
    LookerSDK.prototype.set_default_theme = function (
    /**
     * @param {string} name Name of theme to set as default
     */
    name, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/themes/default', { name: name }, null, options)];
            });
        });
    };
    /**
     * PUT /roles/{role_id}/groups -> IGroup[]
     */
    LookerSDK.prototype.set_role_groups = function (
    /**
     * @param {number} role_id Id of Role
     */
    role_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/roles/" + role_id + "/groups"), null, body, options)];
            });
        });
    };
    /**
     * PUT /roles/{role_id}/users -> IUser[]
     */
    LookerSDK.prototype.set_role_users = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/roles/" + role_id + "/users"), null, body, options)];
            });
        });
    };
    /**
     * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    LookerSDK.prototype.set_user_attribute_group_values = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IUserAttributeGroupValue[]>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/user_attributes/" + user_attribute_id + "/group_values"), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue
     */
    LookerSDK.prototype.set_user_attribute_user_value = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IWriteUserAttributeWithValue>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/users/" + user_id + "/attribute_values/" + user_attribute_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /users/{user_id}/roles -> IRole[]
     */
    LookerSDK.prototype.set_user_roles = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<number[]>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/users/" + user_id + "/roles"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id} -> ISpace
     */
    LookerSDK.prototype.space = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/ancestors -> ISpace[]
     */
    LookerSDK.prototype.space_ancestors = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/ancestors"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/children -> ISpace[]
     */
    LookerSDK.prototype.space_children = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + request.space_id + "/children"), {
                        fields: request.fields,
                        page: request.page,
                        per_page: request.per_page,
                        sorts: request.sorts,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/children/search -> ISpace[]
     */
    LookerSDK.prototype.space_children_search = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + request.space_id + "/children/search"), { fields: request.fields, sorts: request.sorts, name: request.name }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/dashboards -> IDashboard[]
     */
    LookerSDK.prototype.space_dashboards = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/dashboards"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/looks -> ILookWithQuery[]
     */
    LookerSDK.prototype.space_looks = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/looks"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /spaces/{space_id}/parent -> ISpace
     */
    LookerSDK.prototype.space_parent = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/spaces/" + space_id + "/parent"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /sql_queries/{slug} -> ISqlQuery
     */
    LookerSDK.prototype.sql_query = function (
    /**
     * @param {string} slug slug of query
     */
    slug, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/sql_queries/" + slug), null, null, options)];
            });
        });
    };
    /**
     * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]
     */
    LookerSDK.prototype.sync_lookml_dashboard = function (
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
     */
    lookml_dashboard_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboards/" + lookml_dashboard_id + "/sync"), { raw_locale: raw_locale }, body, options)];
            });
        });
    };
    /**
     * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]
     */
    LookerSDK.prototype.test_connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/connections/" + connection_name + "/test"), { tests: tests }, null, options)];
            });
        });
    };
    /**
     * PUT /connections/test -> IDBConnectionTestResult[]
     */
    LookerSDK.prototype.test_connection_config = function (
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/connections/test', { tests: tests }, body, options)];
            });
        });
    };
    /**
     * POST /integrations/{integration_id}/test -> IIntegrationTestResult
     */
    LookerSDK.prototype.test_integration = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/integrations/" + integration_id + "/test"), null, null, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_auth -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_auth = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_auth', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_connection -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_connection = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_connection', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_user_auth = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_user_auth', null, body, options)];
            });
        });
    };
    /**
     * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult
     */
    LookerSDK.prototype.test_ldap_config_user_info = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/ldap_config/test_user_info', null, body, options)];
            });
        });
    };
    /**
     * GET /themes/{theme_id} -> ITheme
     */
    LookerSDK.prototype.theme = function (
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/themes/" + theme_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /themes/theme_or_default -> ITheme
     */
    LookerSDK.prototype.theme_or_default = function (
    /**
     * @param {string} name Name of theme
     */
    name, 
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/themes/theme_or_default', { name: name, ts: ts }, null, options)];
            });
        });
    };
    /**
     * PATCH /backup_configuration -> IBackupConfiguration
     */
    LookerSDK.prototype.update_backup_configuration = function (
    /**
     * @param {Partial<IWriteBackupConfiguration>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/backup_configuration', null, body, options)];
            });
        });
    };
    /**
     * PATCH /color_collections/{collection_id} -> IColorCollection
     */
    LookerSDK.prototype.update_color_collection = function (
    /**
     * @param {string} collection_id Id of Custom Color Collection
     */
    collection_id, 
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/color_collections/" + collection_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /connections/{connection_name} -> IDBConnection
     */
    LookerSDK.prototype.update_connection = function (
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/connections/" + connection_name), null, body, options)];
            });
        });
    };
    /**
     * PATCH /content_metadata/{content_metadata_id} -> IContentMeta
     */
    LookerSDK.prototype.update_content_metadata = function (
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id, 
    /**
     * @param {Partial<IWriteContentMeta>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/content_metadata/" + content_metadata_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser
     */
    LookerSDK.prototype.update_content_metadata_access = function (
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id, 
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/content_metadata_access/" + content_metadata_access_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /custom_welcome_email -> ICustomWelcomeEmail
     */
    LookerSDK.prototype.update_custom_welcome_email = function (
    /**
     * @param {Partial<IWriteCustomWelcomeEmail>} body
     */
    body, 
    /**
     * @param {boolean} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
     */
    send_test_welcome_email, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/custom_welcome_email', { send_test_welcome_email: send_test_welcome_email }, body, options)];
            });
        });
    };
    /**
     * PUT /custom_welcome_email_test -> IWelcomeEmailTest
     */
    LookerSDK.prototype.update_custom_welcome_email_test = function (
    /**
     * @param {Partial<IWriteWelcomeEmailTest>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/custom_welcome_email_test', null, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboards/{dashboard_id} -> IDashboard
     */
    LookerSDK.prototype.update_dashboard = function (
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboards/" + dashboard_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    LookerSDK.prototype.update_dashboard_element = function (
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id, 
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_elements/" + dashboard_element_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    LookerSDK.prototype.update_dashboard_filter = function (
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id, 
    /**
     * @param {Partial<IWriteDashboardFilter>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_filters/" + dashboard_filter_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    LookerSDK.prototype.update_dashboard_layout = function (
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id, 
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_layouts/" + dashboard_layout_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    LookerSDK.prototype.update_dashboard_layout_component = function (
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id, 
    /**
     * @param {Partial<IWriteDashboardLayoutComponent>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/dashboard_layout_components/" + dashboard_layout_component_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /datagroups/{datagroup_id} -> IDatagroup
     */
    LookerSDK.prototype.update_datagroup = function (
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id, 
    /**
     * @param {Partial<IWriteDatagroup>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/datagroups/" + datagroup_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /folders/{folder_id} -> IFolder
     */
    LookerSDK.prototype.update_folder = function (
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id, 
    /**
     * @param {Partial<IWriteFolder>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/folders/" + folder_id), null, body, options)];
            });
        });
    };
    /**
     * PUT /projects/{project_id}/git_branch -> IGitBranch
     */
    LookerSDK.prototype.update_git_branch = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/projects/" + project_id + "/git_branch"), null, body, options)];
            });
        });
    };
    /**
     * PATCH /groups/{group_id} -> IGroup
     */
    LookerSDK.prototype.update_group = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/groups/" + group_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepages/{homepage_id} -> IHomepage
     */
    LookerSDK.prototype.update_homepage = function (
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id, 
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/homepages/" + homepage_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    LookerSDK.prototype.update_homepage_item = function (
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id, 
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/homepage_items/" + homepage_item_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    LookerSDK.prototype.update_homepage_section = function (
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id, 
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/homepage_sections/" + homepage_section_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /integrations/{integration_id} -> IIntegration
     */
    LookerSDK.prototype.update_integration = function (
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id, 
    /**
     * @param {Partial<IWriteIntegration>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/integrations/" + integration_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    LookerSDK.prototype.update_integration_hub = function (
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id, 
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/integration_hubs/" + integration_hub_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /internal_help_resources -> IInternalHelpResources
     */
    LookerSDK.prototype.update_internal_help_resources = function (
    /**
     * @param {Partial<IWriteInternalHelpResources>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/internal_help_resources', null, body, options)];
            });
        });
    };
    /**
     * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    LookerSDK.prototype.update_internal_help_resources_content = function (
    /**
     * @param {Partial<IWriteInternalHelpResourcesContent>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/internal_help_resources_content', null, body, options)];
            });
        });
    };
    /**
     * PATCH /ldap_config -> ILDAPConfig
     */
    LookerSDK.prototype.update_ldap_config = function (
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/ldap_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    LookerSDK.prototype.update_legacy_feature = function (
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id, 
    /**
     * @param {Partial<IWriteLegacyFeature>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/legacy_features/" + legacy_feature_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /looks/{look_id} -> ILookWithQuery
     */
    LookerSDK.prototype.update_look = function (
    /**
     * @param {number} look_id Id of look
     */
    look_id, 
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/looks/" + look_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    LookerSDK.prototype.update_lookml_model = function (
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name, 
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/lookml_models/" + lookml_model_name), null, body, options)];
            });
        });
    };
    /**
     * PATCH /model_sets/{model_set_id} -> IModelSet
     */
    LookerSDK.prototype.update_model_set = function (
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id, 
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/model_sets/" + model_set_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /oidc_config -> IOIDCConfig
     */
    LookerSDK.prototype.update_oidc_config = function (
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/oidc_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /password_config -> IPasswordConfig
     */
    LookerSDK.prototype.update_password_config = function (
    /**
     * @param {Partial<IWritePasswordConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/password_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /permission_sets/{permission_set_id} -> IPermissionSet
     */
    LookerSDK.prototype.update_permission_set = function (
    /**
     * @param {number} permission_set_id id of permission set
     */
    permission_set_id, 
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/permission_sets/" + permission_set_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /projects/{project_id} -> IProject
     */
    LookerSDK.prototype.update_project = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {Partial<IWriteProject>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/projects/" + project_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential
     */
    LookerSDK.prototype.update_repository_credential = function (
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id, 
    /**
     * @param {Partial<IWriteRepositoryCredential>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put(encodeURI("/projects/" + root_project_id + "/credential/" + credential_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /roles/{role_id} -> IRole
     */
    LookerSDK.prototype.update_role = function (
    /**
     * @param {number} role_id id of role
     */
    role_id, 
    /**
     * @param {Partial<IWriteRole>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/roles/" + role_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /saml_config -> ISamlConfig
     */
    LookerSDK.prototype.update_saml_config = function (
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/saml_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    LookerSDK.prototype.update_scheduled_plan = function (
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/scheduled_plans/" + scheduled_plan_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /session -> IApiSession
     */
    LookerSDK.prototype.update_session = function (
    /**
     * @param {Partial<IWriteApiSession>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/session', null, body, options)];
            });
        });
    };
    /**
     * PATCH /session_config -> ISessionConfig
     */
    LookerSDK.prototype.update_session_config = function (
    /**
     * @param {Partial<IWriteSessionConfig>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch('/session_config', null, body, options)];
            });
        });
    };
    /**
     * PATCH /spaces/{space_id} -> ISpace
     */
    LookerSDK.prototype.update_space = function (
    /**
     * @param {string} space_id Id of space
     */
    space_id, 
    /**
     * @param {Partial<IWriteSpace>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/spaces/" + space_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /themes/{theme_id} -> ITheme
     */
    LookerSDK.prototype.update_theme = function (
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/themes/" + theme_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id} -> IUser
     */
    LookerSDK.prototype.update_user = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteUser>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/users/" + user_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    LookerSDK.prototype.update_user_attribute = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/user_attributes/" + user_attribute_id), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue
     */
    LookerSDK.prototype.update_user_attribute_group_value = function (
    /**
     * @param {number} group_id Id of group
     */
    group_id, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {Partial<IUserAttributeGroupValue>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/groups/" + group_id + "/attribute_values/" + user_attribute_id), null, body, options)];
            });
        });
    };
    /**
     * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDK.prototype.update_user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.patch(encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, body, options)];
            });
        });
    };
    /**
     * PUT /whitelabel_configuration -> IWhitelabelConfiguration
     */
    LookerSDK.prototype.update_whitelabel_configuration = function (
    /**
     * @param {Partial<IWriteWhitelabelConfiguration>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.put('/whitelabel_configuration', null, body, options)];
            });
        });
    };
    /**
     * GET /users/{user_id} -> IUser
     */
    LookerSDK.prototype.user = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    LookerSDK.prototype.user_attribute = function (
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/user_attributes/" + user_attribute_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]
     */
    LookerSDK.prototype.user_attribute_user_values = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + request.user_id + "/attribute_values"), {
                        fields: request.fields,
                        user_attribute_ids: request.user_attribute_ids,
                        all_values: request.all_values,
                        include_unset: request.include_unset,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3
     */
    LookerSDK.prototype.user_credentials_api3 = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} credentials_api3_id Id of API 3 Credential
     */
    credentials_api3_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_api3/" + credentials_api3_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    LookerSDK.prototype.user_credentials_email = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_email"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed
     */
    LookerSDK.prototype.user_credentials_embed = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} credentials_embed_id Id of Embedding Credential
     */
    credentials_embed_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_embed/" + credentials_embed_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_google -> ICredentialsGoogle
     */
    LookerSDK.prototype.user_credentials_google = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_google"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP
     */
    LookerSDK.prototype.user_credentials_ldap = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_ldap"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid
     */
    LookerSDK.prototype.user_credentials_looker_openid = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_looker_openid"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC
     */
    LookerSDK.prototype.user_credentials_oidc = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_oidc"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_saml -> ICredentialsSaml
     */
    LookerSDK.prototype.user_credentials_saml = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_saml"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    LookerSDK.prototype.user_credentials_totp = function (
    /**
     * @param {number} user_id id of user
     */
    user_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/credentials_totp"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/credential/{credential_type}/{credential_id} -> IUser
     */
    LookerSDK.prototype.user_for_credential = function (
    /**
     * @param {string} credential_type Type name of credential
     */
    credential_type, 
    /**
     * @param {string} credential_id Id of credential
     */
    credential_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/credential/" + credential_type + "/" + credential_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/roles -> IRole[]
     */
    LookerSDK.prototype.user_roles = function (request, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + request.user_id + "/roles"), {
                        fields: request.fields,
                        direct_association_only: request.direct_association_only,
                    }, null, options)];
            });
        });
    };
    /**
     * GET /users/{user_id}/sessions/{session_id} -> ISession
     */
    LookerSDK.prototype.user_session = function (
    /**
     * @param {number} user_id Id of user
     */
    user_id, 
    /**
     * @param {number} session_id Id of Web Login Session
     */
    session_id, 
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/users/" + user_id + "/sessions/" + session_id), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /projects/{project_id}/validate -> IProjectValidation
     */
    LookerSDK.prototype.validate_project = function (
    /**
     * @param {string} project_id Project Id
     */
    project_id, 
    /**
     * @param {string} fields Requested fields
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post(encodeURI("/projects/" + project_id + "/validate"), { fields: fields }, null, options)];
            });
        });
    };
    /**
     * POST /themes/validate -> IValidationError
     */
    LookerSDK.prototype.validate_theme = function (
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.post('/themes/validate', null, body, options)];
            });
        });
    };
    /**
     * GET /versions -> IApiVersion
     */
    LookerSDK.prototype.versions = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/versions', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /whitelabel_configuration -> IWhitelabelConfiguration
     */
    LookerSDK.prototype.whitelabel_configuration = function (
    /**
     * @param {string} fields Requested fields.
     */
    fields, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get('/whitelabel_configuration', { fields: fields }, null, options)];
            });
        });
    };
    /**
     * GET /workspaces/{workspace_id} -> IWorkspace
     */
    LookerSDK.prototype.workspace = function (
    /**
     * @param {string} workspace_id Id of the workspace
     */
    workspace_id, options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.get(encodeURI("/workspaces/" + workspace_id), null, null, options)];
            });
        });
    };
    return LookerSDK;
}(apiMethods_1.APIMethods));
exports.LookerSDK = LookerSDK;
