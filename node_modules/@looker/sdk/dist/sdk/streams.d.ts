import { Readable } from 'readable-stream';
import { APIMethods } from '../rtl/apiMethods';
import { ITransportSettings } from '../rtl/transport';
/**
 * DelimArray is primarily used as a self-documenting format for csv-formatted array parameters
 */
import { DelimArray } from '../rtl/delimArray';
import { IDictionary, IAccessToken, IApiSession, IApiVersion, IBackupConfiguration, IColorCollection, IContentFavorite, IContentMeta, IContentMetaGroupUser, IContentValidation, IContentView, ICredentialsApi3, ICredentialsEmail, ICredentialsEmbed, ICredentialsGoogle, ICredentialsLDAP, ICredentialsLookerOpenid, ICredentialsOIDC, ICredentialsSaml, ICredentialsTotp, ICustomWelcomeEmail, IDashboard, IDashboardBase, IDashboardElement, IDashboardFilter, IDashboardLayout, IDashboardLayoutComponent, IDataActionForm, IDataActionResponse, IDatagroup, IDBConnection, IDBConnectionTestResult, IDialectInfo, IEmbedSsoUrl, IFolder, IGitBranch, IGitConnectionTest, IGitConnectionTestResult, IGroup, IGroupIdForGroupInclusion, IGroupIdForGroupUserInclusion, IHomepage, IHomepageItem, IHomepageSection, IIntegration, IIntegrationHub, IIntegrationTestResult, IInternalHelpResources, IInternalHelpResourcesContent, ILDAPConfig, ILDAPConfigTestResult, ILegacyFeature, ILocale, ILook, ILookmlModel, ILookmlModelExplore, ILookmlTest, ILookmlTestResult, ILookWithQuery, IManifest, IMergeQuery, IModelSet, IOIDCConfig, IPasswordConfig, IPermission, IPermissionSet, IProject, IProjectFile, IProjectValidation, IProjectValidationCache, IProjectWorkspace, IQuery, IQueryTask, IRenderTask, IRepositoryCredential, IRequestActiveThemes, IRequestAllGroups, IRequestAllGroupUsers, IRequestAllHomepageItems, IRequestAllHomepageSections, IRequestAllIntegrations, IRequestAllRoles, IRequestAllScheduledPlans, IRequestAllUsers, IRequestCreateDashboardRenderTask, IRequestCreateLookmlDashboardRenderTask, IRequestCreateQueryTask, IRequestCreateUserCredentialsEmailPasswordReset, IRequestFolderChildren, IRequestFolderChildrenSearch, IRequestLogin, IRequestRoleUsers, IRequestRunInlineQuery, IRequestRunLook, IRequestRunLookmlTest, IRequestRunQuery, IRequestScheduledPlansForDashboard, IRequestScheduledPlansForLook, IRequestScheduledPlansForLookmlDashboard, IRequestSearchContentFavorites, IRequestSearchContentViews, IRequestSearchDashboardElements, IRequestSearchDashboards, IRequestSearchFolders, IRequestSearchGroups, IRequestSearchHomepages, IRequestSearchLooks, IRequestSearchThemes, IRequestSearchUserLoginLockouts, IRequestSearchUsers, IRequestSearchUsersNames, IRequestSpaceChildren, IRequestSpaceChildrenSearch, IRequestUserAttributeUserValues, IRequestUserRoles, IRole, IRunningQueries, ISamlConfig, ISamlMetadataParseResult, IScheduledPlan, ISession, ISessionConfig, ISpace, ISpaceBase, ISqlQuery, ITheme, ITimezone, IUser, IUserAttribute, IUserAttributeGroupValue, IUserAttributeWithValue, IUserLoginLockout, IValidationError, IWelcomeEmailTest, IWhitelabelConfiguration, IWorkspace, IWriteApiSession, IWriteBackupConfiguration, IWriteColorCollection, IWriteContentFavorite, IWriteContentMeta, IWriteCreateDashboardFilter, IWriteCredentialsEmail, IWriteCustomWelcomeEmail, IWriteDashboard, IWriteDashboardElement, IWriteDashboardFilter, IWriteDashboardLayout, IWriteDashboardLayoutComponent, IWriteDataActionRequest, IWriteDatagroup, IWriteDBConnection, IWriteEmbedSsoUrlParams, IWriteFolder, IWriteGitBranch, IWriteGroup, IWriteHomepage, IWriteHomepageItem, IWriteHomepageSection, IWriteIntegration, IWriteIntegrationHub, IWriteInternalHelpResources, IWriteInternalHelpResourcesContent, IWriteLDAPConfig, IWriteLegacyFeature, IWriteLookmlModel, IWriteLookWithQuery, IWriteMergeQuery, IWriteModelSet, IWriteOIDCConfig, IWritePasswordConfig, IWritePermissionSet, IWriteProject, IWriteQuery, IWriteRepositoryCredential, IWriteRole, IWriteSamlConfig, IWriteScheduledPlan, IWriteSessionConfig, IWriteSpace, IWriteSqlQueryCreate, IWriteTheme, IWriteUser, IWriteUserAttribute, IWriteUserAttributeWithValue, IWriteWelcomeEmailTest, IWriteWhitelabelConfiguration, IWriteWriteScheduledPlan } from './models';
export declare class LookerSDKStream extends APIMethods {
    /**
     * POST /integration_hubs/{integration_hub_id}/accept_legal_agreement -> IIntegrationHub
     */
    accept_integration_hub_legal_agreement(callback: (readable: Readable) => Promise<IIntegrationHub>, 
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id: number, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    /**
     * GET /themes/active -> ITheme[]
     */
    active_themes(callback: (readable: Readable) => Promise<ITheme[]>, request: Partial<IRequestActiveThemes>, options?: Partial<ITransportSettings>): Promise<ITheme[]>;
    /**
     * POST /groups/{group_id}/groups -> IGroup
     */
    add_group_group(callback: (readable: Readable) => Promise<IGroup>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {Partial<IGroupIdForGroupInclusion>} body
     */
    body?: Partial<IGroupIdForGroupInclusion>, options?: Partial<ITransportSettings>): Promise<IGroup>;
    /**
     * POST /groups/{group_id}/users -> IUser
     */
    add_group_user(callback: (readable: Readable) => Promise<IUser>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {Partial<IGroupIdForGroupUserInclusion>} body
     */
    body?: Partial<IGroupIdForGroupUserInclusion>, options?: Partial<ITransportSettings>): Promise<IUser>;
    /**
     * GET /color_collections -> IColorCollection[]
     */
    all_color_collections(callback: (readable: Readable) => Promise<IColorCollection[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection[]>;
    /**
     * GET /connections -> IDBConnection[]
     */
    all_connections(callback: (readable: Readable) => Promise<IDBConnection[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDBConnection[]>;
    /**
     * GET /content_metadata_access -> IContentMetaGroupUser[]
     */
    all_content_metadata_accesses(callback: (readable: Readable) => Promise<IContentMetaGroupUser[]>, 
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IContentMetaGroupUser[]>;
    /**
     * GET /content_metadata -> IContentMeta[]
     */
    all_content_metadatas(callback: (readable: Readable) => Promise<IContentMeta[]>, 
    /**
     * @param {number} parent_id Parent space of content.
     */
    parent_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IContentMeta[]>;
    /**
     * GET /dashboards -> IDashboardBase[]
     */
    all_dashboards(callback: (readable: Readable) => Promise<IDashboardBase[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardBase[]>;
    /**
     * GET /datagroups -> IDatagroup[]
     */
    all_datagroups(callback: (readable: Readable) => Promise<IDatagroup[]>, options?: Partial<ITransportSettings>): Promise<IDatagroup[]>;
    /**
     * GET /dialect_info -> IDialectInfo[]
     */
    all_dialect_infos(callback: (readable: Readable) => Promise<IDialectInfo[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDialectInfo[]>;
    /**
     * GET /folders -> IFolder[]
     */
    all_folders(callback: (readable: Readable) => Promise<IFolder[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    /**
     * GET /projects/{project_id}/git_branches -> IGitBranch[]
     */
    all_git_branches(callback: (readable: Readable) => Promise<IGitBranch[]>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<IGitBranch[]>;
    /**
     * GET /projects/{project_id}/git_connection_tests -> IGitConnectionTest[]
     */
    all_git_connection_tests(callback: (readable: Readable) => Promise<IGitConnectionTest[]>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url?: string, options?: Partial<ITransportSettings>): Promise<IGitConnectionTest[]>;
    /**
     * GET /groups/{group_id}/groups -> IGroup[]
     */
    all_group_groups(callback: (readable: Readable) => Promise<IGroup[]>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    /**
     * GET /groups/{group_id}/users -> IUser[]
     */
    all_group_users(callback: (readable: Readable) => Promise<IUser[]>, request: Partial<IRequestAllGroupUsers>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    /**
     * GET /groups -> IGroup[]
     */
    all_groups(callback: (readable: Readable) => Promise<IGroup[]>, request: Partial<IRequestAllGroups>, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    /**
     * GET /homepage_items -> IHomepageItem[]
     */
    all_homepage_items(callback: (readable: Readable) => Promise<IHomepageItem[]>, request: Partial<IRequestAllHomepageItems>, options?: Partial<ITransportSettings>): Promise<IHomepageItem[]>;
    /**
     * GET /homepage_sections -> IHomepageSection[]
     */
    all_homepage_sections(callback: (readable: Readable) => Promise<IHomepageSection[]>, request: Partial<IRequestAllHomepageSections>, options?: Partial<ITransportSettings>): Promise<IHomepageSection[]>;
    /**
     * GET /homepages -> IHomepage[]
     */
    all_homepages(callback: (readable: Readable) => Promise<IHomepage[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepage[]>;
    /**
     * GET /integration_hubs -> IIntegrationHub[]
     */
    all_integration_hubs(callback: (readable: Readable) => Promise<IIntegrationHub[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub[]>;
    /**
     * GET /integrations -> IIntegration[]
     */
    all_integrations(callback: (readable: Readable) => Promise<IIntegration[]>, request: Partial<IRequestAllIntegrations>, options?: Partial<ITransportSettings>): Promise<IIntegration[]>;
    /**
     * GET /legacy_features -> ILegacyFeature[]
     */
    all_legacy_features(callback: (readable: Readable) => Promise<ILegacyFeature[]>, options?: Partial<ITransportSettings>): Promise<ILegacyFeature[]>;
    /**
     * GET /locales -> ILocale[]
     */
    all_locales(callback: (readable: Readable) => Promise<ILocale[]>, options?: Partial<ITransportSettings>): Promise<ILocale[]>;
    /**
     * GET /lookml_models -> ILookmlModel[]
     */
    all_lookml_models(callback: (readable: Readable) => Promise<ILookmlModel[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookmlModel[]>;
    /**
     * GET /projects/{project_id}/lookml_tests -> ILookmlTest[]
     */
    all_lookml_tests(callback: (readable: Readable) => Promise<ILookmlTest[]>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} file_id File Id
     */
    file_id?: string, options?: Partial<ITransportSettings>): Promise<ILookmlTest[]>;
    /**
     * GET /looks -> ILook[]
     */
    all_looks(callback: (readable: Readable) => Promise<ILook[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILook[]>;
    /**
     * GET /model_sets -> IModelSet[]
     */
    all_model_sets(callback: (readable: Readable) => Promise<IModelSet[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IModelSet[]>;
    /**
     * GET /permission_sets -> IPermissionSet[]
     */
    all_permission_sets(callback: (readable: Readable) => Promise<IPermissionSet[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IPermissionSet[]>;
    /**
     * GET /permissions -> IPermission[]
     */
    all_permissions(callback: (readable: Readable) => Promise<IPermission[]>, options?: Partial<ITransportSettings>): Promise<IPermission[]>;
    /**
     * GET /projects/{project_id}/files -> IProjectFile[]
     */
    all_project_files(callback: (readable: Readable) => Promise<IProjectFile[]>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectFile[]>;
    /**
     * GET /projects -> IProject[]
     */
    all_projects(callback: (readable: Readable) => Promise<IProject[]>, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProject[]>;
    /**
     * GET /roles -> IRole[]
     */
    all_roles(callback: (readable: Readable) => Promise<IRole[]>, request: Partial<IRequestAllRoles>, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    /**
     * GET /running_queries -> IRunningQueries[]
     */
    all_running_queries(callback: (readable: Readable) => Promise<IRunningQueries[]>, options?: Partial<ITransportSettings>): Promise<IRunningQueries[]>;
    /**
     * GET /scheduled_plans -> IScheduledPlan[]
     */
    all_scheduled_plans(callback: (readable: Readable) => Promise<IScheduledPlan[]>, request: Partial<IRequestAllScheduledPlans>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    /**
     * GET /spaces -> ISpaceBase[]
     */
    all_spaces(callback: (readable: Readable) => Promise<ISpaceBase[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ISpaceBase[]>;
    /**
     * GET /themes -> ITheme[]
     */
    all_themes(callback: (readable: Readable) => Promise<ITheme[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ITheme[]>;
    /**
     * GET /timezones -> ITimezone[]
     */
    all_timezones(callback: (readable: Readable) => Promise<ITimezone[]>, options?: Partial<ITransportSettings>): Promise<ITimezone[]>;
    /**
     * GET /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    all_user_attribute_group_values(callback: (readable: Readable) => Promise<IUserAttributeGroupValue[]>, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttributeGroupValue[]>;
    /**
     * GET /user_attributes -> IUserAttribute[]
     */
    all_user_attributes(callback: (readable: Readable) => Promise<IUserAttribute[]>, request: Partial<IRequestAllHomepageSections>, options?: Partial<ITransportSettings>): Promise<IUserAttribute[]>;
    /**
     * GET /users/{user_id}/credentials_api3 -> ICredentialsApi3[]
     */
    all_user_credentials_api3s(callback: (readable: Readable) => Promise<ICredentialsApi3[]>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsApi3[]>;
    /**
     * GET /users/{user_id}/credentials_embed -> ICredentialsEmbed[]
     */
    all_user_credentials_embeds(callback: (readable: Readable) => Promise<ICredentialsEmbed[]>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmbed[]>;
    /**
     * GET /user_login_lockouts -> IUserLoginLockout[]
     */
    all_user_login_lockouts(callback: (readable: Readable) => Promise<IUserLoginLockout[]>, 
    /**
     * @param {string} fields Include only these fields in the response
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUserLoginLockout[]>;
    /**
     * GET /users/{user_id}/sessions -> ISession[]
     */
    all_user_sessions(callback: (readable: Readable) => Promise<ISession[]>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ISession[]>;
    /**
     * GET /users -> IUser[]
     */
    all_users(callback: (readable: Readable) => Promise<IUser[]>, request: Partial<IRequestAllUsers>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    /**
     * GET /workspaces -> IWorkspace[]
     */
    all_workspaces(callback: (readable: Readable) => Promise<IWorkspace[]>, options?: Partial<ITransportSettings>): Promise<IWorkspace[]>;
    /**
     * GET /backup_configuration -> IBackupConfiguration
     */
    backup_configuration(callback: (readable: Readable) => Promise<IBackupConfiguration>, options?: Partial<ITransportSettings>): Promise<IBackupConfiguration>;
    /**
     * GET /color_collections/{collection_id} -> IColorCollection
     */
    color_collection(callback: (readable: Readable) => Promise<IColorCollection>, 
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    /**
     * GET /color_collections/custom -> IColorCollection[]
     */
    color_collections_custom(callback: (readable: Readable) => Promise<IColorCollection[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection[]>;
    /**
     * GET /color_collections/standard -> IColorCollection[]
     */
    color_collections_standard(callback: (readable: Readable) => Promise<IColorCollection[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IColorCollection[]>;
    /**
     * GET /connections/{connection_name} -> IDBConnection
     */
    connection(callback: (readable: Readable) => Promise<IDBConnection>, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDBConnection>;
    /**
     * GET /content_favorite/{content_favorite_id} -> IContentFavorite
     */
    content_favorite(callback: (readable: Readable) => Promise<IContentFavorite>, 
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IContentFavorite>;
    /**
     * GET /content_metadata/{content_metadata_id} -> IContentMeta
     */
    content_metadata(callback: (readable: Readable) => Promise<IContentMeta>, 
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IContentMeta>;
    /**
     * GET /content_validation -> IContentValidation
     */
    content_validation(callback: (readable: Readable) => Promise<IContentValidation>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IContentValidation>;
    /**
     * POST /color_collections -> IColorCollection
     */
    create_color_collection(callback: (readable: Readable) => Promise<IColorCollection>, 
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body?: Partial<IWriteColorCollection>, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    /**
     * POST /connections -> IDBConnection
     */
    create_connection(callback: (readable: Readable) => Promise<IDBConnection>, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body?: Partial<IWriteDBConnection>, options?: Partial<ITransportSettings>): Promise<IDBConnection>;
    /**
     * POST /content_favorite -> IContentFavorite
     */
    create_content_favorite(callback: (readable: Readable) => Promise<IContentFavorite>, 
    /**
     * @param {Partial<IWriteContentFavorite>} body
     */
    body?: Partial<IWriteContentFavorite>, options?: Partial<ITransportSettings>): Promise<IContentFavorite>;
    /**
     * POST /content_metadata_access -> IContentMetaGroupUser
     */
    create_content_metadata_access(callback: (readable: Readable) => Promise<IContentMetaGroupUser>, 
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body?: Partial<IContentMetaGroupUser>, 
    /**
     * @param {boolean} send_boards_notification_email Optionally sends notification email when granting access to a board.
     */
    send_boards_notification_email?: boolean, options?: Partial<ITransportSettings>): Promise<IContentMetaGroupUser>;
    /**
     * POST /dashboards -> IDashboard
     */
    create_dashboard(callback: (readable: Readable) => Promise<IDashboard>, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body?: Partial<IWriteDashboard>, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    /**
     * POST /dashboard_elements -> IDashboardElement
     */
    create_dashboard_element(callback: (readable: Readable) => Promise<IDashboardElement>, 
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body?: Partial<IWriteDashboardElement>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement>;
    /**
     * POST /dashboard_filters -> IDashboardFilter
     */
    create_dashboard_filter(callback: (readable: Readable) => Promise<IDashboardFilter>, 
    /**
     * @param {Partial<IWriteCreateDashboardFilter>} body
     */
    body: Partial<IWriteCreateDashboardFilter>, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter>;
    /**
     * POST /dashboard_layouts -> IDashboardLayout
     */
    create_dashboard_layout(callback: (readable: Readable) => Promise<IDashboardLayout>, 
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body?: Partial<IWriteDashboardLayout>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout>;
    /**
     * POST /render_tasks/dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    create_dashboard_render_task(callback: (readable: Readable) => Promise<IRenderTask>, request: Partial<IRequestCreateDashboardRenderTask>, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    /**
     * POST /folders -> IFolder
     */
    create_folder(callback: (readable: Readable) => Promise<IFolder>, 
    /**
     * @param {Partial<IWriteFolder>} body
     */
    body?: Partial<IWriteFolder>, options?: Partial<ITransportSettings>): Promise<IFolder>;
    /**
     * POST /projects/{project_id}/git_branch -> IGitBranch
     */
    create_git_branch(callback: (readable: Readable) => Promise<IGitBranch>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body?: Partial<IWriteGitBranch>, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    /**
     * POST /projects/{project_id}/git/deploy_key -> string
     */
    create_git_deploy_key(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * POST /groups -> IGroup
     */
    create_group(callback: (readable: Readable) => Promise<IGroup>, 
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body?: Partial<IWriteGroup>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup>;
    /**
     * POST /homepages -> IHomepage
     */
    create_homepage(callback: (readable: Readable) => Promise<IHomepage>, 
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body?: Partial<IWriteHomepage>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepage>;
    /**
     * POST /homepage_items -> IHomepageItem
     */
    create_homepage_item(callback: (readable: Readable) => Promise<IHomepageItem>, 
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body?: Partial<IWriteHomepageItem>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageItem>;
    /**
     * POST /homepage_sections -> IHomepageSection
     */
    create_homepage_section(callback: (readable: Readable) => Promise<IHomepageSection>, 
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body?: Partial<IWriteHomepageSection>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageSection>;
    /**
     * POST /integration_hubs -> IIntegrationHub
     */
    create_integration_hub(callback: (readable: Readable) => Promise<IIntegrationHub>, 
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body?: Partial<IWriteIntegrationHub>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    /**
     * POST /looks -> ILookWithQuery
     */
    create_look(callback: (readable: Readable) => Promise<ILookWithQuery>, 
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body?: Partial<IWriteLookWithQuery>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    /**
     * POST /render_tasks/looks/{look_id}/{result_format} -> IRenderTask
     */
    create_look_render_task(callback: (readable: Readable) => Promise<IRenderTask>, 
    /**
     * @param {number} look_id Id of look to render
     */
    look_id: number, 
    /**
     * @param {string} result_format Output type: png, or jpg
     */
    result_format: string, 
    /**
     * @param {number} width Output width in pixels
     */
    width: number, 
    /**
     * @param {number} height Output height in pixels
     */
    height: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    /**
     * POST /render_tasks/lookml_dashboards/{dashboard_id}/{result_format} -> IRenderTask
     */
    create_lookml_dashboard_render_task(callback: (readable: Readable) => Promise<IRenderTask>, request: Partial<IRequestCreateLookmlDashboardRenderTask>, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    /**
     * POST /lookml_models -> ILookmlModel
     */
    create_lookml_model(callback: (readable: Readable) => Promise<ILookmlModel>, 
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body?: Partial<IWriteLookmlModel>, options?: Partial<ITransportSettings>): Promise<ILookmlModel>;
    /**
     * POST /merge_queries -> IMergeQuery
     */
    create_merge_query(callback: (readable: Readable) => Promise<IMergeQuery>, 
    /**
     * @param {Partial<IWriteMergeQuery>} body
     */
    body?: Partial<IWriteMergeQuery>, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IMergeQuery>;
    /**
     * POST /model_sets -> IModelSet
     */
    create_model_set(callback: (readable: Readable) => Promise<IModelSet>, 
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body?: Partial<IWriteModelSet>, options?: Partial<ITransportSettings>): Promise<IModelSet>;
    /**
     * POST /oidc_test_configs -> IOIDCConfig
     */
    create_oidc_test_config(callback: (readable: Readable) => Promise<IOIDCConfig>, 
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body: Partial<IWriteOIDCConfig>, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    /**
     * POST /permission_sets -> IPermissionSet
     */
    create_permission_set(callback: (readable: Readable) => Promise<IPermissionSet>, 
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body?: Partial<IWritePermissionSet>, options?: Partial<ITransportSettings>): Promise<IPermissionSet>;
    /**
     * POST /projects -> IProject
     */
    create_project(callback: (readable: Readable) => Promise<IProject>, 
    /**
     * @param {Partial<IWriteProject>} body
     */
    body?: Partial<IWriteProject>, options?: Partial<ITransportSettings>): Promise<IProject>;
    /**
     * POST /queries -> IQuery
     */
    create_query(callback: (readable: Readable) => Promise<IQuery>, 
    /**
     * @param {Partial<IWriteQuery>} body
     */
    body?: Partial<IWriteQuery>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IQuery>;
    /**
     * POST /render_tasks/queries/{query_id}/{result_format} -> IRenderTask
     */
    create_query_render_task(callback: (readable: Readable) => Promise<IRenderTask>, 
    /**
     * @param {number} query_id Id of the query to render
     */
    query_id: number, 
    /**
     * @param {string} result_format Output type: png or jpg
     */
    result_format: string, 
    /**
     * @param {number} width Output width in pixels
     */
    width: number, 
    /**
     * @param {number} height Output height in pixels
     */
    height: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    /**
     * POST /query_tasks -> IQueryTask
     */
    create_query_task(callback: (readable: Readable) => Promise<IQueryTask>, request: Partial<IRequestCreateQueryTask>, options?: Partial<ITransportSettings>): Promise<IQueryTask>;
    /**
     * POST /roles -> IRole
     */
    create_role(callback: (readable: Readable) => Promise<IRole>, 
    /**
     * @param {Partial<IWriteRole>} body
     */
    body?: Partial<IWriteRole>, options?: Partial<ITransportSettings>): Promise<IRole>;
    /**
     * POST /saml_test_configs -> ISamlConfig
     */
    create_saml_test_config(callback: (readable: Readable) => Promise<ISamlConfig>, 
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body: Partial<IWriteSamlConfig>, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    /**
     * POST /scheduled_plans -> IScheduledPlan
     */
    create_scheduled_plan(callback: (readable: Readable) => Promise<IScheduledPlan>, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body?: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    /**
     * POST /spaces -> ISpace
     */
    create_space(callback: (readable: Readable) => Promise<ISpace>, 
    /**
     * @param {Partial<IWriteSpace>} body
     */
    body: Partial<IWriteSpace>, options?: Partial<ITransportSettings>): Promise<ISpace>;
    /**
     * POST /sql_queries -> ISqlQuery
     */
    create_sql_query(callback: (readable: Readable) => Promise<ISqlQuery>, 
    /**
     * @param {Partial<IWriteSqlQueryCreate>} body
     */
    body: Partial<IWriteSqlQueryCreate>, options?: Partial<ITransportSettings>): Promise<ISqlQuery>;
    /**
     * POST /embed/sso_url -> IEmbedSsoUrl
     */
    create_sso_embed_url(callback: (readable: Readable) => Promise<IEmbedSsoUrl>, 
    /**
     * @param {Partial<IWriteEmbedSsoUrlParams>} body
     */
    body: Partial<IWriteEmbedSsoUrlParams>, options?: Partial<ITransportSettings>): Promise<IEmbedSsoUrl>;
    /**
     * POST /themes -> ITheme
     */
    create_theme(callback: (readable: Readable) => Promise<ITheme>, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body?: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<ITheme>;
    /**
     * POST /users -> IUser
     */
    create_user(callback: (readable: Readable) => Promise<IUser>, 
    /**
     * @param {Partial<IWriteUser>} body
     */
    body?: Partial<IWriteUser>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    /**
     * POST /user_attributes -> IUserAttribute
     */
    create_user_attribute(callback: (readable: Readable) => Promise<IUserAttribute>, 
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body?: Partial<IWriteUserAttribute>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttribute>;
    /**
     * POST /users/{user_id}/credentials_api3 -> ICredentialsApi3
     */
    create_user_credentials_api3(callback: (readable: Readable) => Promise<ICredentialsApi3>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {Partial<ICredentialsApi3>} body
     */
    body?: Partial<ICredentialsApi3>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsApi3>;
    /**
     * POST /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    create_user_credentials_email(callback: (readable: Readable) => Promise<ICredentialsEmail>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body?: Partial<IWriteCredentialsEmail>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    /**
     * POST /users/{user_id}/credentials_email/password_reset -> ICredentialsEmail
     */
    create_user_credentials_email_password_reset(callback: (readable: Readable) => Promise<ICredentialsEmail>, request: Partial<IRequestCreateUserCredentialsEmailPasswordReset>, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    /**
     * POST /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    create_user_credentials_totp(callback: (readable: Readable) => Promise<ICredentialsTotp>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {Partial<ICredentialsTotp>} body
     */
    body?: Partial<ICredentialsTotp>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsTotp>;
    /**
     * GET /custom_welcome_email -> ICustomWelcomeEmail
     */
    custom_welcome_email(callback: (readable: Readable) => Promise<ICustomWelcomeEmail>, options?: Partial<ITransportSettings>): Promise<ICustomWelcomeEmail>;
    /**
     * GET /dashboards/{dashboard_id} -> IDashboard
     */
    dashboard(callback: (readable: Readable) => Promise<IDashboard>, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    /**
     * GET /dashboards/{dashboard_id}/dashboard_elements -> IDashboardElement[]
     */
    dashboard_dashboard_elements(callback: (readable: Readable) => Promise<IDashboardElement[]>, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement[]>;
    /**
     * GET /dashboards/{dashboard_id}/dashboard_filters -> IDashboardFilter[]
     */
    dashboard_dashboard_filters(callback: (readable: Readable) => Promise<IDashboardFilter[]>, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter[]>;
    /**
     * GET /dashboards/{dashboard_id}/dashboard_layouts -> IDashboardLayout[]
     */
    dashboard_dashboard_layouts(callback: (readable: Readable) => Promise<IDashboardLayout[]>, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout[]>;
    /**
     * GET /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    dashboard_element(callback: (readable: Readable) => Promise<IDashboardElement>, 
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement>;
    /**
     * GET /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    dashboard_filter(callback: (readable: Readable) => Promise<IDashboardFilter>, 
    /**
     * @param {string} dashboard_filter_id Id of dashboard filters
     */
    dashboard_filter_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter>;
    /**
     * GET /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    dashboard_layout(callback: (readable: Readable) => Promise<IDashboardLayout>, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layouts
     */
    dashboard_layout_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout>;
    /**
     * GET /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    dashboard_layout_component(callback: (readable: Readable) => Promise<IDashboardLayoutComponent>, 
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayoutComponent>;
    /**
     * GET /dashboard_layouts/{dashboard_layout_id}/dashboard_layout_components -> IDashboardLayoutComponent[]
     */
    dashboard_layout_dashboard_layout_components(callback: (readable: Readable) => Promise<IDashboardLayoutComponent[]>, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout component
     */
    dashboard_layout_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayoutComponent[]>;
    /**
     * GET /datagroups/{datagroup_id} -> IDatagroup
     */
    datagroup(callback: (readable: Readable) => Promise<IDatagroup>, 
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id: string, options?: Partial<ITransportSettings>): Promise<IDatagroup>;
    /**
     * GET /color_collections/default -> IColorCollection
     */
    default_color_collection(callback: (readable: Readable) => Promise<IColorCollection>, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    /**
     * GET /themes/default -> ITheme
     */
    default_theme(callback: (readable: Readable) => Promise<ITheme>, 
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts?: Date, options?: Partial<ITransportSettings>): Promise<ITheme>;
    /**
     * DELETE /color_collections/{collection_id} -> string
     */
    delete_color_collection(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} collection_id Id of Color Collection
     */
    collection_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /connections/{connection_name} -> string
     */
    delete_connection(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /connections/{connection_name}/connection_override/{override_context} -> string
     */
    delete_connection_override(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string, 
    /**
     * @param {string} override_context Context of connection override
     */
    override_context: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /content_favorite/{content_favorite_id} -> string
     */
    delete_content_favorite(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} content_favorite_id Id of favorite content
     */
    content_favorite_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /content_metadata_access/{content_metadata_access_id} -> string
     */
    delete_content_metadata_access(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /dashboards/{dashboard_id} -> string
     */
    delete_dashboard(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /dashboard_elements/{dashboard_element_id} -> string
     */
    delete_dashboard_element(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /dashboard_filters/{dashboard_filter_id} -> string
     */
    delete_dashboard_filter(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /dashboard_layouts/{dashboard_layout_id} -> string
     */
    delete_dashboard_layout(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /folders/{folder_id} -> string
     */
    delete_folder(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /projects/{project_id}/git_branch/{branch_name} -> string
     */
    delete_git_branch(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /groups/{group_id} -> string
     */
    delete_group(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /groups/{group_id}/groups/{deleting_group_id} -> void
     */
    delete_group_from_group(callback: (readable: Readable) => Promise<void>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {number} deleting_group_id Id of group to delete
     */
    deleting_group_id: number, options?: Partial<ITransportSettings>): Promise<void>;
    /**
     * DELETE /groups/{group_id}/users/{user_id} -> void
     */
    delete_group_user(callback: (readable: Readable) => Promise<void>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {number} user_id Id of user to remove from group
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<void>;
    /**
     * DELETE /homepages/{homepage_id} -> string
     */
    delete_homepage(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /homepage_items/{homepage_item_id} -> string
     */
    delete_homepage_item(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} homepage_item_id Id of homepage_item
     */
    homepage_item_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /homepage_sections/{homepage_section_id} -> string
     */
    delete_homepage_section(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} homepage_section_id Id of homepage_section
     */
    homepage_section_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /integration_hubs/{integration_hub_id} -> string
     */
    delete_integration_hub(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} integration_hub_id Id of integration_hub
     */
    integration_hub_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /looks/{look_id} -> string
     */
    delete_look(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} look_id Id of look
     */
    look_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /lookml_models/{lookml_model_name} -> string
     */
    delete_lookml_model(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /model_sets/{model_set_id} -> string
     */
    delete_model_set(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /oidc_test_configs/{test_slug} -> string
     */
    delete_oidc_test_config(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /permission_sets/{permission_set_id} -> string
     */
    delete_permission_set(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /projects/{root_project_id}/credential/{credential_id} -> string
     */
    delete_repository_credential(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id: string, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /roles/{role_id} -> string
     */
    delete_role(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} role_id id of role
     */
    role_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /saml_test_configs/{test_slug} -> string
     */
    delete_saml_test_config(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /scheduled_plans/{scheduled_plan_id} -> string
     */
    delete_scheduled_plan(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /spaces/{space_id} -> string
     */
    delete_space(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /themes/{theme_id} -> string
     */
    delete_theme(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id} -> string
     */
    delete_user(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /user_attributes/{user_attribute_id} -> string
     */
    delete_user_attribute(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_attribute_id Id of user_attribute
     */
    user_attribute_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /groups/{group_id}/attribute_values/{user_attribute_id} -> void
     */
    delete_user_attribute_group_value(callback: (readable: Readable) => Promise<void>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, options?: Partial<ITransportSettings>): Promise<void>;
    /**
     * DELETE /users/{user_id}/attribute_values/{user_attribute_id} -> void
     */
    delete_user_attribute_user_value(callback: (readable: Readable) => Promise<void>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, options?: Partial<ITransportSettings>): Promise<void>;
    /**
     * DELETE /users/{user_id}/credentials_api3/{credentials_api3_id} -> string
     */
    delete_user_credentials_api3(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {number} credentials_api3_id id of API 3 Credential
     */
    credentials_api3_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_email -> string
     */
    delete_user_credentials_email(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_embed/{credentials_embed_id} -> string
     */
    delete_user_credentials_embed(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {number} credentials_embed_id id of Embedding Credential
     */
    credentials_embed_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_google -> string
     */
    delete_user_credentials_google(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_ldap -> string
     */
    delete_user_credentials_ldap(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_looker_openid -> string
     */
    delete_user_credentials_looker_openid(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_oidc -> string
     */
    delete_user_credentials_oidc(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_saml -> string
     */
    delete_user_credentials_saml(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/credentials_totp -> string
     */
    delete_user_credentials_totp(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /user_login_lockout/{key} -> string
     */
    delete_user_login_lockout(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} key The key associated with the locked user
     */
    key: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * DELETE /users/{user_id}/sessions/{session_id} -> string
     */
    delete_user_session(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {number} session_id id of Web Login Session
     */
    session_id: number, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * POST /projects/{project_id}/deploy_to_production -> string
     */
    deploy_to_production(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} project_id Id of project
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * POST /fetch_and_parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    fetch_and_parse_saml_idp_metadata(callback: (readable: Readable) => Promise<ISamlMetadataParseResult>, 
    /**
     * @param {Partial<string>} body
     */
    body: Partial<string>, options?: Partial<ITransportSettings>): Promise<ISamlMetadataParseResult>;
    /**
     * POST /integrations/{integration_id}/form -> IDataActionForm
     */
    fetch_integration_form(callback: (readable: Readable) => Promise<IDataActionForm>, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number, options?: Partial<ITransportSettings>): Promise<IDataActionForm>;
    /**
     * POST /data_actions/form -> IDataActionForm
     */
    fetch_remote_data_action_form(callback: (readable: Readable) => Promise<IDataActionForm>, 
    /**
     * @param {Partial<IDictionary<string>>} body
     */
    body: Partial<IDictionary<string>>, options?: Partial<ITransportSettings>): Promise<IDataActionForm>;
    /**
     * GET /projects/{project_id}/git_branch/{branch_name} -> IGitBranch
     */
    find_git_branch(callback: (readable: Readable) => Promise<IGitBranch>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} branch_name Branch Name
     */
    branch_name: string, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    /**
     * GET /folders/{folder_id} -> IFolder
     */
    folder(callback: (readable: Readable) => Promise<IFolder>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder>;
    /**
     * GET /folders/{folder_id}/ancestors -> IFolder[]
     */
    folder_ancestors(callback: (readable: Readable) => Promise<IFolder[]>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    /**
     * GET /folders/{folder_id}/children -> ISpace[]
     */
    folder_children(callback: (readable: Readable) => Promise<ISpace[]>, request: Partial<IRequestFolderChildren>, options?: Partial<ITransportSettings>): Promise<ISpace[]>;
    /**
     * GET /folders/{folder_id}/children/search -> IFolder[]
     */
    folder_children_search(callback: (readable: Readable) => Promise<IFolder[]>, request: Partial<IRequestFolderChildrenSearch>, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    /**
     * GET /folders/{folder_id}/dashboards -> IDashboard[]
     */
    folder_dashboards(callback: (readable: Readable) => Promise<IDashboard[]>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboard[]>;
    /**
     * GET /folders/{folder_id}/looks -> ILookWithQuery[]
     */
    folder_looks(callback: (readable: Readable) => Promise<ILookWithQuery[]>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery[]>;
    /**
     * GET /folders/{folder_id}/parent -> IFolder
     */
    folder_parent(callback: (readable: Readable) => Promise<IFolder>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IFolder>;
    /**
     * PUT /password_config/force_password_reset_at_next_login_for_all_users -> string
     */
    force_password_reset_at_next_login_for_all_users(callback: (readable: Readable) => Promise<string>, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /projects/{root_project_id}/credentials -> IRepositoryCredential[]
     */
    get_all_repository_credentials(callback: (readable: Readable) => Promise<IRepositoryCredential[]>, 
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id: string, options?: Partial<ITransportSettings>): Promise<IRepositoryCredential[]>;
    /**
     * GET /projects/{project_id}/git_branch -> IGitBranch
     */
    git_branch(callback: (readable: Readable) => Promise<IGitBranch>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    /**
     * GET /projects/{project_id}/git/deploy_key -> string
     */
    git_deploy_key(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /groups/{group_id} -> IGroup
     */
    group(callback: (readable: Readable) => Promise<IGroup>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup>;
    /**
     * GET /homepages/{homepage_id} -> IHomepage
     */
    homepage(callback: (readable: Readable) => Promise<IHomepage>, 
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepage>;
    /**
     * GET /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    homepage_item(callback: (readable: Readable) => Promise<IHomepageItem>, 
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageItem>;
    /**
     * GET /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    homepage_section(callback: (readable: Readable) => Promise<IHomepageSection>, 
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageSection>;
    /**
     * POST /dashboards/{lookml_dashboard_id}/import/{space_id} -> IDashboard
     */
    import_lookml_dashboard(callback: (readable: Readable) => Promise<IDashboard>, 
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard
     */
    lookml_dashboard_id: string, 
    /**
     * @param {string} space_id Id of space to import the dashboard to
     */
    space_id: string, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body?: Partial<IWriteDashboard>, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale?: boolean, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    /**
     * GET /integrations/{integration_id} -> IIntegration
     */
    integration(callback: (readable: Readable) => Promise<IIntegration>, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegration>;
    /**
     * GET /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    integration_hub(callback: (readable: Readable) => Promise<IIntegrationHub>, 
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    /**
     * GET /internal_help_resources_enabled -> IInternalHelpResources
     */
    internal_help_resources(callback: (readable: Readable) => Promise<IInternalHelpResources>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResources>;
    /**
     * GET /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    internal_help_resources_content(callback: (readable: Readable) => Promise<IInternalHelpResourcesContent>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResourcesContent>;
    /**
     * DELETE /running_queries/{query_task_id} -> string
     */
    kill_query(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} query_task_id Query task id.
     */
    query_task_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /ldap_config -> ILDAPConfig
     */
    ldap_config(callback: (readable: Readable) => Promise<ILDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfig>;
    /**
     * GET /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    legacy_feature(callback: (readable: Readable) => Promise<ILegacyFeature>, 
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id: number, options?: Partial<ITransportSettings>): Promise<ILegacyFeature>;
    /**
     * POST /login -> IAccessToken
     */
    login(callback: (readable: Readable) => Promise<IAccessToken>, request: Partial<IRequestLogin>, options?: Partial<ITransportSettings>): Promise<IAccessToken>;
    /**
     * POST /login/{user_id} -> IAccessToken
     */
    login_user(callback: (readable: Readable) => Promise<IAccessToken>, 
    /**
     * @param {number} user_id Id of user.
     */
    user_id: number, options?: Partial<ITransportSettings>): Promise<IAccessToken>;
    /**
     * DELETE /logout -> string
     */
    logout(callback: (readable: Readable) => Promise<string>, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /looks/{look_id} -> ILookWithQuery
     */
    look(callback: (readable: Readable) => Promise<ILookWithQuery>, 
    /**
     * @param {number} look_id Id of look
     */
    look_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    /**
     * GET /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    lookml_model(callback: (readable: Readable) => Promise<ILookmlModel>, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookmlModel>;
    /**
     * GET /lookml_models/{lookml_model_name}/explores/{explore_name} -> ILookmlModelExplore
     */
    lookml_model_explore(callback: (readable: Readable) => Promise<ILookmlModelExplore>, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string, 
    /**
     * @param {string} explore_name Name of explore.
     */
    explore_name: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookmlModelExplore>;
    /**
     * GET /projects/{project_id}/manifest -> IManifest
     */
    manifest(callback: (readable: Readable) => Promise<IManifest>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<IManifest>;
    /**
     * GET /user -> IUser
     */
    me(callback: (readable: Readable) => Promise<IUser>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    /**
     * GET /merge_queries/{merge_query_id} -> IMergeQuery
     */
    merge_query(callback: (readable: Readable) => Promise<IMergeQuery>, 
    /**
     * @param {string} merge_query_id Merge Query Id
     */
    merge_query_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IMergeQuery>;
    /**
     * GET /model_sets/{model_set_id} -> IModelSet
     */
    model_set(callback: (readable: Readable) => Promise<IModelSet>, 
    /**
     * @param {number} model_set_id Id of model set
     */
    model_set_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IModelSet>;
    /**
     * GET /oidc_config -> IOIDCConfig
     */
    oidc_config(callback: (readable: Readable) => Promise<IOIDCConfig>, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    /**
     * GET /oidc_test_configs/{test_slug} -> IOIDCConfig
     */
    oidc_test_config(callback: (readable: Readable) => Promise<IOIDCConfig>, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    /**
     * POST /parse_saml_idp_metadata -> ISamlMetadataParseResult
     */
    parse_saml_idp_metadata(callback: (readable: Readable) => Promise<ISamlMetadataParseResult>, 
    /**
     * @param {Partial<string>} body
     */
    body: Partial<string>, options?: Partial<ITransportSettings>): Promise<ISamlMetadataParseResult>;
    /**
     * GET /password_config -> IPasswordConfig
     */
    password_config(callback: (readable: Readable) => Promise<IPasswordConfig>, options?: Partial<ITransportSettings>): Promise<IPasswordConfig>;
    /**
     * POST /data_actions -> IDataActionResponse
     */
    perform_data_action(callback: (readable: Readable) => Promise<IDataActionResponse>, 
    /**
     * @param {Partial<IWriteDataActionRequest>} body
     */
    body: Partial<IWriteDataActionRequest>, options?: Partial<ITransportSettings>): Promise<IDataActionResponse>;
    /**
     * GET /permission_sets/{permission_set_id} -> IPermissionSet
     */
    permission_set(callback: (readable: Readable) => Promise<IPermissionSet>, 
    /**
     * @param {number} permission_set_id Id of permission set
     */
    permission_set_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IPermissionSet>;
    /**
     * GET /projects/{project_id} -> IProject
     */
    project(callback: (readable: Readable) => Promise<IProject>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProject>;
    /**
     * GET /projects/{project_id}/files/file -> IProjectFile
     */
    project_file(callback: (readable: Readable) => Promise<IProjectFile>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} file_id File Id
     */
    file_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectFile>;
    /**
     * GET /projects/{project_id}/validate -> IProjectValidationCache
     */
    project_validation_results(callback: (readable: Readable) => Promise<IProjectValidationCache>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectValidationCache>;
    /**
     * GET /projects/{project_id}/current_workspace -> IProjectWorkspace
     */
    project_workspace(callback: (readable: Readable) => Promise<IProjectWorkspace>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectWorkspace>;
    /**
     * GET /queries/{query_id} -> IQuery
     */
    query(callback: (readable: Readable) => Promise<IQuery>, 
    /**
     * @param {number} query_id Id of query
     */
    query_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IQuery>;
    /**
     * GET /queries/slug/{slug} -> IQuery
     */
    query_for_slug(callback: (readable: Readable) => Promise<IQuery>, 
    /**
     * @param {string} slug Slug of query
     */
    slug: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IQuery>;
    /**
     * GET /query_tasks/{query_task_id} -> IQueryTask
     */
    query_task(callback: (readable: Readable) => Promise<IQueryTask>, 
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IQueryTask>;
    /**
     * GET /query_tasks/multi_results -> IDictionary<string>
     */
    query_task_multi_results(callback: (readable: Readable) => Promise<IDictionary<string>>, 
    /**
     * @param {DelimArray<string>} query_task_ids List of Query Task IDs
     */
    query_task_ids: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<IDictionary<string>>;
    /**
     * GET /query_tasks/{query_task_id}/results -> IDictionary<string>
     */
    query_task_results(callback: (readable: Readable) => Promise<IDictionary<string>>, 
    /**
     * @param {string} query_task_id ID of the Query Task
     */
    query_task_id: string, options?: Partial<ITransportSettings>): Promise<IDictionary<string>>;
    /**
     * GET /render_tasks/{render_task_id} -> IRenderTask
     */
    render_task(callback: (readable: Readable) => Promise<IRenderTask>, 
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IRenderTask>;
    /**
     * GET /render_tasks/{render_task_id}/results -> string
     *
     * **Note**: Binary content is returned by this method.
     */
    render_task_results(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} render_task_id Id of render task
     */
    render_task_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * POST /projects/{project_id}/reset_to_production -> string
     */
    reset_project_to_production(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} project_id Id of project
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * POST /projects/{project_id}/reset_to_remote -> string
     */
    reset_project_to_remote(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} project_id Id of project
     */
    project_id: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /roles/{role_id} -> IRole
     */
    role(callback: (readable: Readable) => Promise<IRole>, 
    /**
     * @param {number} role_id id of role
     */
    role_id: number, options?: Partial<ITransportSettings>): Promise<IRole>;
    /**
     * GET /roles/{role_id}/groups -> IGroup[]
     */
    role_groups(callback: (readable: Readable) => Promise<IGroup[]>, 
    /**
     * @param {number} role_id id of role
     */
    role_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    /**
     * GET /roles/{role_id}/users -> IUser[]
     */
    role_users(callback: (readable: Readable) => Promise<IUser[]>, request: Partial<IRequestRoleUsers>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    /**
     * GET /projects/{project_id}/git_connection_tests/{test_id} -> IGitConnectionTestResult
     */
    run_git_connection_test(callback: (readable: Readable) => Promise<IGitConnectionTestResult>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} test_id Test Id
     */
    test_id: string, 
    /**
     * @param {string} remote_url (Optional: leave blank for root project) The remote url for remote dependency to test.
     */
    remote_url?: string, options?: Partial<ITransportSettings>): Promise<IGitConnectionTestResult>;
    /**
     * POST /queries/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    run_inline_query(callback: (readable: Readable) => Promise<string>, request: Partial<IRequestRunInlineQuery>, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /looks/{look_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    run_look(callback: (readable: Readable) => Promise<string>, request: Partial<IRequestRunLook>, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /projects/{project_id}/lookml_tests/run -> ILookmlTestResult[]
     */
    run_lookml_test(callback: (readable: Readable) => Promise<ILookmlTestResult[]>, request: Partial<IRequestRunLookmlTest>, options?: Partial<ITransportSettings>): Promise<ILookmlTestResult[]>;
    /**
     * GET /queries/{query_id}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    run_query(callback: (readable: Readable) => Promise<string>, request: Partial<IRequestRunQuery>, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * POST /sql_queries/{slug}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    run_sql_query(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} slug slug of query
     */
    slug: string, 
    /**
     * @param {string} result_format Format of result, options are: ["json", "json_label", "json_detail", "json_fe", "csv", "html", "md", "txt", "xlsx", "gsxml"]
     */
    result_format: string, 
    /**
     * @param {string} download Defaults to false. If set to true, the HTTP response will have content-disposition and other headers set to make the HTTP response behave as a downloadable attachment instead of as inline content.
     */
    download?: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /queries/models/{model_name}/views/{view_name}/run/{result_format} -> string
     *
     * **Note**: Binary content may be returned by this method.
     */
    run_url_encoded_query(callback: (readable: Readable) => Promise<string>, 
    /**
     * @param {string} model_name Model name
     */
    model_name: string, 
    /**
     * @param {string} view_name View name
     */
    view_name: string, 
    /**
     * @param {string} result_format Format of result
     */
    result_format: string, options?: Partial<ITransportSettings>): Promise<string>;
    /**
     * GET /saml_config -> ISamlConfig
     */
    saml_config(callback: (readable: Readable) => Promise<ISamlConfig>, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    /**
     * GET /saml_test_configs/{test_slug} -> ISamlConfig
     */
    saml_test_config(callback: (readable: Readable) => Promise<ISamlConfig>, 
    /**
     * @param {string} test_slug Slug of test config
     */
    test_slug: string, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    /**
     * GET /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    scheduled_plan(callback: (readable: Readable) => Promise<IScheduledPlan>, 
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    /**
     * POST /scheduled_plans/run_once -> IScheduledPlan
     */
    scheduled_plan_run_once(callback: (readable: Readable) => Promise<IScheduledPlan>, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body?: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    /**
     * POST /scheduled_plans/{scheduled_plan_id}/run_once -> IScheduledPlan
     */
    scheduled_plan_run_once_by_id(callback: (readable: Readable) => Promise<IScheduledPlan>, 
    /**
     * @param {number} scheduled_plan_id Id of schedule plan to copy and run
     */
    scheduled_plan_id: number, 
    /**
     * @param {Partial<IWriteWriteScheduledPlan>} body
     */
    body?: Partial<IWriteWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    /**
     * GET /scheduled_plans/dashboard/{dashboard_id} -> IScheduledPlan[]
     */
    scheduled_plans_for_dashboard(callback: (readable: Readable) => Promise<IScheduledPlan[]>, request: Partial<IRequestScheduledPlansForDashboard>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    /**
     * GET /scheduled_plans/look/{look_id} -> IScheduledPlan[]
     */
    scheduled_plans_for_look(callback: (readable: Readable) => Promise<IScheduledPlan[]>, request: Partial<IRequestScheduledPlansForLook>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    /**
     * GET /scheduled_plans/lookml_dashboard/{lookml_dashboard_id} -> IScheduledPlan[]
     */
    scheduled_plans_for_lookml_dashboard(callback: (readable: Readable) => Promise<IScheduledPlan[]>, request: Partial<IRequestScheduledPlansForLookmlDashboard>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    /**
     * GET /scheduled_plans/space/{space_id} -> IScheduledPlan[]
     */
    scheduled_plans_for_space(callback: (readable: Readable) => Promise<IScheduledPlan[]>, 
    /**
     * @param {number} space_id Space Id
     */
    space_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IScheduledPlan[]>;
    /**
     * GET /content_favorite/search -> IContentFavorite[]
     */
    search_content_favorites(callback: (readable: Readable) => Promise<IContentFavorite[]>, request: Partial<IRequestSearchContentFavorites>, options?: Partial<ITransportSettings>): Promise<IContentFavorite[]>;
    /**
     * GET /content_view/search -> IContentView[]
     */
    search_content_views(callback: (readable: Readable) => Promise<IContentView[]>, request: Partial<IRequestSearchContentViews>, options?: Partial<ITransportSettings>): Promise<IContentView[]>;
    /**
     * GET /dashboard_elements/search -> IDashboardElement[]
     */
    search_dashboard_elements(callback: (readable: Readable) => Promise<IDashboardElement[]>, request: Partial<IRequestSearchDashboardElements>, options?: Partial<ITransportSettings>): Promise<IDashboardElement[]>;
    /**
     * GET /dashboards/search -> IDashboard[]
     */
    search_dashboards(callback: (readable: Readable) => Promise<IDashboard[]>, request: Partial<IRequestSearchDashboards>, options?: Partial<ITransportSettings>): Promise<IDashboard[]>;
    /**
     * GET /folders/search -> IFolder[]
     */
    search_folders(callback: (readable: Readable) => Promise<IFolder[]>, request: Partial<IRequestSearchFolders>, options?: Partial<ITransportSettings>): Promise<IFolder[]>;
    /**
     * GET /groups/search -> IGroup[]
     */
    search_groups(callback: (readable: Readable) => Promise<IGroup[]>, request: Partial<IRequestSearchGroups>, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    /**
     * GET /homepages/search -> IHomepage[]
     */
    search_homepages(callback: (readable: Readable) => Promise<IHomepage[]>, request: Partial<IRequestSearchHomepages>, options?: Partial<ITransportSettings>): Promise<IHomepage[]>;
    /**
     * GET /looks/search -> ILook[]
     */
    search_looks(callback: (readable: Readable) => Promise<ILook[]>, request: Partial<IRequestSearchLooks>, options?: Partial<ITransportSettings>): Promise<ILook[]>;
    /**
     * GET /spaces/search -> ISpace[]
     */
    search_spaces(callback: (readable: Readable) => Promise<ISpace[]>, request: Partial<IRequestSearchFolders>, options?: Partial<ITransportSettings>): Promise<ISpace[]>;
    /**
     * GET /themes/search -> ITheme[]
     */
    search_themes(callback: (readable: Readable) => Promise<ITheme[]>, request: Partial<IRequestSearchThemes>, options?: Partial<ITransportSettings>): Promise<ITheme[]>;
    /**
     * GET /user_login_lockouts/search -> IUserLoginLockout[]
     */
    search_user_login_lockouts(callback: (readable: Readable) => Promise<IUserLoginLockout[]>, request: Partial<IRequestSearchUserLoginLockouts>, options?: Partial<ITransportSettings>): Promise<IUserLoginLockout[]>;
    /**
     * GET /users/search -> IUser[]
     */
    search_users(callback: (readable: Readable) => Promise<IUser[]>, request: Partial<IRequestSearchUsers>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    /**
     * GET /users/search/names/{pattern} -> IUser[]
     */
    search_users_names(callback: (readable: Readable) => Promise<IUser[]>, request: Partial<IRequestSearchUsersNames>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    /**
     * GET /session -> IApiSession
     */
    session(callback: (readable: Readable) => Promise<IApiSession>, options?: Partial<ITransportSettings>): Promise<IApiSession>;
    /**
     * GET /session_config -> ISessionConfig
     */
    session_config(callback: (readable: Readable) => Promise<ISessionConfig>, options?: Partial<ITransportSettings>): Promise<ISessionConfig>;
    /**
     * PUT /color_collections/default -> IColorCollection
     */
    set_default_color_collection(callback: (readable: Readable) => Promise<IColorCollection>, 
    /**
     * @param {string} collection_id ID of color collection to set as default
     */
    collection_id: string, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    /**
     * PUT /themes/default -> ITheme
     */
    set_default_theme(callback: (readable: Readable) => Promise<ITheme>, 
    /**
     * @param {string} name Name of theme to set as default
     */
    name: string, options?: Partial<ITransportSettings>): Promise<ITheme>;
    /**
     * PUT /roles/{role_id}/groups -> IGroup[]
     */
    set_role_groups(callback: (readable: Readable) => Promise<IGroup[]>, 
    /**
     * @param {number} role_id Id of Role
     */
    role_id: number, 
    /**
     * @param {Partial<number[]>} body
     */
    body: Partial<number[]>, options?: Partial<ITransportSettings>): Promise<IGroup[]>;
    /**
     * PUT /roles/{role_id}/users -> IUser[]
     */
    set_role_users(callback: (readable: Readable) => Promise<IUser[]>, 
    /**
     * @param {number} role_id id of role
     */
    role_id: number, 
    /**
     * @param {Partial<number[]>} body
     */
    body: Partial<number[]>, options?: Partial<ITransportSettings>): Promise<IUser[]>;
    /**
     * POST /user_attributes/{user_attribute_id}/group_values -> IUserAttributeGroupValue[]
     */
    set_user_attribute_group_values(callback: (readable: Readable) => Promise<IUserAttributeGroupValue[]>, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, 
    /**
     * @param {Partial<IUserAttributeGroupValue[]>} body
     */
    body: Partial<IUserAttributeGroupValue[]>, options?: Partial<ITransportSettings>): Promise<IUserAttributeGroupValue[]>;
    /**
     * PATCH /users/{user_id}/attribute_values/{user_attribute_id} -> IUserAttributeWithValue
     */
    set_user_attribute_user_value(callback: (readable: Readable) => Promise<IUserAttributeWithValue>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, 
    /**
     * @param {Partial<IWriteUserAttributeWithValue>} body
     */
    body: Partial<IWriteUserAttributeWithValue>, options?: Partial<ITransportSettings>): Promise<IUserAttributeWithValue>;
    /**
     * PUT /users/{user_id}/roles -> IRole[]
     */
    set_user_roles(callback: (readable: Readable) => Promise<IRole[]>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {Partial<number[]>} body
     */
    body: Partial<number[]>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    /**
     * GET /spaces/{space_id} -> ISpace
     */
    space(callback: (readable: Readable) => Promise<ISpace>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ISpace>;
    /**
     * GET /spaces/{space_id}/ancestors -> ISpace[]
     */
    space_ancestors(callback: (readable: Readable) => Promise<ISpace[]>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ISpace[]>;
    /**
     * GET /spaces/{space_id}/children -> ISpace[]
     */
    space_children(callback: (readable: Readable) => Promise<ISpace[]>, request: Partial<IRequestSpaceChildren>, options?: Partial<ITransportSettings>): Promise<ISpace[]>;
    /**
     * GET /spaces/{space_id}/children/search -> ISpace[]
     */
    space_children_search(callback: (readable: Readable) => Promise<ISpace[]>, request: Partial<IRequestSpaceChildrenSearch>, options?: Partial<ITransportSettings>): Promise<ISpace[]>;
    /**
     * GET /spaces/{space_id}/dashboards -> IDashboard[]
     */
    space_dashboards(callback: (readable: Readable) => Promise<IDashboard[]>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboard[]>;
    /**
     * GET /spaces/{space_id}/looks -> ILookWithQuery[]
     */
    space_looks(callback: (readable: Readable) => Promise<ILookWithQuery[]>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery[]>;
    /**
     * GET /spaces/{space_id}/parent -> ISpace
     */
    space_parent(callback: (readable: Readable) => Promise<ISpace>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ISpace>;
    /**
     * GET /sql_queries/{slug} -> ISqlQuery
     */
    sql_query(callback: (readable: Readable) => Promise<ISqlQuery>, 
    /**
     * @param {string} slug slug of query
     */
    slug: string, options?: Partial<ITransportSettings>): Promise<ISqlQuery>;
    /**
     * PATCH /dashboards/{lookml_dashboard_id}/sync -> number[]
     */
    sync_lookml_dashboard(callback: (readable: Readable) => Promise<number[]>, 
    /**
     * @param {string} lookml_dashboard_id Id of LookML dashboard, in the form 'model::dashboardname'
     */
    lookml_dashboard_id: string, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body: Partial<IWriteDashboard>, 
    /**
     * @param {boolean} raw_locale If true, and this dashboard is localized, export it with the raw keys, not localized.
     */
    raw_locale?: boolean, options?: Partial<ITransportSettings>): Promise<number[]>;
    /**
     * PUT /connections/{connection_name}/test -> IDBConnectionTestResult[]
     */
    test_connection(callback: (readable: Readable) => Promise<IDBConnectionTestResult[]>, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests?: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<IDBConnectionTestResult[]>;
    /**
     * PUT /connections/test -> IDBConnectionTestResult[]
     */
    test_connection_config(callback: (readable: Readable) => Promise<IDBConnectionTestResult[]>, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body?: Partial<IWriteDBConnection>, 
    /**
     * @param {DelimArray<string>} tests Array of names of tests to run
     */
    tests?: DelimArray<string>, options?: Partial<ITransportSettings>): Promise<IDBConnectionTestResult[]>;
    /**
     * POST /integrations/{integration_id}/test -> IIntegrationTestResult
     */
    test_integration(callback: (readable: Readable) => Promise<IIntegrationTestResult>, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number, options?: Partial<ITransportSettings>): Promise<IIntegrationTestResult>;
    /**
     * PUT /ldap_config/test_auth -> ILDAPConfigTestResult
     */
    test_ldap_config_auth(callback: (readable: Readable) => Promise<ILDAPConfigTestResult>, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    /**
     * PUT /ldap_config/test_connection -> ILDAPConfigTestResult
     */
    test_ldap_config_connection(callback: (readable: Readable) => Promise<ILDAPConfigTestResult>, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    /**
     * PUT /ldap_config/test_user_auth -> ILDAPConfigTestResult
     */
    test_ldap_config_user_auth(callback: (readable: Readable) => Promise<ILDAPConfigTestResult>, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    /**
     * PUT /ldap_config/test_user_info -> ILDAPConfigTestResult
     */
    test_ldap_config_user_info(callback: (readable: Readable) => Promise<ILDAPConfigTestResult>, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfigTestResult>;
    /**
     * GET /themes/{theme_id} -> ITheme
     */
    theme(callback: (readable: Readable) => Promise<ITheme>, 
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ITheme>;
    /**
     * GET /themes/theme_or_default -> ITheme
     */
    theme_or_default(callback: (readable: Readable) => Promise<ITheme>, 
    /**
     * @param {string} name Name of theme
     */
    name: string, 
    /**
     * @param {Date} ts Timestamp representing the target datetime for the active period. Defaults to 'now'
     */
    ts?: Date, options?: Partial<ITransportSettings>): Promise<ITheme>;
    /**
     * PATCH /backup_configuration -> IBackupConfiguration
     */
    update_backup_configuration(callback: (readable: Readable) => Promise<IBackupConfiguration>, 
    /**
     * @param {Partial<IWriteBackupConfiguration>} body
     */
    body: Partial<IWriteBackupConfiguration>, options?: Partial<ITransportSettings>): Promise<IBackupConfiguration>;
    /**
     * PATCH /color_collections/{collection_id} -> IColorCollection
     */
    update_color_collection(callback: (readable: Readable) => Promise<IColorCollection>, 
    /**
     * @param {string} collection_id Id of Custom Color Collection
     */
    collection_id: string, 
    /**
     * @param {Partial<IWriteColorCollection>} body
     */
    body: Partial<IWriteColorCollection>, options?: Partial<ITransportSettings>): Promise<IColorCollection>;
    /**
     * PATCH /connections/{connection_name} -> IDBConnection
     */
    update_connection(callback: (readable: Readable) => Promise<IDBConnection>, 
    /**
     * @param {string} connection_name Name of connection
     */
    connection_name: string, 
    /**
     * @param {Partial<IWriteDBConnection>} body
     */
    body: Partial<IWriteDBConnection>, options?: Partial<ITransportSettings>): Promise<IDBConnection>;
    /**
     * PATCH /content_metadata/{content_metadata_id} -> IContentMeta
     */
    update_content_metadata(callback: (readable: Readable) => Promise<IContentMeta>, 
    /**
     * @param {number} content_metadata_id Id of content metadata
     */
    content_metadata_id: number, 
    /**
     * @param {Partial<IWriteContentMeta>} body
     */
    body: Partial<IWriteContentMeta>, options?: Partial<ITransportSettings>): Promise<IContentMeta>;
    /**
     * PUT /content_metadata_access/{content_metadata_access_id} -> IContentMetaGroupUser
     */
    update_content_metadata_access(callback: (readable: Readable) => Promise<IContentMetaGroupUser>, 
    /**
     * @param {number} content_metadata_access_id Id of content metadata access
     */
    content_metadata_access_id: number, 
    /**
     * @param {Partial<IContentMetaGroupUser>} body
     */
    body: Partial<IContentMetaGroupUser>, options?: Partial<ITransportSettings>): Promise<IContentMetaGroupUser>;
    /**
     * PATCH /custom_welcome_email -> ICustomWelcomeEmail
     */
    update_custom_welcome_email(callback: (readable: Readable) => Promise<ICustomWelcomeEmail>, 
    /**
     * @param {Partial<IWriteCustomWelcomeEmail>} body
     */
    body: Partial<IWriteCustomWelcomeEmail>, 
    /**
     * @param {boolean} send_test_welcome_email If true a test email with the content from the request will be sent to the current user after saving
     */
    send_test_welcome_email?: boolean, options?: Partial<ITransportSettings>): Promise<ICustomWelcomeEmail>;
    /**
     * PUT /custom_welcome_email_test -> IWelcomeEmailTest
     */
    update_custom_welcome_email_test(callback: (readable: Readable) => Promise<IWelcomeEmailTest>, 
    /**
     * @param {Partial<IWriteWelcomeEmailTest>} body
     */
    body: Partial<IWriteWelcomeEmailTest>, options?: Partial<ITransportSettings>): Promise<IWelcomeEmailTest>;
    /**
     * PATCH /dashboards/{dashboard_id} -> IDashboard
     */
    update_dashboard(callback: (readable: Readable) => Promise<IDashboard>, 
    /**
     * @param {string} dashboard_id Id of dashboard
     */
    dashboard_id: string, 
    /**
     * @param {Partial<IWriteDashboard>} body
     */
    body: Partial<IWriteDashboard>, options?: Partial<ITransportSettings>): Promise<IDashboard>;
    /**
     * PATCH /dashboard_elements/{dashboard_element_id} -> IDashboardElement
     */
    update_dashboard_element(callback: (readable: Readable) => Promise<IDashboardElement>, 
    /**
     * @param {string} dashboard_element_id Id of dashboard element
     */
    dashboard_element_id: string, 
    /**
     * @param {Partial<IWriteDashboardElement>} body
     */
    body: Partial<IWriteDashboardElement>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardElement>;
    /**
     * PATCH /dashboard_filters/{dashboard_filter_id} -> IDashboardFilter
     */
    update_dashboard_filter(callback: (readable: Readable) => Promise<IDashboardFilter>, 
    /**
     * @param {string} dashboard_filter_id Id of dashboard filter
     */
    dashboard_filter_id: string, 
    /**
     * @param {Partial<IWriteDashboardFilter>} body
     */
    body: Partial<IWriteDashboardFilter>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardFilter>;
    /**
     * PATCH /dashboard_layouts/{dashboard_layout_id} -> IDashboardLayout
     */
    update_dashboard_layout(callback: (readable: Readable) => Promise<IDashboardLayout>, 
    /**
     * @param {string} dashboard_layout_id Id of dashboard layout
     */
    dashboard_layout_id: string, 
    /**
     * @param {Partial<IWriteDashboardLayout>} body
     */
    body: Partial<IWriteDashboardLayout>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayout>;
    /**
     * PATCH /dashboard_layout_components/{dashboard_layout_component_id} -> IDashboardLayoutComponent
     */
    update_dashboard_layout_component(callback: (readable: Readable) => Promise<IDashboardLayoutComponent>, 
    /**
     * @param {string} dashboard_layout_component_id Id of dashboard layout component
     */
    dashboard_layout_component_id: string, 
    /**
     * @param {Partial<IWriteDashboardLayoutComponent>} body
     */
    body: Partial<IWriteDashboardLayoutComponent>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IDashboardLayoutComponent>;
    /**
     * PATCH /datagroups/{datagroup_id} -> IDatagroup
     */
    update_datagroup(callback: (readable: Readable) => Promise<IDatagroup>, 
    /**
     * @param {string} datagroup_id ID of datagroup.
     */
    datagroup_id: string, 
    /**
     * @param {Partial<IWriteDatagroup>} body
     */
    body: Partial<IWriteDatagroup>, options?: Partial<ITransportSettings>): Promise<IDatagroup>;
    /**
     * PATCH /folders/{folder_id} -> IFolder
     */
    update_folder(callback: (readable: Readable) => Promise<IFolder>, 
    /**
     * @param {string} folder_id Id of folder
     */
    folder_id: string, 
    /**
     * @param {Partial<IWriteFolder>} body
     */
    body: Partial<IWriteFolder>, options?: Partial<ITransportSettings>): Promise<IFolder>;
    /**
     * PUT /projects/{project_id}/git_branch -> IGitBranch
     */
    update_git_branch(callback: (readable: Readable) => Promise<IGitBranch>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {Partial<IWriteGitBranch>} body
     */
    body: Partial<IWriteGitBranch>, options?: Partial<ITransportSettings>): Promise<IGitBranch>;
    /**
     * PATCH /groups/{group_id} -> IGroup
     */
    update_group(callback: (readable: Readable) => Promise<IGroup>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {Partial<IWriteGroup>} body
     */
    body: Partial<IWriteGroup>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IGroup>;
    /**
     * PATCH /homepages/{homepage_id} -> IHomepage
     */
    update_homepage(callback: (readable: Readable) => Promise<IHomepage>, 
    /**
     * @param {number} homepage_id Id of homepage
     */
    homepage_id: number, 
    /**
     * @param {Partial<IWriteHomepage>} body
     */
    body: Partial<IWriteHomepage>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepage>;
    /**
     * PATCH /homepage_items/{homepage_item_id} -> IHomepageItem
     */
    update_homepage_item(callback: (readable: Readable) => Promise<IHomepageItem>, 
    /**
     * @param {number} homepage_item_id Id of homepage item
     */
    homepage_item_id: number, 
    /**
     * @param {Partial<IWriteHomepageItem>} body
     */
    body: Partial<IWriteHomepageItem>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageItem>;
    /**
     * PATCH /homepage_sections/{homepage_section_id} -> IHomepageSection
     */
    update_homepage_section(callback: (readable: Readable) => Promise<IHomepageSection>, 
    /**
     * @param {number} homepage_section_id Id of homepage section
     */
    homepage_section_id: number, 
    /**
     * @param {Partial<IWriteHomepageSection>} body
     */
    body: Partial<IWriteHomepageSection>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IHomepageSection>;
    /**
     * PATCH /integrations/{integration_id} -> IIntegration
     */
    update_integration(callback: (readable: Readable) => Promise<IIntegration>, 
    /**
     * @param {number} integration_id Id of Integration
     */
    integration_id: number, 
    /**
     * @param {Partial<IWriteIntegration>} body
     */
    body: Partial<IWriteIntegration>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegration>;
    /**
     * PATCH /integration_hubs/{integration_hub_id} -> IIntegrationHub
     */
    update_integration_hub(callback: (readable: Readable) => Promise<IIntegrationHub>, 
    /**
     * @param {number} integration_hub_id Id of Integration Hub
     */
    integration_hub_id: number, 
    /**
     * @param {Partial<IWriteIntegrationHub>} body
     */
    body: Partial<IWriteIntegrationHub>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IIntegrationHub>;
    /**
     * PATCH /internal_help_resources -> IInternalHelpResources
     */
    update_internal_help_resources(callback: (readable: Readable) => Promise<IInternalHelpResources>, 
    /**
     * @param {Partial<IWriteInternalHelpResources>} body
     */
    body: Partial<IWriteInternalHelpResources>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResources>;
    /**
     * PATCH /internal_help_resources_content -> IInternalHelpResourcesContent
     */
    update_internal_help_resources_content(callback: (readable: Readable) => Promise<IInternalHelpResourcesContent>, 
    /**
     * @param {Partial<IWriteInternalHelpResourcesContent>} body
     */
    body: Partial<IWriteInternalHelpResourcesContent>, options?: Partial<ITransportSettings>): Promise<IInternalHelpResourcesContent>;
    /**
     * PATCH /ldap_config -> ILDAPConfig
     */
    update_ldap_config(callback: (readable: Readable) => Promise<ILDAPConfig>, 
    /**
     * @param {Partial<IWriteLDAPConfig>} body
     */
    body: Partial<IWriteLDAPConfig>, options?: Partial<ITransportSettings>): Promise<ILDAPConfig>;
    /**
     * PATCH /legacy_features/{legacy_feature_id} -> ILegacyFeature
     */
    update_legacy_feature(callback: (readable: Readable) => Promise<ILegacyFeature>, 
    /**
     * @param {number} legacy_feature_id id of legacy feature
     */
    legacy_feature_id: number, 
    /**
     * @param {Partial<IWriteLegacyFeature>} body
     */
    body: Partial<IWriteLegacyFeature>, options?: Partial<ITransportSettings>): Promise<ILegacyFeature>;
    /**
     * PATCH /looks/{look_id} -> ILookWithQuery
     */
    update_look(callback: (readable: Readable) => Promise<ILookWithQuery>, 
    /**
     * @param {number} look_id Id of look
     */
    look_id: number, 
    /**
     * @param {Partial<IWriteLookWithQuery>} body
     */
    body: Partial<IWriteLookWithQuery>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ILookWithQuery>;
    /**
     * PATCH /lookml_models/{lookml_model_name} -> ILookmlModel
     */
    update_lookml_model(callback: (readable: Readable) => Promise<ILookmlModel>, 
    /**
     * @param {string} lookml_model_name Name of lookml model.
     */
    lookml_model_name: string, 
    /**
     * @param {Partial<IWriteLookmlModel>} body
     */
    body: Partial<IWriteLookmlModel>, options?: Partial<ITransportSettings>): Promise<ILookmlModel>;
    /**
     * PATCH /model_sets/{model_set_id} -> IModelSet
     */
    update_model_set(callback: (readable: Readable) => Promise<IModelSet>, 
    /**
     * @param {number} model_set_id id of model set
     */
    model_set_id: number, 
    /**
     * @param {Partial<IWriteModelSet>} body
     */
    body: Partial<IWriteModelSet>, options?: Partial<ITransportSettings>): Promise<IModelSet>;
    /**
     * PATCH /oidc_config -> IOIDCConfig
     */
    update_oidc_config(callback: (readable: Readable) => Promise<IOIDCConfig>, 
    /**
     * @param {Partial<IWriteOIDCConfig>} body
     */
    body: Partial<IWriteOIDCConfig>, options?: Partial<ITransportSettings>): Promise<IOIDCConfig>;
    /**
     * PATCH /password_config -> IPasswordConfig
     */
    update_password_config(callback: (readable: Readable) => Promise<IPasswordConfig>, 
    /**
     * @param {Partial<IWritePasswordConfig>} body
     */
    body: Partial<IWritePasswordConfig>, options?: Partial<ITransportSettings>): Promise<IPasswordConfig>;
    /**
     * PATCH /permission_sets/{permission_set_id} -> IPermissionSet
     */
    update_permission_set(callback: (readable: Readable) => Promise<IPermissionSet>, 
    /**
     * @param {number} permission_set_id id of permission set
     */
    permission_set_id: number, 
    /**
     * @param {Partial<IWritePermissionSet>} body
     */
    body: Partial<IWritePermissionSet>, options?: Partial<ITransportSettings>): Promise<IPermissionSet>;
    /**
     * PATCH /projects/{project_id} -> IProject
     */
    update_project(callback: (readable: Readable) => Promise<IProject>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {Partial<IWriteProject>} body
     */
    body: Partial<IWriteProject>, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProject>;
    /**
     * PUT /projects/{root_project_id}/credential/{credential_id} -> IRepositoryCredential
     */
    update_repository_credential(callback: (readable: Readable) => Promise<IRepositoryCredential>, 
    /**
     * @param {string} root_project_id Root Project Id
     */
    root_project_id: string, 
    /**
     * @param {string} credential_id Credential Id
     */
    credential_id: string, 
    /**
     * @param {Partial<IWriteRepositoryCredential>} body
     */
    body: Partial<IWriteRepositoryCredential>, options?: Partial<ITransportSettings>): Promise<IRepositoryCredential>;
    /**
     * PATCH /roles/{role_id} -> IRole
     */
    update_role(callback: (readable: Readable) => Promise<IRole>, 
    /**
     * @param {number} role_id id of role
     */
    role_id: number, 
    /**
     * @param {Partial<IWriteRole>} body
     */
    body: Partial<IWriteRole>, options?: Partial<ITransportSettings>): Promise<IRole>;
    /**
     * PATCH /saml_config -> ISamlConfig
     */
    update_saml_config(callback: (readable: Readable) => Promise<ISamlConfig>, 
    /**
     * @param {Partial<IWriteSamlConfig>} body
     */
    body: Partial<IWriteSamlConfig>, options?: Partial<ITransportSettings>): Promise<ISamlConfig>;
    /**
     * PATCH /scheduled_plans/{scheduled_plan_id} -> IScheduledPlan
     */
    update_scheduled_plan(callback: (readable: Readable) => Promise<IScheduledPlan>, 
    /**
     * @param {number} scheduled_plan_id Scheduled Plan Id
     */
    scheduled_plan_id: number, 
    /**
     * @param {Partial<IWriteScheduledPlan>} body
     */
    body: Partial<IWriteScheduledPlan>, options?: Partial<ITransportSettings>): Promise<IScheduledPlan>;
    /**
     * PATCH /session -> IApiSession
     */
    update_session(callback: (readable: Readable) => Promise<IApiSession>, 
    /**
     * @param {Partial<IWriteApiSession>} body
     */
    body: Partial<IWriteApiSession>, options?: Partial<ITransportSettings>): Promise<IApiSession>;
    /**
     * PATCH /session_config -> ISessionConfig
     */
    update_session_config(callback: (readable: Readable) => Promise<ISessionConfig>, 
    /**
     * @param {Partial<IWriteSessionConfig>} body
     */
    body: Partial<IWriteSessionConfig>, options?: Partial<ITransportSettings>): Promise<ISessionConfig>;
    /**
     * PATCH /spaces/{space_id} -> ISpace
     */
    update_space(callback: (readable: Readable) => Promise<ISpace>, 
    /**
     * @param {string} space_id Id of space
     */
    space_id: string, 
    /**
     * @param {Partial<IWriteSpace>} body
     */
    body: Partial<IWriteSpace>, options?: Partial<ITransportSettings>): Promise<ISpace>;
    /**
     * PATCH /themes/{theme_id} -> ITheme
     */
    update_theme(callback: (readable: Readable) => Promise<ITheme>, 
    /**
     * @param {string} theme_id Id of theme
     */
    theme_id: string, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<ITheme>;
    /**
     * PATCH /users/{user_id} -> IUser
     */
    update_user(callback: (readable: Readable) => Promise<IUser>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {Partial<IWriteUser>} body
     */
    body: Partial<IWriteUser>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    /**
     * PATCH /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    update_user_attribute(callback: (readable: Readable) => Promise<IUserAttribute>, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, 
    /**
     * @param {Partial<IWriteUserAttribute>} body
     */
    body: Partial<IWriteUserAttribute>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttribute>;
    /**
     * PATCH /groups/{group_id}/attribute_values/{user_attribute_id} -> IUserAttributeGroupValue
     */
    update_user_attribute_group_value(callback: (readable: Readable) => Promise<IUserAttributeGroupValue>, 
    /**
     * @param {number} group_id Id of group
     */
    group_id: number, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, 
    /**
     * @param {Partial<IUserAttributeGroupValue>} body
     */
    body: Partial<IUserAttributeGroupValue>, options?: Partial<ITransportSettings>): Promise<IUserAttributeGroupValue>;
    /**
     * PATCH /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    update_user_credentials_email(callback: (readable: Readable) => Promise<ICredentialsEmail>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {Partial<IWriteCredentialsEmail>} body
     */
    body: Partial<IWriteCredentialsEmail>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    /**
     * PUT /whitelabel_configuration -> IWhitelabelConfiguration
     */
    update_whitelabel_configuration(callback: (readable: Readable) => Promise<IWhitelabelConfiguration>, 
    /**
     * @param {Partial<IWriteWhitelabelConfiguration>} body
     */
    body: Partial<IWriteWhitelabelConfiguration>, options?: Partial<ITransportSettings>): Promise<IWhitelabelConfiguration>;
    /**
     * GET /users/{user_id} -> IUser
     */
    user(callback: (readable: Readable) => Promise<IUser>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    /**
     * GET /user_attributes/{user_attribute_id} -> IUserAttribute
     */
    user_attribute(callback: (readable: Readable) => Promise<IUserAttribute>, 
    /**
     * @param {number} user_attribute_id Id of user attribute
     */
    user_attribute_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUserAttribute>;
    /**
     * GET /users/{user_id}/attribute_values -> IUserAttributeWithValue[]
     */
    user_attribute_user_values(callback: (readable: Readable) => Promise<IUserAttributeWithValue[]>, request: Partial<IRequestUserAttributeUserValues>, options?: Partial<ITransportSettings>): Promise<IUserAttributeWithValue[]>;
    /**
     * GET /users/{user_id}/credentials_api3/{credentials_api3_id} -> ICredentialsApi3
     */
    user_credentials_api3(callback: (readable: Readable) => Promise<ICredentialsApi3>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {number} credentials_api3_id Id of API 3 Credential
     */
    credentials_api3_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsApi3>;
    /**
     * GET /users/{user_id}/credentials_email -> ICredentialsEmail
     */
    user_credentials_email(callback: (readable: Readable) => Promise<ICredentialsEmail>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmail>;
    /**
     * GET /users/{user_id}/credentials_embed/{credentials_embed_id} -> ICredentialsEmbed
     */
    user_credentials_embed(callback: (readable: Readable) => Promise<ICredentialsEmbed>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {number} credentials_embed_id Id of Embedding Credential
     */
    credentials_embed_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsEmbed>;
    /**
     * GET /users/{user_id}/credentials_google -> ICredentialsGoogle
     */
    user_credentials_google(callback: (readable: Readable) => Promise<ICredentialsGoogle>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsGoogle>;
    /**
     * GET /users/{user_id}/credentials_ldap -> ICredentialsLDAP
     */
    user_credentials_ldap(callback: (readable: Readable) => Promise<ICredentialsLDAP>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsLDAP>;
    /**
     * GET /users/{user_id}/credentials_looker_openid -> ICredentialsLookerOpenid
     */
    user_credentials_looker_openid(callback: (readable: Readable) => Promise<ICredentialsLookerOpenid>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsLookerOpenid>;
    /**
     * GET /users/{user_id}/credentials_oidc -> ICredentialsOIDC
     */
    user_credentials_oidc(callback: (readable: Readable) => Promise<ICredentialsOIDC>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsOIDC>;
    /**
     * GET /users/{user_id}/credentials_saml -> ICredentialsSaml
     */
    user_credentials_saml(callback: (readable: Readable) => Promise<ICredentialsSaml>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsSaml>;
    /**
     * GET /users/{user_id}/credentials_totp -> ICredentialsTotp
     */
    user_credentials_totp(callback: (readable: Readable) => Promise<ICredentialsTotp>, 
    /**
     * @param {number} user_id id of user
     */
    user_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ICredentialsTotp>;
    /**
     * GET /users/credential/{credential_type}/{credential_id} -> IUser
     */
    user_for_credential(callback: (readable: Readable) => Promise<IUser>, 
    /**
     * @param {string} credential_type Type name of credential
     */
    credential_type: string, 
    /**
     * @param {string} credential_id Id of credential
     */
    credential_id: string, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IUser>;
    /**
     * GET /users/{user_id}/roles -> IRole[]
     */
    user_roles(callback: (readable: Readable) => Promise<IRole[]>, request: Partial<IRequestUserRoles>, options?: Partial<ITransportSettings>): Promise<IRole[]>;
    /**
     * GET /users/{user_id}/sessions/{session_id} -> ISession
     */
    user_session(callback: (readable: Readable) => Promise<ISession>, 
    /**
     * @param {number} user_id Id of user
     */
    user_id: number, 
    /**
     * @param {number} session_id Id of Web Login Session
     */
    session_id: number, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<ISession>;
    /**
     * POST /projects/{project_id}/validate -> IProjectValidation
     */
    validate_project(callback: (readable: Readable) => Promise<IProjectValidation>, 
    /**
     * @param {string} project_id Project Id
     */
    project_id: string, 
    /**
     * @param {string} fields Requested fields
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IProjectValidation>;
    /**
     * POST /themes/validate -> IValidationError
     */
    validate_theme(callback: (readable: Readable) => Promise<IValidationError>, 
    /**
     * @param {Partial<IWriteTheme>} body
     */
    body?: Partial<IWriteTheme>, options?: Partial<ITransportSettings>): Promise<IValidationError>;
    /**
     * GET /versions -> IApiVersion
     */
    versions(callback: (readable: Readable) => Promise<IApiVersion>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IApiVersion>;
    /**
     * GET /whitelabel_configuration -> IWhitelabelConfiguration
     */
    whitelabel_configuration(callback: (readable: Readable) => Promise<IWhitelabelConfiguration>, 
    /**
     * @param {string} fields Requested fields.
     */
    fields?: string, options?: Partial<ITransportSettings>): Promise<IWhitelabelConfiguration>;
    /**
     * GET /workspaces/{workspace_id} -> IWorkspace
     */
    workspace(callback: (readable: Readable) => Promise<IWorkspace>, 
    /**
     * @param {string} workspace_id Id of the workspace
     */
    workspace_id: string, options?: Partial<ITransportSettings>): Promise<IWorkspace>;
}
