var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component, createRef, } from 'react';
export class ModalManager extends Component {
    constructor(props) {
        super(props);
        this.state = { isOpen: false };
        this.triggerRef = createRef();
        this.portalRef = createRef();
        this.close = this.close.bind(this);
        this.open = this.open.bind(this);
    }
    componentDidMount() {
        if (this.props.isOpen)
            this.open();
    }
    render() {
        const _a = this.props, { content, children } = _a, otherProps = __rest(_a, ["content", "children"]);
        const modalProps = Object.assign(Object.assign({}, otherProps), { portalRef: this.portalRef });
        return (React.createElement(React.Fragment, null,
            this.renderModal(content, modalProps),
            children(this.open, this.triggerRef)));
    }
    open(event) {
        if (event && this.props.stopPropagation) {
            event.stopPropagation();
            const nativeEvent = event.nativeEvent;
            nativeEvent.preventDefault && nativeEvent.preventDefault();
            nativeEvent.stopImmediatePropagation &&
                nativeEvent.stopImmediatePropagation();
        }
        this.setState({ isOpen: true });
    }
    close() {
        if (this.props.canClose && !this.props.canClose())
            return;
        this.setState({ isOpen: false });
    }
}
//# sourceMappingURL=ModalManager.js.map