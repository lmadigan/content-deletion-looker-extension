var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { space, reset, } from '@looker/design-tokens';
import styled from 'styled-components';
import React, { useContext } from 'react';
import { Box } from '../../Layout/Box';
import { ButtonTransparent } from '../../Button';
import { Heading } from '../../Text';
import { Icon } from '../../Icon';
import { ModalContext } from '../ModalContext';
export const ModalHeader = (_a) => {
    var { children, closeIcon = 'Close' } = _a, props = __rest(_a, ["children", "closeIcon"]);
    const { closeModal } = useContext(ModalContext);
    return (React.createElement(Header, Object.assign({}, props),
        React.createElement(Box, { mr: "xlarge" }, children),
        React.createElement(ButtonTransparent, { tabIndex: -1, ml: "auto", p: "none", color: "neutral", onClick: closeModal },
            React.createElement(Icon, { name: closeIcon, size: "1.25rem" }))));
};
const Header = styled.header.withConfig({ displayName: "Header", componentId: "sc-1mz2jhl" }) `
  ${reset}
  ${space}

  display: flex;
  align-items: center;
  flex-direction: row;

  ${Heading} {
    font-size: ${props => props.theme.fontSizes.medium};
  }
`;
Header.defaultProps = {
    p: 'large',
    px: 'xlarge',
};
//# sourceMappingURL=ModalHeader.js.map