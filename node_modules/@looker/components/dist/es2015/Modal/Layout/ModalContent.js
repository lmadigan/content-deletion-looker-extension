var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { palette, reset, space, layout, } from '@looker/design-tokens';
import React, { Component, createRef } from 'react';
import ReactResizeDetector from 'react-resize-detector';
import styled from 'styled-components';
import omit from 'lodash/omit';
class Internal extends Component {
    constructor(props) {
        super(props);
        this.state = { overflow: false };
        this.ref = createRef();
    }
    hasOverflow(e) {
        return e.offsetHeight < e.scrollHeight;
    }
    componentDidUpdate(prevProps) {
        if (prevProps.renderedHeight !== this.props.renderedHeight) {
            this.ref.current &&
                this.setState({ overflow: this.hasOverflow(this.ref.current) });
        }
    }
    render() {
        const _a = this.props, { children, className, innerProps } = _a, props = __rest(_a, ["children", "className", "innerProps"]);
        if (innerProps && innerProps.p && !innerProps.px) {
            innerProps.px = innerProps.p;
        }
        return (React.createElement(Outer, Object.assign({ className: `${className} ${this.state.overflow && 'overflow'}`, ref: this.ref }, omit(props, ['renderedHeight'])),
            React.createElement(Inner, Object.assign({}, innerProps), children)));
    }
}
export const ModalContent = (props) => {
    return (React.createElement(ReactResizeDetector, { handleHeight: true }, (height) => React.createElement(Internal, Object.assign({ renderedHeight: height }, props))));
};
const Outer = styled.div.withConfig({ displayName: "Outer", componentId: "sc-89wtju" }) `
  ${reset}
  ${layout}

  overflow: auto;
  flex: 8;

  &.overflow {
    box-shadow: inset 0 -16px 16px -16px ${palette.charcoal200},
      inset 0 16px 16px -16px ${palette.charcoal200};
  }
`;
const Inner = styled.div.withConfig({ displayName: "Inner", componentId: "sc-mp994" }) `
  ${reset}
  ${space}
`;
Inner.defaultProps = { p: 'large', px: 'xlarge' };
//# sourceMappingURL=ModalContent.js.map