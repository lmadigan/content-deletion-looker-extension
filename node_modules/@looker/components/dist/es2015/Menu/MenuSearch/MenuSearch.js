var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { HotKeys, ObserveKeys } from 'react-hotkeys';
import { palette } from '@looker/design-tokens';
import { InputSearch } from '../../Form/Inputs';
import { moveFocus } from '../moveFocus';
export const MenuSearch = (_a) => {
    var { menuRef } = _a, props = __rest(_a, ["menuRef"]);
    return (React.createElement(HotKeys, { keyMap: { MOVE_DOWN: 'down', MOVE_UP: 'up' }, handlers: {
            MOVE_DOWN: () => moveFocus(1, 0, menuRef),
            MOVE_UP: () => moveFocus(-1, -1, menuRef),
        } },
        React.createElement(ObserveKeys, { except: [], only: ['down', 'up'] },
            React.createElement(InputSearch, Object.assign({ borderRadius: 0, border: "none", borderBottom: `1px solid ${palette.charcoal200}`, width: "100%", p: "large", height: "auto" }, props)))));
};
//# sourceMappingURL=MenuSearch.js.map