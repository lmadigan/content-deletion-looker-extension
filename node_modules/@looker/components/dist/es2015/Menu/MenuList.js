import merge from 'lodash/merge';
import React, { Children, cloneElement, useRef, forwardRef, } from 'react';
import { HotKeys } from 'react-hotkeys';
import styled, { css } from 'styled-components';
import { height, minHeight, maxHeight, width, minWidth, maxWidth, } from 'styled-system';
import { reset } from '@looker/design-tokens';
import { usePopover } from '../Popover';
import { MenuGroup } from './MenuGroup';
import { moveFocus } from './moveFocus';
export function cloneMenuListChildren(children, { customizationProps: parentCustomizations, compact }) {
    return Children.map(children, (child) => {
        if (!child || typeof child.type === 'string')
            return child;
        const childCustomizations = child.props.customizationProps;
        let customizationProps = parentCustomizations || childCustomizations;
        if (childCustomizations && parentCustomizations) {
            customizationProps = merge({}, parentCustomizations, childCustomizations);
        }
        return cloneElement(child, { compact, customizationProps });
    });
}
export const MenuListInternal = forwardRef((props, ref) => {
    const { children, className, compact, customizationProps, disabled, isOpen, pin, placement, setOpen, triggerRef, } = props;
    const innerRef = useRef(null);
    const clonedChildren = cloneMenuListChildren(children, {
        compact,
        customizationProps,
    });
    const menuList = (React.createElement(HotKeys, { innerRef: innerRef, keyMap: { MOVE_DOWN: 'down', MOVE_UP: 'up' }, handlers: {
            MOVE_DOWN: () => moveFocus(1, 0, innerRef),
            MOVE_UP: () => moveFocus(-1, -1, innerRef),
        } },
        React.createElement("ul", { className: className, ref: ref, tabIndex: -1, role: "menu" }, clonedChildren)));
    const isMenu = isOpen !== undefined;
    const { popover } = usePopover({
        content: menuList,
        isOpen,
        pin,
        placement,
        setOpen,
        triggerRef,
    });
    if (disabled)
        return null;
    if (isMenu)
        return popover || null;
    return menuList;
});
const dividersStyle = css `
  ${MenuGroup} ~ ${MenuGroup} { /* stylelint-disable-line */
    border-top: 1px solid ${props => props.theme.colors.palette.charcoal200};
  }
`;
export const MenuList = styled(MenuListInternal).withConfig({ displayName: "MenuList", componentId: "sc-cfvd7z" }) `
  ${reset}

  ${minHeight}
  ${maxHeight}
  ${height}

  ${minWidth}
  ${maxWidth}
  ${width}

  overflow: auto;

  list-style: none;
  outline: none;
  user-select: none;
  ${props => props.groupDividers !== false && dividersStyle};
`;
MenuList.defaultProps = { minWidth: '12rem' };
//# sourceMappingURL=MenuList.js.map