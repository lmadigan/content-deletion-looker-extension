var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { Icon } from '../../Icon';
import { MenuItemButton } from './MenuItemButton';
import { MenuItemDetail } from './MenuItemDetail';
import { MenuItemListItem } from './MenuItemListItem';
import { defaultMenuItemStyle, } from './menuItemStyle';
const assignCustomizations = (defaultStyle, changes) => {
    const { bg, color, iconColor, fontWeight, fontSize, iconSize } = changes || {};
    const customMarker = changes ? changes.marker : {};
    const defaults = {
        fontSize: fontSize || 'small',
        iconSize: iconSize || 20,
    };
    const base = {};
    bg && (base.bg = bg);
    color && (base.color = color);
    fontWeight && (base.fontWeight = fontWeight);
    iconColor && (base.iconColor = iconColor);
    const initial = Object.assign(Object.assign(Object.assign({}, defaultStyle.initial), defaults), base);
    const current = Object.assign(Object.assign(Object.assign(Object.assign({}, defaultStyle.current), defaults), base), (changes ? changes.current : {}));
    const hover = Object.assign(Object.assign(Object.assign(Object.assign({}, defaultStyle.hover), defaults), base), (changes ? changes.hover : {}));
    const marker = Object.assign(Object.assign({}, defaultStyle.marker), customMarker);
    return {
        current,
        hover,
        initial,
        marker,
    };
};
export const MenuItem = props => {
    const { current, children, detail, icon, customizationProps, onClick, itemRole, href, target, compact } = props, remainingProps = __rest(props, ["current", "children", "detail", "icon", "customizationProps", "onClick", "itemRole", "href", "target", "compact"]);
    const compactIconModifier = compact ? 1.25 : 1;
    const style = assignCustomizations(defaultMenuItemStyle, customizationProps);
    const styleState = current ? style.current : style.initial;
    const { iconSize, iconColor } = styleState, listItemProps = __rest(styleState, ["iconSize", "iconColor"]);
    const { p, py, px, pr, pl, pt, pb } = remainingProps, outerProps = __rest(remainingProps, ["p", "py", "px", "pr", "pl", "pt", "pb"]);
    const clickTargetProps = {
        p,
        pb: pb || py || p || compact ? 'xxsmall' : 'small',
        pl: pl || px || p || 'medium',
        pr: pr || px || p || 'medium',
        pt: pt || py || p || compact ? 'xxsmall' : 'small',
    };
    return (React.createElement(MenuItemListItem, Object.assign({ current: current, itemStyle: style, "aria-current": current && 'page', onClick: onClick }, listItemProps, outerProps),
        React.createElement(MenuItemButton, Object.assign({ as: itemRole === 'link' ? 'a' : 'button', role: "menuitem", href: href, target: target }, clickTargetProps),
            icon && (React.createElement(Icon, { name: icon, mr: "xsmall", size: iconSize / compactIconModifier, color: iconColor })),
            children),
        detail && React.createElement(MenuItemDetail, null, detail)));
};
//# sourceMappingURL=MenuItem.js.map