var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useRef } from 'react';
import styled from 'styled-components';
import { color } from 'styled-system';
import { Heading } from '../Text/Heading';
import { useElementVisibility } from './MenuGroup.hooks';
export const MenuGroupLabel = (_a) => {
    var { labelContent, labelStyles } = _a, props = __rest(_a, ["labelContent", "labelStyles"]);
    const labelShimRef = useRef();
    const isLabelShimVisible = useElementVisibility(labelShimRef);
    return (React.createElement(MenuGroupLabelWrapper, { renderBoxShadow: !isLabelShimVisible },
        React.createElement("div", { ref: labelShimRef, style: { height: '0' } }),
        React.createElement(Heading, Object.assign({ fontSize: "small", as: "h2", px: "medium", py: "xsmall", fontWeight: "semiBold", style: labelStyles }, props), labelContent)));
};
const MenuGroupLabelWrapper = styled.div.withConfig({ displayName: "MenuGroupLabelWrapper", componentId: "sc-1jfel5q" }) `
  ${color}
  box-shadow: ${({ renderBoxShadow, theme }) => renderBoxShadow
    ? `0 4px 8px -2px ${theme.colors.palette.charcoal200}`
    : 'none'};
  position: sticky;
  top: -1px;
  margin-bottom: ${({ theme }) => theme.space.xxsmall};
`;
MenuGroupLabel.defaultProps = {
    backgroundColor: 'palette.white',
};
//# sourceMappingURL=MenuGroupLabel.js.map