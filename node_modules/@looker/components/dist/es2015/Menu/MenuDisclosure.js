import React, { cloneElement, Children } from 'react';
import { useTooltip } from '../Tooltip';
function wrapCallback(cbParent, cbChild) {
    return (e) => {
        cbParent(e);
        cbChild && cbChild(e);
    };
}
export const MenuDisclosure = ({ children, disabled, isOpen, setOpen, tooltip, tooltipPlacement, triggerRef, }) => {
    const { eventHandlers, tooltip: renderedTooltip, ref } = useTooltip({
        content: tooltip,
        disabled: isOpen,
        placement: tooltipPlacement || 'top',
        triggerRef,
    });
    const handleClick = () => setOpen && setOpen(!isOpen);
    const allCallbacks = Object.assign(Object.assign({}, eventHandlers), { onClick: handleClick });
    const cloned = Children.map(children, (child) => {
        const childProps = child.props;
        const wrappedCallbacks = {};
        Object.keys(allCallbacks).forEach(cbName => {
            const cbParent = Reflect.get(allCallbacks, cbName);
            wrappedCallbacks[cbName] = wrapCallback(cbParent, childProps[cbName]);
        });
        return cloneElement(child, Object.assign(Object.assign({}, wrappedCallbacks), { disabled,
            ref }));
    });
    return (React.createElement(React.Fragment, null,
        renderedTooltip,
        cloned));
};
//# sourceMappingURL=MenuDisclosure.js.map