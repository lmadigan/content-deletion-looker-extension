var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import uniqueId from 'lodash/uniqueId';
import xor from 'lodash/xor';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useControlWarn } from '../utils';
import { ButtonItem, ButtonItemLabel } from './ButtonItem';
import { ButtonSet } from './ButtonSet';
const ButtonGroupFactory = forwardRef((_a, ref) => {
    var { onChange, value } = _a, props = __rest(_a, ["onChange", "value"]);
    const isControlled = useControlWarn({
        controllingProps: ['onChange', 'value'],
        isControlledCheck: () => onChange !== undefined,
        name: 'ButtonGroup',
    });
    function handleChange(e) {
        const newValue = xor(value, [e.target.value]);
        onChange && onChange(newValue);
    }
    return (React.createElement(ButtonSet, Object.assign({}, props, { ref: ref }, (isControlled
        ? {
            onChange: handleChange,
            value,
        }
        : { name: props.name || uniqueId() }))));
});
export const ButtonGroup = styled(ButtonGroupFactory).withConfig({ displayName: "ButtonGroup", componentId: "sc-chg3ap" }) `
  ${ButtonItem} {
    height: 36px;
    border-radius: 4px;

    + ${ButtonItem} {
      margin-left: ${props => props.theme.space.xxsmall};
    }
  }

  ${ButtonItemLabel} {
    border-style: solid;
    border-width: 1px;
  }
`;
//# sourceMappingURL=ButtonGroup.js.map