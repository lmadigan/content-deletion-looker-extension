var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import styled, { css } from 'styled-components';
import { pseudoClasses, reset, space, } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import { Icon } from '../Icon';
import { VisuallyHidden } from '../VisuallyHidden';
import { buttonCSS } from './ButtonBase';
import { ButtonTransparent } from './ButtonTransparent';
import { buttonSizeMap } from './size';
export const IconButtonStyle = styled.button.withConfig({ displayName: "IconButtonStyle", componentId: "sc-f6tlmj" }) `
  ${buttonCSS}
  height: auto;
`;
const IconButtonComponent = forwardRef((props, ref) => {
    const { icon, size = 'xsmall', label } = props, rest = __rest(props, ["icon", "size", "label"]);
    const actualSize = size === 'xxsmall' ? 'xsmall' : size;
    return (React.createElement(ButtonTransparent, Object.assign({ ref: ref, color: "neutral", p: "none", size: actualSize, width: buttonSizeMap[size] }, rest),
        React.createElement(VisuallyHidden, null, label),
        React.createElement(Icon, { name: icon, size: (buttonSizeMap[size] || buttonSizeMap.xsmall) - 6, "aria-hidden": true })));
});
IconButtonComponent.displayName = 'IconButtonComponent';
const outlineCSS = (props) => {
    const { color = 'primary' } = props;
    return css `
    border: 1px solid
      ${props => props.theme.colors.semanticColors[color].borderColor};

    &:hover,
    &:focus,
    &.hover {
      border-color: ${props => props.theme.colors.semanticColors[color].main};
    }

    &:active,
    &.active {
      border-color: ${props => props.theme.colors.semanticColors[color].main};
    }

    &[disabled] {
      &:hover,
      &:active,
      &:focus {
        border-color: ${props => props.theme.colors.semanticColors[color].borderColor};
      }
    }
  `;
};
export const IconButton = styled(IconButtonComponent).withConfig({ displayName: "IconButton", componentId: "sc-1yur21t" }) `
  ${reset}
  ${space}

  ${props => props.outline && outlineCSS}

  ${pseudoClasses}
  ${({ shape }) => shape === 'round' && 'border-radius: 100%;'}
`;
//# sourceMappingURL=IconButton.js.map