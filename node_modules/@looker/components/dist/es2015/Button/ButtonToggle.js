var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import uniqueId from 'lodash/uniqueId';
import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { useControlWarn } from '../utils';
import { ButtonItemLabel } from './ButtonItem';
import { ButtonSet } from './ButtonSet';
const ButtonToggleComponent = ButtonSet;
const ButtonToggleFactory = forwardRef((_a, ref) => {
    var { onChange, value: controlledValue } = _a, props = __rest(_a, ["onChange", "value"]);
    const isControlled = useControlWarn({
        controllingProps: ['onChange', 'value'],
        isControlledCheck: () => onChange !== undefined,
        name: 'ButtonToggle',
    });
    const [value, setValue] = useState();
    function handleChange(e) {
        if (onChange) {
            onChange(e.target.value);
        }
        else {
            setValue(e.target.value);
        }
    }
    return (React.createElement(ButtonToggleComponent, Object.assign({}, props, { borderRadius: "4px", onChange: handleChange, isToggle: true, ref: ref }, (isControlled
        ? {
            name: props.name || uniqueId(),
            value: controlledValue,
        }
        : { value }))));
});
export const ButtonToggle = styled(ButtonToggleFactory).withConfig({ displayName: "ButtonToggle", componentId: "sc-6oztvr" }) `
  border: solid 1px ${props => props.theme.colors.palette.charcoal200};

  ${ButtonItemLabel} {
    position: relative;
    height: 36px;
    border-radius: 0;

    &:first-child {
      border-top-left-radius: 4px;
      border-bottom-left-radius: 4px;
    }
    &:last-child {
      border-top-right-radius: 4px;
      border-bottom-right-radius: 4px;
    }

    /* stylelint-disable */
    & + ${ButtonItemLabel} {
      &::after {
        content: '';
        display: block;
        height: 20px;
        width: 1px;
        background: ${props => props.theme.colors.palette.charcoal200};
        position: absolute;
        left: 0;
        top: 8px;
      }
    }
    /* stylelint-enable */
  }
`;
//# sourceMappingURL=ButtonToggle.js.map