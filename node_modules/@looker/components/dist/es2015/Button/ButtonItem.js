var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { parseToHsl } from 'polished';
import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { space, typography, } from '@looker/design-tokens';
export const ButtonItemLabelText = styled.span.withConfig({ displayName: "ButtonItemLabelText", componentId: "sc-1xqs192" }) ``;
export const ButtonItemLabel = styled.label.withConfig({ displayName: "ButtonItemLabel", componentId: "sc-1beway8" }) `
  cursor: pointer;
  display: inline-flex;
  align-items: center;
  padding: 0 ${props => props.theme.space.small};
  user-select: none;
  border-radius: 4px;
  background: ${props => props.selected
    ? `hsla(${parseToHsl(props.theme.colors.palette.purple400).hue}, 100%, 98%, 1)`
    : 'transparent'};
  border-color: ${props => props.selected
    ? `hsla(${parseToHsl(props.theme.colors.palette.purple400).hue}, 100%, 98%, 1)`
    : `hsla(${parseToHsl(props.theme.colors.palette.purple400).hue}, 25%, 90%, 1)`};
  transition: background ${props => props.theme.transitions.durationQuick} ease;

  &:hover {
    background: ${props => !props.selected
    ? `hsla(${parseToHsl(props.theme.colors.palette.purple400).hue}, 25%, 97%, 0.7)`
    : false};
  }

  &:active {
    background: ${props => `hsla(${parseToHsl(props.theme.colors.palette.purple400).hue}, 50%, 96%, 0.9)`};
  }

  &:focus-within {
    box-shadow: ${props => `0 0 .5px 1px ${props.theme.colors.palette.purple200}`};
  }

  ${ButtonItemLabelText} {
    color: ${props => props.theme.colors.palette.charcoal600};
  }

  input:checked + ${ButtonItemLabelText} {
    color: ${props => props.theme.colors.palette.purple400};

    /* stylelint-disable */
    text-shadow: -0.025ex 0 currentColor, 0.025ex 0 currentColor;
    /* stylelint-enabled */
  }
  ${space}
  ${typography}
`;
const ButtonInput = styled.input.withConfig({ displayName: "ButtonInput", componentId: "sc-1346jqs" }) `
  display: none;
`;
const ButtonItemComponent = forwardRef((_a, ref) => {
    var { children, disabled, isControlled, name, onChange, selected = false, value } = _a, props = __rest(_a, ["children", "disabled", "isControlled", "name", "onChange", "selected", "value"]);
    const [uncontrolledSelected, setUncontrolledSelected] = useState(selected);
    function handleChange(e) {
        if (onChange) {
            onChange(e);
        }
        if (!isControlled) {
            setUncontrolledSelected(!uncontrolledSelected);
        }
    }
    const showSelected = isControlled ? selected : uncontrolledSelected;
    return (React.createElement(ButtonItemLabel, Object.assign({ disabled: disabled, fontFamily: "brand", py: "small", selected: showSelected }, props),
        React.createElement(ButtonInput, { type: props.type, disabled: disabled, name: name, onChange: handleChange, checked: showSelected, value: value, ref: ref }),
        React.createElement(ButtonItemLabelText, null, children)));
});
ButtonItemComponent.displayName = 'ButtonItemComponent';
export const ButtonItem = styled(ButtonItemComponent).withConfig({ displayName: "ButtonItem", componentId: "sc-11a1q7g" }) ``;
//# sourceMappingURL=ButtonItem.js.map