import { rgba } from 'polished';
import { semanticColors, } from '@looker/design-tokens';
import { css } from 'styled-components';
const defaultVariant = (color) => css `
  background: ${color.main};
  border: 1px solid ${color.main};
  color: ${color.text};

  &:active,
  &.active {
    background: ${color.darker};
    border-color: ${color.darker};
  }
  &:hover,
  &:focus,
  &.hover {
    background: ${color.dark};
    border-color: ${color.dark};
  }
  &[disabled] {
    &:hover,
    &:active,
    &:focus {
      background-color: ${color.main};
      border-color: ${color.borderColor};
    }
  }
`;
const outlineVariant = (color) => css `
  background: ${props => props.theme.colors.palette.white};
  border: 1px solid ${color.borderColor};
  color: ${color.main};

  &:active,
  &.active {
    background: ${color.main};
    border-color: ${color.main};
    color: ${color.text};
  }

  &:hover,
  &:focus,
  &.hover {
    background: ${props => props.theme.colors.palette.white};
    border-color: ${color.main};
    color: ${color.darker};
  }

  &[disabled] {
    &:hover,
    &:active,
    &:focus {
      background-color: ${props => props.theme.colors.palette.white};
      border-color: ${color.borderColor};
      color: ${color.main};
    }
  }
`;
const transparentVariant = (color) => css `
  background: ${props => props.theme.colors.palette.transparent};
  border: 1px solid ${props => props.theme.colors.palette.transparent};
  color: ${color.main};

  &:active,
  &.active {
    background: ${color.light};
    border-color: ${color.light};
    color: ${color.altText};
  }

  &:hover,
  &:focus,
  &.hover {
    background: ${color.lighter};
    border-color: ${color.lighter};
    color: ${color.altText};
  }

  &[disabled] {
    &:hover,
    &:active,
    &:focus {
      background-color: ${props => props.theme.colors.palette.transparent};
      border-color: ${props => props.theme.colors.palette.transparent};
      color: ${color.main};
    }
  }
`;
const variantFn = (color, variant) => {
    switch (variant || 'default') {
        case 'transparent':
            return transparentVariant(color);
        case 'outline':
            return outlineVariant(color);
        case 'default':
        default:
            return defaultVariant(color);
    }
};
export const buttonVariant = (props) => {
    const color = semanticColors[props.color || 'primary'];
    const variant = props.variant || 'default';
    return css `
    &:focus {
      box-shadow: 0 0 0 0.15rem ${rgba(color.main, 0.25)};
    }

    ${variantFn(color, variant)}
  `;
};
export const iconButtonVariant = (props) => {
    const color = semanticColors[props.color || 'primary'];
    const variant = props.outline ? 'outline' : 'transparent';
    return css `
    &:focus {
      box-shadow: 0 0 0 0.15rem ${rgba(color.main, 0.25)};
    }

    ${variantFn(color, variant)}
  `;
};
//# sourceMappingURL=variant.js.map