var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import styled, { css } from 'styled-components';
import omit from 'lodash/omit';
import pick from 'lodash/pick';
import { FlexItem } from '../../Layout/FlexItem';
import { FormControl } from '../FormControl/FormControl';
import { Label } from '../Label/Label';
import { ValidationMessage, } from '../ValidationMessage/ValidationMessage';
export const CustomizableFieldAttributes = {
    labelMargin: 'xsmall',
    labelWidth: '20%',
};
export const fieldPropKeys = [
    'alignLabel',
    'alignValidationMessage',
    'id',
    'label',
    'labelFontSize',
    'labelFontWeight',
    'labelWidth',
    'validationMessage',
];
export const pickFieldProps = (props) => pick(props, [...fieldPropKeys, 'required', 'className']);
export const omitFieldProps = (props) => omit(props, fieldPropKeys);
const RequiredStar = styled(props => (React.createElement("span", Object.assign({}, props, { "aria-hidden": "true" }),
    ' ',
    "*"))).withConfig({ displayName: "RequiredStar", componentId: "sc-ohzx3f" }) `
  color: ${props => props.theme.colors.semanticColors.danger.darker};
`;
const handleHorizontalAlignment = (props) => {
    const { alignLabel, labelWidth } = props;
    const width = labelWidth || CustomizableFieldAttributes.labelWidth;
    switch (alignLabel) {
        case 'left':
            return css `
        text-align: right;
        width: ${width};
      `;
        case 'right':
            return css `
        text-align: left;
        width: ${width};
        margin-right: 0;
        margin-left: ${props => props.theme.space[CustomizableFieldAttributes.labelMargin]};
      `;
        case 'bottom':
        case 'top':
        default:
            return '';
    }
};
const getValidationMessageAlignment = (alignValidationMessage) => {
    switch (alignValidationMessage) {
        case 'left':
            return 'right';
        case 'right':
            return 'left';
        case 'bottom':
            return 'top';
        case 'top':
            return 'bottom';
        default:
            return undefined;
    }
};
const FieldComponent = (_a) => {
    var { alignValidationMessage, children, id, label, labelFontSize, labelFontWeight, required, validationMessage } = _a, props = __rest(_a, ["alignValidationMessage", "children", "id", "label", "labelFontSize", "labelFontWeight", "required", "validationMessage"]);
    return (React.createElement(FormControl, Object.assign({ mb: "xsmall" }, props),
        React.createElement(Label, { htmlFor: id, fontWeight: labelFontWeight, fontSize: labelFontSize },
            label,
            required && React.createElement(RequiredStar, null)),
        React.createElement(FormControl, { alignLabel: getValidationMessageAlignment(alignValidationMessage), mb: "xsmall" },
            React.createElement(FlexItem, null, children),
            validationMessage ? (React.createElement(ValidationMessage, Object.assign({ ml: alignValidationMessage === 'right' ? 'xsmall' : undefined }, validationMessage))) : null)));
};
export const Field = styled(FieldComponent).withConfig({ displayName: "Field", componentId: "sc-9vj8xo" }) `
  ${Label} {
    ${handleHorizontalAlignment}
  }
`;
//# sourceMappingURL=Field.js.map