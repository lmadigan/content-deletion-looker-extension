export const cartesian2polar = (coord) => ({
    angle: Math.atan2(coord.y, coord.x),
    radius: Math.round(Math.sqrt(coord.x * coord.x + coord.y * coord.y)),
});
export const polar2cartesian = (coord) => ({
    x: coord.radius * Math.cos(coord.angle),
    y: coord.radius * Math.sin(coord.angle),
});
export const rad2deg = (rad) => (rad / (2 * Math.PI)) * 360;
export const deg2rad = (angle) => angle * (Math.PI / 180);
export const diameter = (radius) => 2 * radius;
export const translate = (by, val) => val + by;
export const translateDiagonal = (by, coordinate) => ({
    x: translate(by, coordinate.x),
    y: translate(by, coordinate.y),
});
export const scaleRadius = (by, coord) => (Object.assign(Object.assign({}, coord), { radius: coord.radius * by }));
export const limitByRadius = (coord, radius) => {
    const { x, y } = translateDiagonal(-radius, coord);
    const distanceFromCenter = Math.min(Math.sqrt(x * x + y * y), radius);
    const angle = Math.atan2(y, x);
    const newCoord = polar2cartesian({ angle, radius: distanceFromCenter });
    return {
        x: newCoord.x + radius,
        y: newCoord.y + radius,
    };
};
//# sourceMappingURL=math_utils.js.map