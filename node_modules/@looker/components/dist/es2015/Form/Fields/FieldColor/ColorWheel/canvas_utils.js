import { hsv } from 'd3-hsv';
import { translate } from './math_utils';
export const canvasMargin = 10;
export const canvasRadius = (canvas, margin) => (canvas.width - 2 * margin) / 2;
export const eventCartesianPosition = (canvas, event) => ({
    x: translate(-canvas.getBoundingClientRect().left, event.clientX),
    y: translate(-canvas.getBoundingClientRect().top, event.clientY),
});
export const clearCanvas = (canvas) => {
    const ctx = canvas.getContext('2d');
    if (ctx) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
    }
};
export const drawColorWheelIntoCanvasImage = (image, data) => {
    data.forEach((row, x) => {
        row.forEach((val, y) => {
            const pixelWidth = 4;
            const index = (x + y * row.length) * pixelWidth;
            const rgbColor = hsv(val.h, val.s, val.v).rgb();
            image[index] = rgbColor.r;
            image[index + 1] = rgbColor.g;
            image[index + 2] = rgbColor.b;
            image[index + 3] = 255;
        });
    });
};
//# sourceMappingURL=canvas_utils.js.map