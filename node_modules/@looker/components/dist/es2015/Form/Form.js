import React, { forwardRef, useContext, createContext, } from 'react';
import styled from 'styled-components';
import omit from 'lodash/omit';
import { border, flexbox, layout, reset, space, } from '@looker/design-tokens';
export const FormContext = createContext({});
const FormBase = styled.form.withConfig({ displayName: "FormBase", componentId: "sc-1jzpsxe" }) `
  ${reset}
  ${border}
  ${flexbox}
  ${layout}
  ${space}
`;
export const Form = forwardRef((props, ref) => (React.createElement(FormContext.Provider, { value: {
        validationMessages: props.validationMessages,
    } },
    React.createElement(FormBase, Object.assign({}, omit(props, 'validationMessages'), { ref: ref })))));
Form.displayName = 'Form';
export function useFormContext({ name, validationMessage, }) {
    const context = useContext(FormContext);
    let vMessage;
    if (context.validationMessages && name) {
        vMessage = context.validationMessages[name];
    }
    else if (validationMessage) {
        vMessage = validationMessage;
    }
    return vMessage;
}
//# sourceMappingURL=Form.js.map