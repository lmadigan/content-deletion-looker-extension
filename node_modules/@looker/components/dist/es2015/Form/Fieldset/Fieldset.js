var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { border, color, layout, reset, space, } from '@looker/design-tokens';
import { FlexItem } from '../../Layout/FlexItem';
import { FormControl } from '../FormControl';
import { Legend } from './Legend';
const FieldsetBase = styled.fieldset.withConfig({ displayName: "FieldsetBase", componentId: "sc-12wctbg" }) `
  ${reset}
  ${border}
  ${color}
  ${layout}
  ${space}
`;
const FieldsetComponent = forwardRef((_a, ref) => {
    var { alignLegend, legend } = _a, props = __rest(_a, ["alignLegend", "legend"]);
    return (React.createElement(FieldsetBase, Object.assign({}, props, { ref: ref }),
        React.createElement(FormControl, { mb: "xsmall", alignLabel: alignLegend },
            legend ? (React.createElement(FlexItem, null,
                React.createElement(Legend, null, legend))) : null,
            React.createElement(FlexItem, null, props.children))));
});
FieldsetComponent.displayName = 'FieldsetComponent';
export const Fieldset = styled(FieldsetComponent).withConfig({ displayName: "Fieldset", componentId: "sc-lsdv2r" }) ``;
//# sourceMappingURL=Fieldset.js.map