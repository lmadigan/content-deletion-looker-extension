var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import pick from 'lodash/pick';
import omit from 'lodash/omit';
import { border, typography, layout, pseudoClasses, space, reset, color, } from '@looker/design-tokens';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { inputPropKeys } from '../InputProps';
export const CustomizableInputTextAttributes = {
    borderRadius: 'medium',
    fontSize: 'small',
    height: '28px',
    px: 'xsmall',
    py: 'none',
};
const InputComponent = forwardRef((_a, ref) => {
    var { type = 'text' } = _a, props = __rest(_a, ["type"]);
    return (React.createElement("input", Object.assign({}, pick(omit(props, 'height', 'width'), inputPropKeys), { type: type, className: props.className, ref: ref })));
});
InputComponent.displayName = 'InputComponent';
export const InputText = styled(InputComponent).attrs((props) => ({
    background: props.validationType === 'error' && 'palette.red000',
    px: props.px || props.p || CustomizableInputTextAttributes.px,
    py: props.py || props.p || CustomizableInputTextAttributes.py,
})).withConfig({ displayName: "InputText", componentId: "sc-16mk1om" }) `
  ${reset}
  ${border}
  ${color}
  ${layout}
  ${space}
  ${typography}
  ${pseudoClasses}
`;
InputText.defaultProps = {
    border: 'solid 1px',
    borderColor: 'palette.charcoal300',
    borderRadius: CustomizableInputTextAttributes.borderRadius,
    fontSize: CustomizableInputTextAttributes.fontSize,
    height: CustomizableInputTextAttributes.height,
    type: 'text',
};
//# sourceMappingURL=InputText.js.map