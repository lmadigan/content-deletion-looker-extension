var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef, useState } from 'react';
import styled from 'styled-components';
import { border, layout, reset, } from '@looker/design-tokens';
import { CustomizableInputTextAttributes, InputText, } from '../InputText';
import { InputSearchControls } from './InputSearchControls';
const InputSearchLayout = styled.div.withConfig({ displayName: "InputSearchLayout", componentId: "sc-10r6ylf" }) `
  ${reset}
  ${border}
  ${layout}

  align-items: center;
  display: flex;
  background: ${props => props.theme.colors.palette.white};
  position: relative;

  &:focus-within {
    border-color: transparent;
    outline: 5px auto -webkit-focus-ring-color;
  }

  ${InputText} {
    border: none;
    width: 100%;
    appearance: none;

    &::-webkit-search-decoration,
    &::-webkit-search-cancel-button,
    &::-webkit-search-results-button,
    &::-webkit-search-results-decoration {
      appearance: none;
    }
  }
`;
InputSearchLayout.defaultProps = {
    border: '1px solid',
    borderColor: 'palette.charcoal300',
    borderRadius: CustomizableInputTextAttributes.borderRadius,
};
const InputSearchComponent = forwardRef((props, ref) => {
    const { border, borderBottom, borderColor, borderLeft, borderRadius, borderRight, borderTop, hideControls = false, onChange, onClear, summary, value = '', width = '100%' } = props, inputProps = __rest(props, ["border", "borderBottom", "borderColor", "borderLeft", "borderRadius", "borderRight", "borderTop", "hideControls", "onChange", "onClear", "summary", "value", "width"]);
    const [inputValue, setValue] = useState(value);
    const handleClear = () => {
        setValue('');
        onClear && onClear();
    };
    const updateValue = (event) => {
        setValue(event.currentTarget.value);
        onChange && onChange(event);
    };
    const controls = !hideControls && (React.createElement(InputSearchControls, { onClear: handleClear, showClear: inputValue.length > 0, summary: summary }));
    return (React.createElement(InputSearchLayout, { border: border, borderColor: borderColor, borderRadius: borderRadius, borderTop: borderTop, borderBottom: borderBottom, borderLeft: borderLeft, borderRight: borderRight, width: width },
        React.createElement(InputText, Object.assign({ type: "search", onChange: updateValue, value: inputValue, focusStyle: { outline: 'none' }, border: "none", width: "100%" }, inputProps, { ref: ref })),
        controls));
});
InputSearchComponent.displayName = 'InputSearchComponent';
export const InputSearch = styled(InputSearchComponent).withConfig({ displayName: "InputSearch", componentId: "sc-2764tg" }) ``;
//# sourceMappingURL=InputSearch.js.map