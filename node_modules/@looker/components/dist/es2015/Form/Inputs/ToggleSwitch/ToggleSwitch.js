var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { rem, rgba } from 'polished';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { palette, pseudoClasses, reset, space, } from '@looker/design-tokens';
export const CustomizableToggleSwitchAttributes = {
    knobOffColor: palette.white,
    knobOnColor: palette.white,
    offColor: palette.charcoal300,
    onColor: palette.purple300,
};
const Knob = styled(({ className }) => React.createElement("div", { className: className })).withConfig({ displayName: "Knob", componentId: "sc-l93e8z" }) `
  transform: ${props => props.on ? `translateX(${rem(props.size * 0.75)})` : ''};
  transition: ${props => props.theme.transitions.durationModerate};
  position: absolute;
  bottom: ${props => rem(props.size * 0.1)};
  left: ${props => rem(props.size * 0.1)};
  width: ${props => rem(props.size * 0.8)};
  height: ${props => rem(props.size * 0.8)};
  border-radius: 50%;
  background: ${props => props.on
    ? CustomizableToggleSwitchAttributes.knobOnColor
    : CustomizableToggleSwitchAttributes.knobOffColor};
`;
const KnobContainer = (_a) => {
    var { className } = _a, props = __rest(_a, ["className"]);
    const hoverStyle = props.disabled
        ? undefined
        : { boxShadow: `0 0 .01rem 0.01rem ${rgba(palette.primary500, 0.5)}` };
    return (React.createElement(KnobContainerBase, { className: className, hoverStyle: hoverStyle, size: props.size, on: props.on },
        React.createElement(Knob, Object.assign({}, props))));
};
const KnobContainerBase = styled(({ children, className }) => (React.createElement("div", { className: className }, children))).withConfig({ displayName: "KnobContainerBase", componentId: "sc-66wsxs" }) `
  ${reset}
  ${pseudoClasses}

  transition: ${props => props.theme.transitions.durationModerate};
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  border-radius: ${props => rem(props.size)};
  background: ${props => props.on
    ? CustomizableToggleSwitchAttributes.onColor
    : CustomizableToggleSwitchAttributes.offColor};
`;
const HiddenCheckbox = styled.input.attrs({ type: 'checkbox' }).withConfig({ displayName: "HiddenCheckbox", componentId: "sc-1oeh1g0" }) `
  opacity: 0;
  width: 100%;
  height: 100%;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
`;
const DisabledKnob = styled.div.withConfig({ displayName: "DisabledKnob", componentId: "sc-1xddtn5" }) `
  ${reset}
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  opacity: 0.4;
  background: ${props => props.theme.colors.palette.charcoal300};
  border-radius: ${props => rem(props.size)};
`;
export const ToggleSwitchComponent = forwardRef((_a, ref) => {
    var { className, disabled, on, size = 20 } = _a, props = __rest(_a, ["className", "disabled", "on", "size"]);
    return (React.createElement("div", { className: className },
        React.createElement(HiddenCheckbox, Object.assign({ checked: on, disabled: disabled, role: "switch", "aria-checked": on, ref: ref }, props)),
        React.createElement(KnobContainer, { size: size, on: on, disabled: disabled }),
        disabled && React.createElement(DisabledKnob, { size: size })));
});
ToggleSwitchComponent.displayName = 'ToggleSwitchComponent';
export const ToggleSwitch = styled(ToggleSwitchComponent).withConfig({ displayName: "ToggleSwitch", componentId: "sc-19bmztc" }) `
  ${reset}
  input {
    cursor: ${props => (!props.disabled ? 'pointer' : undefined)};
    &:focus + div {
      box-shadow: 0 0 0 0.2rem ${rgba(palette.primary500, 0.4)};
    }
  }
  width: ${props => rem((props.size || 20) * 1.75)};
  height: ${props => rem(props.size || 20)};
  display: inline-block;
  position: relative;
  vertical-align: middle;
  ${space}
`;
//# sourceMappingURL=ToggleSwitch.js.map