var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { border, layout, reset, space, typography, } from '@looker/design-tokens';
const renderOptions = (options) => {
    return options.map(option => (React.createElement("option", { key: option.value, value: option.value }, option.label)));
};
const renderOptGroups = (optionGroups) => {
    return optionGroups.map(option => {
        return (React.createElement("optgroup", { key: option.key, label: option.key }, renderOptions(option.options)));
    });
};
export const CustomizableSelectAttributes = {
    borderRadius: 'medium',
    fontSize: 'small',
    height: '28px',
    px: 'xsmall',
    py: 'none',
};
const SelectComponent = forwardRef((_a, ref) => {
    var { includeBlank = true, options, placeholder, defaultValue: propsDefault, value } = _a, props = __rest(_a, ["includeBlank", "options", "placeholder", "defaultValue", "value"]);
    const defaultValue = propsDefault || (value && !props.onChange) ? value : undefined;
    const optionElements = !options || options.length === 0
        ? null
        : Object.prototype.hasOwnProperty.call(options[0], 'key')
            ? renderOptGroups(options)
            : renderOptions(options);
    return (React.createElement(SelectBase, Object.assign({ defaultValue: defaultValue ? defaultValue.toString() : undefined, value: defaultValue ? undefined : value, borderColor: "palette.charcoal300" }, props, { ref: ref }),
        includeBlank && React.createElement("option", { value: "" }, placeholder),
        optionElements));
});
SelectComponent.displayName = 'SelectComponent';
const indicatorRaw = `<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M7.41 8L12 12.58L16.59 8L18 9.41L12 15.41L6 9.41L7.41 8Z" fill="#1C2125"/>
</svg>`;
const indicatorSize = '1rem';
const indicatorPadding = '.25rem';
const indicator = (color) => typeof window !== 'undefined' &&
    window.btoa(indicatorRaw.replace('#1C2125', color));
const SelectBase = styled.select.attrs((props) => ({
    borderRadius: props.borderRadius || CustomizableSelectAttributes.borderRadius,
    fontSize: props.fontSize || CustomizableSelectAttributes.fontSize,
    height: props.py || props.p ? undefined : CustomizableSelectAttributes.height,
    px: props.p || CustomizableSelectAttributes.px,
    py: props.p || CustomizableSelectAttributes.py,
})).withConfig({ displayName: "SelectBase", componentId: "sc-n7e9mo" }) `
  ${reset}
  background-color: ${props => props.validationType === 'error'
    ? props.theme.colors.palette.red000
    : props.theme.colors.palette.white};
  border: solid 1px;

  appearance: none;

  background-image:
    url(data:image/svg+xml;base64,
    ${props => indicator(props.theme.colors.palette.charcoal500)}),
    linear-gradient(to bottom, ${props => props.theme.colors.palette.white} 0%, ${props => props.theme.colors.palette.white} 100%);

  background-repeat: no-repeat, repeat;
  background-position: right ${indicatorPadding} center, 0 0;
  background-size: ${indicatorSize}, 100%;

  &::-ms-expand {
    display: none;
  }
  ${border}
  ${layout}
  ${typography}
  ${space}
  padding-right: calc(2 * ${indicatorPadding} + ${indicatorSize});
`;
export const Select = styled(SelectComponent).withConfig({ displayName: "Select", componentId: "sc-19085z1" }) ``;
//# sourceMappingURL=Select.js.map