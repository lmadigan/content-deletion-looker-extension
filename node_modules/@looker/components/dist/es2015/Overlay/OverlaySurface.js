var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { reset, border, boxShadow, color, fadeIn, } from '@looker/design-tokens';
import React, { forwardRef, useContext, } from 'react';
import { HotKeys } from 'react-hotkeys';
import styled from 'styled-components';
import { ModalContext } from '../Modal';
import { OverlaySurfaceArrow } from './OverlaySurfaceArrow';
export const OverlaySurface = forwardRef((props, ref) => {
    const { arrow, arrowProps, children, eventHandlers, placement, style, zIndex } = props, innerProps = __rest(props, ["arrow", "arrowProps", "children", "eventHandlers", "placement", "style", "zIndex"]);
    const { closeModal } = useContext(ModalContext);
    if (Number.isNaN(arrowProps.style.left)) {
        delete arrowProps.style.left;
    }
    if (Number.isNaN(arrowProps.style.top)) {
        delete arrowProps.style.top;
    }
    return (React.createElement(Outer, Object.assign({ ref: ref, zIndex: zIndex, style: style }, eventHandlers, { tabIndex: -1 }),
        React.createElement(HotKeys, { className: "hotkeys", keyMap: {
                CLOSE_MODAL: {
                    action: 'keyup',
                    name: 'Close Modal',
                    sequence: 'esc',
                },
            }, handlers: {
                CLOSE_MODAL: () => {
                    closeModal && closeModal();
                },
            } },
            React.createElement(Inner, Object.assign({}, innerProps),
                children,
                arrow !== false && (React.createElement(OverlaySurfaceArrow, Object.assign({ "data-placement": placement }, innerProps, arrowProps)))))));
});
OverlaySurface.displayName = 'OverlaySurface';
const Outer = styled.div.withConfig({ displayName: "Outer", componentId: "sc-geiekg" }) `
  ${reset};
  animation: ${fadeIn} 0.2s linear;
  overflow: visible;
  padding: ${props => props.theme.space.xsmall};
  z-index: ${props => props.zIndex};

  &:focus {
    outline: none;
  }

  /* react-hotkeys focus suppression */
  & > div.hotkeys:focus {
    outline: none;
  }
`;
const Inner = styled.div.withConfig({ displayName: "Inner", componentId: "sc-zbtpat" }) `
  ${reset}
  ${border}
  ${boxShadow}
  ${color}
  &:focus {
    outline: none;
  }
`;
//# sourceMappingURL=OverlaySurface.js.map