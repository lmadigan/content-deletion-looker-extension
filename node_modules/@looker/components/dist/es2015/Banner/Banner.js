var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { IconButton } from '../Button';
import { Icon } from '../Icon';
import { Flex } from '../Layout/Flex';
import { VisuallyHidden } from '../VisuallyHidden';
const getBannerIntentStyling = (intent) => {
    const bannerTypeStyling = {};
    switch (intent) {
        case 'warning':
            bannerTypeStyling.bg = 'palette.yellow100';
            bannerTypeStyling.icon = (React.createElement(Icon, { mr: "small", size: 20, name: "Warning", color: "palette.yellow500" }));
            bannerTypeStyling.accessibilityLabel = 'Warning';
            break;
        case 'info':
            bannerTypeStyling.bg = 'palette.blue100';
            bannerTypeStyling.icon = (React.createElement(Icon, { mr: "small", size: 20, name: "CircleInfo", color: "palette.blue400" }));
            bannerTypeStyling.accessibilityLabel = 'Info';
            break;
        case 'error':
            bannerTypeStyling.bg = 'palette.red100';
            bannerTypeStyling.icon = (React.createElement(Icon, { mr: "small", size: 20, name: "Warning", color: "palette.red600" }));
            bannerTypeStyling.accessibilityLabel = 'Error';
            break;
        case 'confirmation':
            bannerTypeStyling.bg = 'palette.green100';
            break;
        default:
            break;
    }
    return bannerTypeStyling;
};
export const Banner = forwardRef((props, ref) => {
    const { children, dismissable, intent = 'warning', onDismiss } = props, typeAndSpaceProps = __rest(props, ["children", "dismissable", "intent", "onDismiss"]);
    const _a = getBannerIntentStyling(intent), { icon, accessibilityLabel } = _a, bannerIntentStyling = __rest(_a, ["icon", "accessibilityLabel"]);
    return (React.createElement(Flex, Object.assign({ ref: ref }, bannerIntentStyling, { borderRadius: "medium", m: "small", py: "xsmall", px: "small", alignItems: "center", "aria-live": "polite", role: "status" }, typeAndSpaceProps),
        icon,
        React.createElement(VisuallyHidden, null, accessibilityLabel),
        React.createElement("div", null, children),
        dismissable && (React.createElement(IconButton, { ml: "auto", style: { padding: '1px' }, onClick: onDismiss, hoverStyle: { background: 'none' }, icon: "Close", size: "small", label: "Dismiss", "aria-hidden": true, color: "neutral" }))));
});
Banner.defaultProps = { intent: 'info' };
Banner.displayName = 'Banner';
//# sourceMappingURL=Banner.js.map