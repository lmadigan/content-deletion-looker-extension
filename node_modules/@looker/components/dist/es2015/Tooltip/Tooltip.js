var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useRef, useState } from 'react';
import { Popper } from 'react-popper';
import { ModalContext } from '../Modal';
import { OverlaySurface } from '../Overlay/OverlaySurface';
import { Paragraph } from '../Text';
export const CustomizableTooltipAttributes = {};
export function useTooltip(_a) {
    var { arrow = true, canClose, content, isOpen: initializeOpen = false, maxWidth = '16rem', width = 'auto', textAlign = 'center', disabled, surfaceStyles } = _a, props = __rest(_a, ["arrow", "canClose", "content", "isOpen", "maxWidth", "width", "textAlign", "disabled", "surfaceStyles"]);
    const [isOpen, setIsOpen] = useState(initializeOpen);
    const surfaceRef = useRef(null);
    const newTriggerRef = useRef(null);
    const triggerRef = props.triggerRef || newTriggerRef;
    const handleOpen = () => setIsOpen(true);
    const handleClose = () => {
        if (canClose && !canClose())
            return;
        setIsOpen(false);
    };
    const handleMouseOut = (event) => {
        if (!isOpen)
            return;
        const related = event.relatedTarget;
        if (triggerRef.current &&
            (triggerRef.current === related ||
                triggerRef.current.contains(related))) {
            return;
        }
        if (surfaceRef.current &&
            (surfaceRef.current === related ||
                surfaceRef.current.contains(related))) {
            return;
        }
        handleClose();
    };
    const eventHandlers = {
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseOut: handleMouseOut,
        onMouseOver: handleOpen,
    };
    const setSurfaceRef = (ref) => {
        surfaceRef.current = ref;
    };
    const referenceElement = triggerRef && triggerRef.current ? triggerRef.current : undefined;
    const contentFormatted = (React.createElement(Paragraph, { style: { hyphens: 'auto', overflowWrap: 'anywhere' }, fontSize: "xsmall", maxWidth: maxWidth, width: width, p: "xsmall", m: "none", textAlign: textAlign }, content));
    const popper = isOpen && content && !disabled ? (React.createElement(ModalContext.Provider, { value: { closeModal: handleClose } },
        React.createElement(Popper, { positionFixed: true, innerRef: setSurfaceRef, placement: props.placement, modifiers: {
                flip: {
                    behavior: 'flip',
                    enabled: true,
                    flipVariations: true,
                    flipVariationsByContent: true,
                },
                preventOverflow: {
                    padding: 0,
                },
            }, referenceElement: referenceElement }, ({ ref, style, placement, arrowProps }) => (React.createElement(OverlaySurface, Object.assign({ arrow: arrow, arrowProps: arrowProps, eventHandlers: { onMouseOut: handleMouseOut }, placement: placement, ref: ref, style: style, zIndex: CustomizableTooltipAttributes.zIndex, backgroundColor: "palette.charcoal600", borderRadius: "medium", boxShadow: 3, color: "palette.charcoal000" }, surfaceStyles), contentFormatted))))) : null;
    return {
        eventHandlers,
        ref: triggerRef,
        tooltip: popper,
    };
}
export const Tooltip = (_a) => {
    var { children } = _a, props = __rest(_a, ["children"]);
    const { eventHandlers, tooltip, ref } = useTooltip(props);
    return (React.createElement(React.Fragment, null,
        tooltip,
        children(eventHandlers, ref)));
};
//# sourceMappingURL=Tooltip.js.map