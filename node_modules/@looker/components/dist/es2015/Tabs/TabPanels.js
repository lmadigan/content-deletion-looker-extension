var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Children, cloneElement } from 'react';
import styled from 'styled-components';
import { space, reset } from '@looker/design-tokens';
import omit from 'lodash/omit';
export const TabPanels = (_a) => {
    var { children, selectedIndex } = _a, props = __rest(_a, ["children", "selectedIndex"]);
    const spaceProps = omit(props, 'onSelectTab');
    const clonedChildren = Children.map(children, (child, index) => {
        return cloneElement(child, {
            selected: index === selectedIndex,
        });
    });
    return React.createElement(Layout, Object.assign({}, spaceProps), clonedChildren);
};
const Layout = styled.div.withConfig({ displayName: "Layout", componentId: "sc-1lfagam" }) `
  ${reset}
  ${space}
`;
Layout.defaultProps = { pt: 'large' };
//# sourceMappingURL=TabPanels.js.map