"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var Tooltip_1 = require("../Tooltip");
function wrapCallback(cbParent, cbChild) {
    return function (e) {
        cbParent(e);
        cbChild && cbChild(e);
    };
}
exports.MenuDisclosure = function (_a) {
    var children = _a.children, disabled = _a.disabled, isOpen = _a.isOpen, setOpen = _a.setOpen, tooltip = _a.tooltip, tooltipPlacement = _a.tooltipPlacement, triggerRef = _a.triggerRef;
    var _b = Tooltip_1.useTooltip({
        content: tooltip,
        disabled: isOpen,
        placement: tooltipPlacement || 'top',
        triggerRef: triggerRef,
    }), eventHandlers = _b.eventHandlers, renderedTooltip = _b.tooltip, ref = _b.ref;
    var handleClick = function () { return setOpen && setOpen(!isOpen); };
    var allCallbacks = __assign(__assign({}, eventHandlers), { onClick: handleClick });
    var cloned = react_1.Children.map(children, function (child) {
        var childProps = child.props;
        var wrappedCallbacks = {};
        Object.keys(allCallbacks).forEach(function (cbName) {
            var cbParent = Reflect.get(allCallbacks, cbName);
            wrappedCallbacks[cbName] = wrapCallback(cbParent, childProps[cbName]);
        });
        return react_1.cloneElement(child, __assign(__assign({}, wrappedCallbacks), { disabled: disabled,
            ref: ref }));
    });
    return (react_1.default.createElement(react_1.default.Fragment, null,
        renderedTooltip,
        cloned));
};
//# sourceMappingURL=MenuDisclosure.js.map