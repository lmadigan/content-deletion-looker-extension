"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var styled_components_1 = __importDefault(require("styled-components"));
var d3_hsv_1 = require("d3-hsv");
var canvas_utils_1 = require("./canvas_utils");
var color_wheel_utils_1 = require("./color_wheel_utils");
var math_utils_1 = require("./math_utils");
var ColorWheel = (function (_super) {
    __extends(ColorWheel, _super);
    function ColorWheel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMouseDragging = false;
        _this.setColorWheelCanvasRef = function (element) {
            _this.colorWheelCanvas = element;
        };
        _this.setValueCanvasRef = function (element) {
            _this.valueCanvas = element;
        };
        _this.setCompositeCanvasRef = function (element) {
            _this.compositeCanvas = element;
        };
        _this.setMarkerCanvasRef = function (element) {
            _this.markerCanvas = element;
        };
        _this.mouseDown = function (event) {
            _this.setMouseDragging(true);
            var canvasCartesian = canvas_utils_1.eventCartesianPosition(_this.colorWheelCanvas, event);
            var position = math_utils_1.limitByRadius(math_utils_1.translateDiagonal(-canvas_utils_1.canvasMargin, canvasCartesian), _this.radius);
            _this.updateColor(position, _this.props.onColorChange);
        };
        _this.mouseMove = function (event) {
            if (_this.isMouseDragging) {
                var canvasCartesian = canvas_utils_1.eventCartesianPosition(_this.colorWheelCanvas, event);
                var position = math_utils_1.limitByRadius(math_utils_1.translateDiagonal(-canvas_utils_1.canvasMargin, canvasCartesian), _this.radius);
                _this.updateColor(position, _this.props.onColorChange);
            }
        };
        _this.setMouseDragging = function (isDragging) {
            _this.isMouseDragging = isDragging;
        };
        _this.drawValueLayer = function () {
            canvas_utils_1.clearCanvas(_this.valueCanvas);
            var ctx = _this.valueCanvas.getContext('2d');
            var centerX = _this.valueCanvas.width / 2;
            var centerY = _this.valueCanvas.height / 2;
            if (ctx) {
                var _a = d3_hsv_1.hsv(0, 0, _this.props.value).rgb(), r = _a.r, g = _a.g, b = _a.b;
                ctx.beginPath();
                ctx.arc(centerX, centerY, _this.radius, 0, 2 * Math.PI, false);
                ctx.fillStyle = "rgb(" + r + "," + g + "," + b + ")";
                ctx.fill();
                ctx.lineWidth = 3;
                ctx.strokeStyle = '#ffffff';
                ctx.stroke();
            }
        };
        _this.drawCompositeCanvas = function () {
            canvas_utils_1.clearCanvas(_this.compositeCanvas);
            var ctx = _this.compositeCanvas.getContext('2d');
            if (ctx) {
                ctx.globalCompositeOperation = 'multiply';
                ctx.drawImage(_this.colorWheelCanvas, 0, 0);
                ctx.drawImage(_this.valueCanvas, 0, 0);
            }
        };
        return _this;
    }
    ColorWheel.prototype.componentDidMount = function () {
        this.drawWheel();
        this.drawValueLayer();
        this.drawCompositeCanvas();
        this.drawMouseMarker();
    };
    ColorWheel.prototype.componentDidUpdate = function () {
        this.drawValueLayer();
        this.drawCompositeCanvas();
        this.drawMouseMarker();
    };
    ColorWheel.prototype.render = function () {
        return (react_1.default.createElement(ColorWheelWrapper, { size: this.props.size },
            react_1.default.createElement(Canvas, { ref: this.setColorWheelCanvasRef, width: this.props.size, height: this.props.size }),
            react_1.default.createElement(Canvas, { ref: this.setValueCanvasRef, width: this.props.size, height: this.props.size }),
            react_1.default.createElement(Canvas, { ref: this.setCompositeCanvasRef, width: this.props.size, height: this.props.size }),
            react_1.default.createElement(Canvas, { "data-testid": "mouse-marker", ref: this.setMarkerCanvasRef, width: this.props.size, height: this.props.size, onMouseDown: this.mouseDown, onMouseMove: this.mouseMove, onMouseUp: this.setMouseDragging.bind(this, false), onMouseLeave: this.setMouseDragging.bind(this, false) })));
    };
    Object.defineProperty(ColorWheel.prototype, "radius", {
        get: function () {
            return this.colorWheelCanvas
                ? canvas_utils_1.canvasRadius(this.colorWheelCanvas, canvas_utils_1.canvasMargin)
                : 0;
        },
        enumerable: true,
        configurable: true
    });
    ColorWheel.prototype.drawWheel = function () {
        var ctx = this.colorWheelCanvas.getContext('2d');
        if (!ctx)
            return;
        var image = this.getColorWheelImage();
        if (image) {
            ctx.putImageData(image, canvas_utils_1.canvasMargin, canvas_utils_1.canvasMargin);
        }
        ctx.beginPath();
        ctx.arc(this.colorWheelCanvas.width / 2, this.colorWheelCanvas.width / 2, this.radius, 0, 2 * Math.PI, false);
        ctx.lineWidth = 3;
        ctx.strokeStyle = '#ffffff';
        ctx.stroke();
    };
    ColorWheel.prototype.getColorWheelImage = function () {
        var ctx = this.colorWheelCanvas.getContext('2d');
        if (!this.colorWheelImage && ctx) {
            var colorValue = 1;
            this.colorWheelImage = ctx.createImageData(math_utils_1.diameter(this.radius), math_utils_1.diameter(this.radius));
            canvas_utils_1.drawColorWheelIntoCanvasImage(this.colorWheelImage.data, color_wheel_utils_1.generateColorWheel(this.radius, colorValue));
        }
        return this.colorWheelImage;
    };
    ColorWheel.prototype.drawMouseMarker = function () {
        canvas_utils_1.clearCanvas(this.markerCanvas);
        var canvasCartesian = color_wheel_utils_1.hsv2cartesian(this.radius, {
            h: this.props.hue,
            s: this.props.saturation,
            v: this.props.value,
        });
        var mousePosition = math_utils_1.translateDiagonal(canvas_utils_1.canvasMargin, canvasCartesian);
        var ctx = this.markerCanvas.getContext('2d');
        if (ctx && mousePosition) {
            var mouseRadius = 4;
            ctx.beginPath();
            ctx.arc(mousePosition.x, mousePosition.y, mouseRadius, 0, 2 * Math.PI, false);
            ctx.lineWidth = 3;
            ctx.strokeStyle = '#FFFFFF';
            ctx.stroke();
            ctx.beginPath();
            ctx.arc(mousePosition.x, mousePosition.y, mouseRadius - 1, 0, 2 * Math.PI, false);
            ctx.lineWidth = 2;
            ctx.strokeStyle = '#000000';
            ctx.stroke();
        }
    };
    ColorWheel.prototype.updateColor = function (position, callback) {
        if (callback && position) {
            var color = color_wheel_utils_1.cartesian2hsv(this.props.value, this.radius, position);
            var updateColorValues = { h: color.h, s: color.s };
            callback(updateColorValues);
        }
    };
    ColorWheel.defaultProps = {
        hue: 0,
        saturation: 1,
        size: 100,
        value: 1,
    };
    return ColorWheel;
}(react_1.Component));
exports.ColorWheel = ColorWheel;
var ColorWheelWrapper = styled_components_1.default.div.withConfig({ displayName: "ColorWheelWrapper", componentId: "sc-a42q5" })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  position: relative;\n  width: ", "px;\n  height: ", "px;\n"], ["\n  position: relative;\n  width: ", "px;\n  height: ", "px;\n"])), function (_a) {
    var size = _a.size;
    return size;
}, function (_a) {
    var size = _a.size;
    return size;
});
var Canvas = styled_components_1.default.canvas.withConfig({ displayName: "Canvas", componentId: "sc-xapbr" })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  position: absolute;\n  left: 0;\n  top: 0;\n"], ["\n  position: absolute;\n  left: 0;\n  top: 0;\n"])));
var templateObject_1, templateObject_2;
//# sourceMappingURL=ColorWheel.js.map