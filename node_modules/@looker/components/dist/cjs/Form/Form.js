"use strict";
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var styled_components_1 = __importDefault(require("styled-components"));
var omit_1 = __importDefault(require("lodash/omit"));
var design_tokens_1 = require("@looker/design-tokens");
exports.FormContext = react_1.createContext({});
var FormBase = styled_components_1.default.form.withConfig({ displayName: "FormBase", componentId: "sc-1jzpsxe" })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n"], ["\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n"])), design_tokens_1.reset, design_tokens_1.border, design_tokens_1.flexbox, design_tokens_1.layout, design_tokens_1.space);
exports.Form = react_1.forwardRef(function (props, ref) { return (react_1.default.createElement(exports.FormContext.Provider, { value: {
        validationMessages: props.validationMessages,
    } },
    react_1.default.createElement(FormBase, __assign({}, omit_1.default(props, 'validationMessages'), { ref: ref })))); });
exports.Form.displayName = 'Form';
function useFormContext(_a) {
    var name = _a.name, validationMessage = _a.validationMessage;
    var context = react_1.useContext(exports.FormContext);
    var vMessage;
    if (context.validationMessages && name) {
        vMessage = context.validationMessages[name];
    }
    else if (validationMessage) {
        vMessage = validationMessage;
    }
    return vMessage;
}
exports.useFormContext = useFormContext;
var templateObject_1;
//# sourceMappingURL=Form.js.map