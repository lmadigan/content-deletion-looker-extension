"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var react_popper_1 = require("react-popper");
var Modal_1 = require("../Modal");
var OverlaySurface_1 = require("../Overlay/OverlaySurface");
var Text_1 = require("../Text");
exports.CustomizableTooltipAttributes = {};
function useTooltip(_a) {
    var _b = _a.arrow, arrow = _b === void 0 ? true : _b, canClose = _a.canClose, content = _a.content, _c = _a.isOpen, initializeOpen = _c === void 0 ? false : _c, _d = _a.maxWidth, maxWidth = _d === void 0 ? '16rem' : _d, _e = _a.width, width = _e === void 0 ? 'auto' : _e, _f = _a.textAlign, textAlign = _f === void 0 ? 'center' : _f, disabled = _a.disabled, surfaceStyles = _a.surfaceStyles, props = __rest(_a, ["arrow", "canClose", "content", "isOpen", "maxWidth", "width", "textAlign", "disabled", "surfaceStyles"]);
    var _g = react_1.useState(initializeOpen), isOpen = _g[0], setIsOpen = _g[1];
    var surfaceRef = react_1.useRef(null);
    var newTriggerRef = react_1.useRef(null);
    var triggerRef = props.triggerRef || newTriggerRef;
    var handleOpen = function () { return setIsOpen(true); };
    var handleClose = function () {
        if (canClose && !canClose())
            return;
        setIsOpen(false);
    };
    var handleMouseOut = function (event) {
        if (!isOpen)
            return;
        var related = event.relatedTarget;
        if (triggerRef.current &&
            (triggerRef.current === related ||
                triggerRef.current.contains(related))) {
            return;
        }
        if (surfaceRef.current &&
            (surfaceRef.current === related ||
                surfaceRef.current.contains(related))) {
            return;
        }
        handleClose();
    };
    var eventHandlers = {
        onBlur: handleClose,
        onFocus: handleOpen,
        onMouseOut: handleMouseOut,
        onMouseOver: handleOpen,
    };
    var setSurfaceRef = function (ref) {
        surfaceRef.current = ref;
    };
    var referenceElement = triggerRef && triggerRef.current ? triggerRef.current : undefined;
    var contentFormatted = (react_1.default.createElement(Text_1.Paragraph, { style: { hyphens: 'auto', overflowWrap: 'anywhere' }, fontSize: "xsmall", maxWidth: maxWidth, width: width, p: "xsmall", m: "none", textAlign: textAlign }, content));
    var popper = isOpen && content && !disabled ? (react_1.default.createElement(Modal_1.ModalContext.Provider, { value: { closeModal: handleClose } },
        react_1.default.createElement(react_popper_1.Popper, { positionFixed: true, innerRef: setSurfaceRef, placement: props.placement, modifiers: {
                flip: {
                    behavior: 'flip',
                    enabled: true,
                    flipVariations: true,
                    flipVariationsByContent: true,
                },
                preventOverflow: {
                    padding: 0,
                },
            }, referenceElement: referenceElement }, function (_a) {
            var ref = _a.ref, style = _a.style, placement = _a.placement, arrowProps = _a.arrowProps;
            return (react_1.default.createElement(OverlaySurface_1.OverlaySurface, __assign({ arrow: arrow, arrowProps: arrowProps, eventHandlers: { onMouseOut: handleMouseOut }, placement: placement, ref: ref, style: style, zIndex: exports.CustomizableTooltipAttributes.zIndex, backgroundColor: "palette.charcoal600", borderRadius: "medium", boxShadow: 3, color: "palette.charcoal000" }, surfaceStyles), contentFormatted));
        }))) : null;
    return {
        eventHandlers: eventHandlers,
        ref: triggerRef,
        tooltip: popper,
    };
}
exports.useTooltip = useTooltip;
exports.Tooltip = function (_a) {
    var children = _a.children, props = __rest(_a, ["children"]);
    var _b = useTooltip(props), eventHandlers = _b.eventHandlers, tooltip = _b.tooltip, ref = _b.ref;
    return (react_1.default.createElement(react_1.default.Fragment, null,
        tooltip,
        children(eventHandlers, ref)));
};
//# sourceMappingURL=Tooltip.js.map