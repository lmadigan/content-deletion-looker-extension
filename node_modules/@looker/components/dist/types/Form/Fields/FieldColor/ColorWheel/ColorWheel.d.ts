import React, { Component } from 'react';
import { HueSaturation } from './color_wheel_utils';
declare type UpdateHueSaturationCallbackType = (color: HueSaturation) => void;
interface ColorWheelProps {
    hue: number;
    saturation: number;
    value: number;
    size: number;
    onColorChange?: UpdateHueSaturationCallbackType;
}
export declare class ColorWheel extends Component<ColorWheelProps> {
    static defaultProps: {
        hue: number;
        saturation: number;
        size: number;
        value: number;
    };
    private isMouseDragging;
    private colorWheelImage?;
    private colorWheelCanvas;
    private valueCanvas;
    private compositeCanvas;
    private markerCanvas;
    componentDidMount(): void;
    componentDidUpdate(): void;
    setColorWheelCanvasRef: (element: HTMLCanvasElement) => void;
    setValueCanvasRef: (element: HTMLCanvasElement) => void;
    setCompositeCanvasRef: (element: HTMLCanvasElement) => void;
    setMarkerCanvasRef: (element: HTMLCanvasElement) => void;
    render(): JSX.Element;
    mouseDown: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void;
    mouseMove: (event: React.MouseEvent<HTMLCanvasElement, MouseEvent>) => void;
    setMouseDragging: (isDragging: boolean) => void;
    get radius(): number;
    private drawValueLayer;
    private drawCompositeCanvas;
    private drawWheel;
    private getColorWheelImage;
    private drawMouseMarker;
    private updateColor;
}
export {};
