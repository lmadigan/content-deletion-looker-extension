import { Placement } from 'popper.js';
import React, { ReactNode, RefObject, SyntheticEvent } from 'react';
export interface UsePopoverProps {
    arrow?: boolean;
    isOpen?: boolean;
    onClose?: () => void;
    placement?: Placement;
    content: ReactNode;
    canClose?: () => boolean;
    portalRef?: RefObject<HTMLDivElement>;
    groupedPopoversRef?: RefObject<HTMLElement>;
    pin?: boolean;
    hoverDisclosureRef?: RefObject<HTMLElement>;
    setOpen?: (open: boolean) => void;
    triggerRef?: RefObject<HTMLElement>;
}
export interface PopoverProps extends UsePopoverProps {
    children: (onClick: (event: SyntheticEvent) => void, ref: RefObject<any>, className?: string) => JSX.Element;
}
export declare function usePopover({ arrow, canClose, content, groupedPopoversRef, pin, isOpen: controlledIsOpen, onClose, placement: propsPlacement, hoverDisclosureRef, setOpen: controlledSetOpen, ...props }: UsePopoverProps): {
    className: string | undefined;
    open: (event: React.SyntheticEvent<Element, Event>) => void;
    popover: false | JSX.Element;
    ref: React.RefObject<HTMLElement>;
    triggerShown: boolean;
};
export declare function Popover({ children, ...props }: PopoverProps): JSX.Element;
