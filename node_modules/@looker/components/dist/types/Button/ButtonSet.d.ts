import React, { ChangeEvent, ForwardRefExoticComponent, ReactNode, Ref } from 'react';
import { CompatibleHTMLProps, BorderProps, PositionProps, SpaceProps } from '@looker/design-tokens';
export interface ButtonGroupOrToggleProps<ValueType extends string | string[] = string[]> extends PositionProps, BorderProps, SpaceProps, Omit<CompatibleHTMLProps<HTMLDivElement>, 'value' | 'onChange'> {
    isControlled?: boolean;
    children: ReactNode;
    value?: ValueType;
    onChange?: (value: ValueType) => void;
}
interface ButtonSetProps<ValueType extends string | string[] = string[]> extends Omit<ButtonGroupOrToggleProps<ValueType>, 'onChange'> {
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
    isToggle?: boolean;
}
export declare type ButtonSetType<T extends string | string[] = string[]> = ForwardRefExoticComponent<ButtonSetProps<T> & {
    ref: Ref<HTMLDivElement>;
}>;
export declare const ButtonSet: React.ForwardRefExoticComponent<ButtonSetProps<string[]> & React.RefAttributes<HTMLDivElement>>;
export {};
