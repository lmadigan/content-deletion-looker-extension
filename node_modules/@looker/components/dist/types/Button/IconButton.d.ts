import { CompatibleHTMLProps, PseudoProps, SemanticColors, SpaceProps, SizeLarge, SizeMedium, SizeSmall, SizeXSmall, SizeXXSmall } from '@looker/design-tokens';
import { IconNames } from '@looker/icons';
import React from 'react';
import { ButtonBaseProps } from './ButtonBase';
import { IconButtonVariantProps } from './variant';
export declare type IconButtonSizes = SizeXXSmall | SizeXSmall | SizeSmall | SizeMedium | SizeLarge;
declare type ButtonColors = keyof SemanticColors;
export interface IconButtonProps extends Omit<CompatibleHTMLProps<HTMLButtonElement>, 'children' | 'type'>, ButtonBaseProps, IconButtonVariantProps, PseudoProps, SpaceProps {
    type?: 'button' | 'submit' | 'reset';
    color?: ButtonColors;
    focusVisible?: boolean;
    outline?: boolean;
    icon: IconNames;
    label: string;
    size?: IconButtonSizes;
    shape?: 'round' | 'square';
}
export declare const IconButtonStyle: import("styled-components").StyledComponent<"button", any, IconButtonProps, never>;
export declare const IconButton: import("styled-components").StyledComponent<React.ForwardRefExoticComponent<IconButtonProps & React.RefAttributes<HTMLButtonElement>>, any, IconButtonProps, never>;
export {};
