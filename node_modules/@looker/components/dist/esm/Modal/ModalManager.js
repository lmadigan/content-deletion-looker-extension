var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { Component, createRef, } from 'react';
var ModalManager = (function (_super) {
    __extends(ModalManager, _super);
    function ModalManager(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { isOpen: false };
        _this.triggerRef = createRef();
        _this.portalRef = createRef();
        _this.close = _this.close.bind(_this);
        _this.open = _this.open.bind(_this);
        return _this;
    }
    ModalManager.prototype.componentDidMount = function () {
        if (this.props.isOpen)
            this.open();
    };
    ModalManager.prototype.render = function () {
        var _a = this.props, content = _a.content, children = _a.children, otherProps = __rest(_a, ["content", "children"]);
        var modalProps = __assign(__assign({}, otherProps), { portalRef: this.portalRef });
        return (React.createElement(React.Fragment, null,
            this.renderModal(content, modalProps),
            children(this.open, this.triggerRef)));
    };
    ModalManager.prototype.open = function (event) {
        if (event && this.props.stopPropagation) {
            event.stopPropagation();
            var nativeEvent = event.nativeEvent;
            nativeEvent.preventDefault && nativeEvent.preventDefault();
            nativeEvent.stopImmediatePropagation &&
                nativeEvent.stopImmediatePropagation();
        }
        this.setState({ isOpen: true });
    };
    ModalManager.prototype.close = function () {
        if (this.props.canClose && !this.props.canClose())
            return;
        this.setState({ isOpen: false });
    };
    return ModalManager;
}(Component));
export { ModalManager };
//# sourceMappingURL=ModalManager.js.map