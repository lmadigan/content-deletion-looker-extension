var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useCallback } from 'react';
import { Button, ButtonTransparent } from '../../Button';
import { Heading } from '../../Text/Heading';
import { Paragraph } from '../../Text';
import { ModalContent, ModalFooter, ModalHeader } from '../Layout';
import { Dialog } from './Dialog';
export var ConfirmationDialog = function (_a) {
    var _b = _a.cancelLabel, cancelLabel = _b === void 0 ? 'Cancel' : _b, close = _a.close, _c = _a.confirmLabel, confirmLabel = _c === void 0 ? 'Confirm' : _c, _d = _a.buttonColor, buttonColor = _d === void 0 ? 'primary' : _d, _e = _a.isOpen, isOpen = _e === void 0 ? false : _e, message = _a.message, onCancel = _a.onCancel, onConfirm = _a.onConfirm, title = _a.title, props = __rest(_a, ["cancelLabel", "close", "confirmLabel", "buttonColor", "isOpen", "message", "onCancel", "onConfirm", "title"]);
    var confirm = useCallback(function () {
        onConfirm(close);
    }, [close, onConfirm]);
    var cancel = useCallback(function () {
        if (onCancel) {
            onCancel(close);
        }
        else {
            close();
        }
    }, [close, onCancel]);
    return (React.createElement(Dialog, __assign({ isOpen: isOpen, onClose: cancel }, props),
        React.createElement(ModalHeader, null,
            React.createElement(Heading, null, title)),
        message && (React.createElement(ModalContent, null,
            React.createElement(Paragraph, null, message))),
        React.createElement(ModalFooter, null,
            React.createElement(Button, { onClick: confirm, color: buttonColor }, confirmLabel),
            React.createElement(ButtonTransparent, { onClick: cancel }, cancelLabel))));
};
//# sourceMappingURL=ConfirmationDialog.js.map