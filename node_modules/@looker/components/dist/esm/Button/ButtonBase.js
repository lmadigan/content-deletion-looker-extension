var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { radii, reset, space, } from '@looker/design-tokens';
import { rgba } from 'polished';
import React, { forwardRef, useState } from 'react';
import styled, { css } from 'styled-components';
import { minWidth, maxWidth, width, } from 'styled-system';
import { buttonSize } from './size';
import { ButtonIcon, buttonIcon } from './icon';
export var CustomizableButtonAttributes = {
    borderRadius: 'medium',
};
export var buttonCSS = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  ", "\n  ", "\n  ", "\n\n  ", "\n\n  align-items: center;\n  border-radius: ", ";\n  cursor: pointer;\n  display: inline-flex;\n  font-weight: 600;\n  justify-content: center;\n  outline: none;\n  transition: border 80ms;\n  vertical-align: middle;\n  white-space: nowrap;\n\n  &[disabled] {\n    cursor: default;\n    filter: grayscale(0.3);\n    opacity: 0.25;\n  }\n\n  ", "\n  ", "\n"], ["\n  ", "\n  ", "\n  ", "\n  ", "\n\n  ",
    "\n\n  align-items: center;\n  border-radius: ", ";\n  cursor: pointer;\n  display: inline-flex;\n  font-weight: 600;\n  justify-content: center;\n  outline: none;\n  transition: border 80ms;\n  vertical-align: middle;\n  white-space: nowrap;\n\n  &[disabled] {\n    cursor: default;\n    filter: grayscale(0.3);\n    opacity: 0.25;\n  }\n\n  ", "\n  ", "\n"])), reset, maxWidth, minWidth, width, function (props) {
    return props.focusVisible &&
        "\n    box-shadow: 0 0 0 0.15rem\n      " + rgba(props.theme.colors.semanticColors[props.color || 'primary'].main, 0.25) + ";\n  ";
}, radii[CustomizableButtonAttributes.borderRadius], buttonSize, space);
var ButtonOuter = styled.button.withConfig({ displayName: "ButtonOuter", componentId: "sc-wugisi" })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), buttonCSS);
var ButtonJSX = forwardRef(function (props, ref) {
    var children = props.children, iconBefore = props.iconBefore, iconAfter = props.iconAfter, onBlur = props.onBlur, onKeyDown = props.onKeyDown, restProps = __rest(props, ["children", "iconBefore", "iconAfter", "onBlur", "onKeyDown"]);
    var _a = useState(false), isFocusVisible = _a[0], setFocusVisible = _a[1];
    var handleOnKeyUp = function (event) {
        setFocusVisible(true);
        onKeyDown && onKeyDown(event);
    };
    var handleOnBlur = function (event) {
        setFocusVisible(false);
        onBlur && onBlur(event);
    };
    return (React.createElement(ButtonOuter, __assign({ focusVisible: isFocusVisible, onKeyUp: handleOnKeyUp, onBlur: handleOnBlur }, restProps, { ref: ref }),
        iconBefore && React.createElement(ButtonIcon, { name: iconBefore }),
        children,
        iconAfter && React.createElement(ButtonIcon, { name: iconAfter })));
});
ButtonJSX.displayName = 'ButtonJSX';
export var ButtonBase = styled(ButtonJSX).withConfig({ displayName: "ButtonBase", componentId: "sc-18wmtoc" })(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), buttonIcon);
ButtonBase.defaultProps = { size: 'medium' };
var templateObject_1, templateObject_2, templateObject_3;
//# sourceMappingURL=ButtonBase.js.map