var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { cloneElement, Children, forwardRef, isValidElement, } from 'react';
import { Box } from '../Layout';
export var ButtonSet = forwardRef(function (_a, ref) {
    var children = _a.children, disabled = _a.disabled, isToggle = _a.isToggle, name = _a.name, groupOnChange = _a.onChange, value = _a.value, props = __rest(_a, ["children", "disabled", "isToggle", "name", "onChange", "value"]);
    var clonedChildren = Children.map(children, function (child) {
        if (!isValidElement(child))
            return child;
        var childProps = child.props;
        var childValue = childProps.value ||
            (typeof childProps.children === 'string' ? childProps.children : null);
        return cloneElement(child, __assign(__assign(__assign({ isControlled: groupOnChange !== undefined, name: name, type: isToggle ? 'radio' : 'checkbox', value: childValue }, (value && value.length !== 0
            ? {
                selected: isToggle
                    ? value === childValue
                    : value.indexOf(childValue) > -1,
            }
            : { selected: childProps.selected })), (disabled ? { disabled: disabled } : {})), (groupOnChange
            ? {
                onChange: function (e) {
                    groupOnChange && groupOnChange(e);
                    childProps.onChange && childProps.onChange(e);
                },
            }
            : {})));
    });
    return (React.createElement(Box, __assign({ alignItems: "center", display: "inline-flex", textAlign: "center", fontSize: "small", ref: ref }, props), clonedChildren));
});
ButtonSet.displayName = 'ButtonSet';
//# sourceMappingURL=ButtonSet.js.map