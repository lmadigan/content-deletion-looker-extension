var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import uniqueId from 'lodash/uniqueId';
import xor from 'lodash/xor';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { useControlWarn } from '../utils';
import { ButtonItem, ButtonItemLabel } from './ButtonItem';
import { ButtonSet } from './ButtonSet';
var ButtonGroupFactory = forwardRef(function (_a, ref) {
    var onChange = _a.onChange, value = _a.value, props = __rest(_a, ["onChange", "value"]);
    var isControlled = useControlWarn({
        controllingProps: ['onChange', 'value'],
        isControlledCheck: function () { return onChange !== undefined; },
        name: 'ButtonGroup',
    });
    function handleChange(e) {
        var newValue = xor(value, [e.target.value]);
        onChange && onChange(newValue);
    }
    return (React.createElement(ButtonSet, __assign({}, props, { ref: ref }, (isControlled
        ? {
            onChange: handleChange,
            value: value,
        }
        : { name: props.name || uniqueId() }))));
});
export var ButtonGroup = styled(ButtonGroupFactory).withConfig({ displayName: "ButtonGroup", componentId: "sc-chg3ap" })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", " {\n    height: 36px;\n    border-radius: 4px;\n\n    + ", " {\n      margin-left: ", ";\n    }\n  }\n\n  ", " {\n    border-style: solid;\n    border-width: 1px;\n  }\n"], ["\n  ", " {\n    height: 36px;\n    border-radius: 4px;\n\n    + ", " {\n      margin-left: ", ";\n    }\n  }\n\n  ", " {\n    border-style: solid;\n    border-width: 1px;\n  }\n"])), ButtonItem, ButtonItem, function (props) { return props.theme.space.xxsmall; }, ButtonItemLabel);
var templateObject_1;
//# sourceMappingURL=ButtonGroup.js.map