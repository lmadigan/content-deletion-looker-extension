var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
import merge from 'lodash/merge';
import React, { Children, cloneElement, useRef, forwardRef, } from 'react';
import { HotKeys } from 'react-hotkeys';
import styled, { css } from 'styled-components';
import { height, minHeight, maxHeight, width, minWidth, maxWidth, } from 'styled-system';
import { reset } from '@looker/design-tokens';
import { usePopover } from '../Popover';
import { MenuGroup } from './MenuGroup';
import { moveFocus } from './moveFocus';
export function cloneMenuListChildren(children, _a) {
    var parentCustomizations = _a.customizationProps, compact = _a.compact;
    return Children.map(children, function (child) {
        if (!child || typeof child.type === 'string')
            return child;
        var childCustomizations = child.props.customizationProps;
        var customizationProps = parentCustomizations || childCustomizations;
        if (childCustomizations && parentCustomizations) {
            customizationProps = merge({}, parentCustomizations, childCustomizations);
        }
        return cloneElement(child, { compact: compact, customizationProps: customizationProps });
    });
}
export var MenuListInternal = forwardRef(function (props, ref) {
    var children = props.children, className = props.className, compact = props.compact, customizationProps = props.customizationProps, disabled = props.disabled, isOpen = props.isOpen, pin = props.pin, placement = props.placement, setOpen = props.setOpen, triggerRef = props.triggerRef;
    var innerRef = useRef(null);
    var clonedChildren = cloneMenuListChildren(children, {
        compact: compact,
        customizationProps: customizationProps,
    });
    var menuList = (React.createElement(HotKeys, { innerRef: innerRef, keyMap: { MOVE_DOWN: 'down', MOVE_UP: 'up' }, handlers: {
            MOVE_DOWN: function () { return moveFocus(1, 0, innerRef); },
            MOVE_UP: function () { return moveFocus(-1, -1, innerRef); },
        } },
        React.createElement("ul", { className: className, ref: ref, tabIndex: -1, role: "menu" }, clonedChildren)));
    var isMenu = isOpen !== undefined;
    var popover = usePopover({
        content: menuList,
        isOpen: isOpen,
        pin: pin,
        placement: placement,
        setOpen: setOpen,
        triggerRef: triggerRef,
    }).popover;
    if (disabled)
        return null;
    if (isMenu)
        return popover || null;
    return menuList;
});
var dividersStyle = css(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", " ~ ", " { /* stylelint-disable-line */\n    border-top: 1px solid ", ";\n  }\n"], ["\n  ", " ~ ", " { /* stylelint-disable-line */\n    border-top: 1px solid ", ";\n  }\n"])), MenuGroup, MenuGroup, function (props) { return props.theme.colors.palette.charcoal200; });
export var MenuList = styled(MenuListInternal).withConfig({ displayName: "MenuList", componentId: "sc-cfvd7z" })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  ", "\n\n  ", "\n  ", "\n  ", "\n\n  ", "\n  ", "\n  ", "\n\n  overflow: auto;\n\n  list-style: none;\n  outline: none;\n  user-select: none;\n  ", ";\n"], ["\n  ", "\n\n  ", "\n  ", "\n  ", "\n\n  ", "\n  ", "\n  ", "\n\n  overflow: auto;\n\n  list-style: none;\n  outline: none;\n  user-select: none;\n  ", ";\n"])), reset, minHeight, maxHeight, height, minWidth, maxWidth, width, function (props) { return props.groupDividers !== false && dividersStyle; });
MenuList.defaultProps = { minWidth: '12rem' };
var templateObject_1, templateObject_2;
//# sourceMappingURL=MenuList.js.map