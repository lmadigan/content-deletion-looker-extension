var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { forwardRef } from 'react';
import { layout, reset, space, typography, } from '@looker/design-tokens';
import styled from 'styled-components';
export var CustomizableValidationMessageAttributes = {
    fontSize: 'xsmall',
};
var ValidationMessageBase = styled.div.attrs(function (props) { return ({
    fontSize: props.fontSize || CustomizableValidationMessageAttributes.fontSize,
}); }).withConfig({ displayName: "ValidationMessageBase", componentId: "sc-1mkorjc" })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n"], ["\n  ", "\n  ",
    "\n  ", "\n  ", "\n  ", "\n"])), reset, function (props) {
    return props.type === 'error'
        ? "color: " + props.theme.colors.palette.red700 + ";"
        : '';
}, layout, space, typography);
export var ValidationMessage = forwardRef(function (_a, ref) {
    var message = _a.message, props = __rest(_a, ["message"]);
    return (React.createElement(ValidationMessageBase, __assign({ mr: "xsmall", mt: "xsmall" }, props, { ref: ref }), message));
});
ValidationMessage.displayName = 'ValidationMessage';
var templateObject_1;
//# sourceMappingURL=ValidationMessage.js.map