var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import uuid from 'uuid/v4';
import { useFormContext } from '../../Form';
import { InputText } from '../../Inputs/InputText/InputText';
import { Field, omitFieldProps, pickFieldProps } from '../Field';
var FieldTextComponent = forwardRef(function (props, ref) {
    var _a = props.id, id = _a === void 0 ? uuid() : _a;
    var validationMessage = useFormContext(props);
    return (React.createElement(Field, __assign({ id: id, alignValidationMessage: "bottom", validationMessage: validationMessage }, pickFieldProps(props)),
        React.createElement(InputText, __assign({}, omitFieldProps(props), { id: id, validationType: validationMessage && validationMessage.type, ref: ref }))));
});
FieldTextComponent.displayName = 'FieldTextComponent';
export var FieldText = styled(FieldTextComponent).withConfig({ displayName: "FieldText", componentId: "sc-1diqjx1" })(templateObject_1 || (templateObject_1 = __makeTemplateObject([""], [""])));
var templateObject_1;
//# sourceMappingURL=FieldText.js.map