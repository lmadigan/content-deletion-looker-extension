var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
export var cartesian2polar = function (coord) { return ({
    angle: Math.atan2(coord.y, coord.x),
    radius: Math.round(Math.sqrt(coord.x * coord.x + coord.y * coord.y)),
}); };
export var polar2cartesian = function (coord) { return ({
    x: coord.radius * Math.cos(coord.angle),
    y: coord.radius * Math.sin(coord.angle),
}); };
export var rad2deg = function (rad) { return (rad / (2 * Math.PI)) * 360; };
export var deg2rad = function (angle) { return angle * (Math.PI / 180); };
export var diameter = function (radius) { return 2 * radius; };
export var translate = function (by, val) { return val + by; };
export var translateDiagonal = function (by, coordinate) { return ({
    x: translate(by, coordinate.x),
    y: translate(by, coordinate.y),
}); };
export var scaleRadius = function (by, coord) { return (__assign(__assign({}, coord), { radius: coord.radius * by })); };
export var limitByRadius = function (coord, radius) {
    var _a = translateDiagonal(-radius, coord), x = _a.x, y = _a.y;
    var distanceFromCenter = Math.min(Math.sqrt(x * x + y * y), radius);
    var angle = Math.atan2(y, x);
    var newCoord = polar2cartesian({ angle: angle, radius: distanceFromCenter });
    return {
        x: newCoord.x + radius,
        y: newCoord.y + radius,
    };
};
//# sourceMappingURL=math_utils.js.map