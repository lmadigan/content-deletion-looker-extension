var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import range from 'lodash/range';
import { cartesian2polar, deg2rad, diameter, polar2cartesian, rad2deg, scaleRadius, translateDiagonal, } from './math_utils';
export var white = function () { return ({
    brightness: 1,
    coord: { angle: 0, radius: 0 },
}); };
export var hsv2polar = function (color) { return ({
    angle: deg2rad(color.h),
    radius: color.s,
}); };
export var polarbrightness2hsv = function (pb) { return ({
    h: rad2deg(pb.coord.angle),
    s: pb.coord.radius,
    v: pb.brightness,
}); };
export var scalePBRadius = function (by, pb) { return (__assign(__assign({}, pb), { coord: scaleRadius(by, pb.coord) })); };
export var cartesian2hsv = function (brightness, radius, coord) {
    return [coord]
        .map(function (c) { return translateDiagonal(-radius, c); })
        .map(cartesian2polar)
        .map(function (c) { return (c.radius <= radius ? { brightness: brightness, coord: c } : white()); })
        .map(function (pb) { return scalePBRadius(1 / radius, pb); })
        .map(polarbrightness2hsv)[0];
};
export var hsv2cartesian = function (radius, color) {
    return [color]
        .map(hsv2polar)
        .map(function (coord) { return scaleRadius(radius, coord); })
        .map(polar2cartesian)
        .map(function (coord) { return translateDiagonal(radius, coord); })[0];
};
export var generateColorWheel = function (radius, brightness) {
    return range(diameter(radius)).map(function (_, x) {
        return range(diameter(radius)).map(function (_$, y) {
            return cartesian2hsv(brightness, radius, { x: x, y: y });
        });
    });
};
//# sourceMappingURL=color_wheel_utils.js.map