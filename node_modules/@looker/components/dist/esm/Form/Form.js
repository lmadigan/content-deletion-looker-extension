var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import React, { forwardRef, useContext, createContext, } from 'react';
import styled from 'styled-components';
import omit from 'lodash/omit';
import { border, flexbox, layout, reset, space, } from '@looker/design-tokens';
export var FormContext = createContext({});
var FormBase = styled.form.withConfig({ displayName: "FormBase", componentId: "sc-1jzpsxe" })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n"], ["\n  ", "\n  ", "\n  ", "\n  ", "\n  ", "\n"])), reset, border, flexbox, layout, space);
export var Form = forwardRef(function (props, ref) { return (React.createElement(FormContext.Provider, { value: {
        validationMessages: props.validationMessages,
    } },
    React.createElement(FormBase, __assign({}, omit(props, 'validationMessages'), { ref: ref })))); });
Form.displayName = 'Form';
export function useFormContext(_a) {
    var name = _a.name, validationMessage = _a.validationMessage;
    var context = useContext(FormContext);
    var vMessage;
    if (context.validationMessages && name) {
        vMessage = context.validationMessages[name];
    }
    else if (validationMessage) {
        vMessage = validationMessage;
    }
    return vMessage;
}
var templateObject_1;
//# sourceMappingURL=Form.js.map