var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import omit from 'lodash/omit';
import pick from 'lodash/pick';
import React, { forwardRef } from 'react';
import styled from 'styled-components';
import { reset, space } from '@looker/design-tokens';
import { inputPropKeys, } from '../InputProps';
import { inputColor } from '../style';
var FauxRadio = styled.div.withConfig({ displayName: "FauxRadio", componentId: "sc-15kpzlk" })(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n  ", "\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: ", ";\n  border-radius: 50%;\n  color: transparent;\n  transition: background-color 25ms linear, border-color 25ms linear,\n    box-shadow 25ms linear;\n"], ["\n  ", "\n  position: relative;\n  width: 100%;\n  height: 100%;\n  border: ", ";\n  border-radius: 50%;\n  color: transparent;\n  transition: background-color 25ms linear, border-color 25ms linear,\n    box-shadow 25ms linear;\n"])), reset, function (props) { return "solid 1px " + props.theme.colors.palette.charcoal200; });
var dotSize = 6;
var RadioContainer = styled.div.withConfig({ displayName: "RadioContainer", componentId: "sc-1ongfoa" })(templateObject_2 || (templateObject_2 = __makeTemplateObject(["\n  ", "\n  position: relative;\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  margin: 3px;\n  vertical-align: middle;\n  input[type='radio'] {\n    opacity: 0;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n  }\n  ", " {\n    background: ", ";\n  }\n  input[type='radio']:checked {\n    & + ", " {\n      ", "\n    }\n    & + ", "::after {\n      content: '';\n      position: absolute;\n      background: #fff;\n      width: ", "px;\n      height: ", "px;\n      border-radius: 50%;\n      top: calc(50% - ", "px);\n      right: calc(50% - ", "px);\n    }\n  }\n  input[type='radio']:focus {\n    & + ", " {\n      box-shadow: ", ";\n    }\n  }\n  input[type='radio']:disabled {\n    & + ", " {\n      opacity: 0.5;\n    }\n  }\n  ", "\n"], ["\n  ", "\n  position: relative;\n  display: inline-block;\n  width: 1rem;\n  height: 1rem;\n  margin: 3px;\n  vertical-align: middle;\n  input[type='radio'] {\n    opacity: 0;\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    z-index: 1;\n  }\n  ", " {\n    background: ", ";\n  }\n  input[type='radio']:checked {\n    & + ", " {\n      ", "\n    }\n    & + ", "::after {\n      content: '';\n      position: absolute;\n      background: #fff;\n      width: ", "px;\n      height: ", "px;\n      border-radius: 50%;\n      top: calc(50% - ", "px);\n      right: calc(50% - ", "px);\n    }\n  }\n  input[type='radio']:focus {\n    & + ", " {\n      box-shadow: ",
    ";\n    }\n  }\n  input[type='radio']:disabled {\n    & + ", " {\n      opacity: 0.5;\n    }\n  }\n  ", "\n"])), reset, FauxRadio, function (props) { return props.theme.colors.palette.white; }, FauxRadio, inputColor, FauxRadio, dotSize, dotSize, dotSize / 2, dotSize / 2, FauxRadio, function (props) {
    return "0 0 .5px 1px " + props.theme.colors.semanticColors.primary.borderColor;
}, FauxRadio, space);
var RadioInput = styled.input.attrs({ type: 'radio' }).withConfig({ displayName: "RadioInput", componentId: "sc-163n3nc" })(templateObject_3 || (templateObject_3 = __makeTemplateObject(["\n  ", "\n"], ["\n  ", "\n"])), reset);
var RadioComponent = forwardRef(function (props, ref) {
    return (React.createElement(RadioContainer, __assign({}, omit(props, inputPropKeys)),
        React.createElement(RadioInput, __assign({}, pick(props, inputPropKeys), { ref: ref })),
        React.createElement(FauxRadio, null)));
});
RadioComponent.displayName = 'RadioComponent';
export var Radio = styled(RadioComponent).withConfig({ displayName: "Radio", componentId: "sc-khatgs" })(templateObject_4 || (templateObject_4 = __makeTemplateObject([""], [""])));
var templateObject_1, templateObject_2, templateObject_3, templateObject_4;
//# sourceMappingURL=Radio.js.map