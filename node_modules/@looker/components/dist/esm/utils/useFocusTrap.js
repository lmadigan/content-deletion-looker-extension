var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import createFocusTrap from 'focus-trap';
import { useRef, useCallback } from 'react';
export function useFocusTrap(enabled, escapeDeactivates, clickOutsideDeactivates) {
    if (enabled === void 0) { enabled = true; }
    if (escapeDeactivates === void 0) { escapeDeactivates = false; }
    if (clickOutsideDeactivates === void 0) { clickOutsideDeactivates = true; }
    var trap = useRef();
    return useCallback(function (node) {
        if (!node || !enabled) {
            trap.current && trap.current.deactivate();
        }
        else if (node && enabled) {
            var autoFocusElement = node.querySelector('[data-autofocus="true"]');
            trap.current = createFocusTrap(node, __assign({ clickOutsideDeactivates: clickOutsideDeactivates,
                escapeDeactivates: escapeDeactivates, fallbackFocus: node }, (autoFocusElement ? { initialFocus: autoFocusElement } : {})));
            trap.current.activate();
        }
    }, [enabled, escapeDeactivates, clickOutsideDeactivates]);
}
//# sourceMappingURL=useFocusTrap.js.map