import React, { Children, cloneElement, useRef, useState } from 'react';
export function useTabs(props) {
    var defaultIndex = (props && props.defaultIndex) || 0;
    var onChange = props && props.onChange;
    var isControlled = (props && props.isControlled) || false;
    var _a = useState(defaultIndex), selectedIndex = _a[0], setSelectedIndex = _a[1];
    return {
        onSelectTab: function (index) {
            onChange && onChange(index);
            if (!isControlled) {
                setSelectedIndex(index);
            }
        },
        selectedIndex: selectedIndex,
    };
}
export var Tabs = function (_a) {
    var children = _a.children, controlledIndex = _a.index, defaultIndex = _a.defaultIndex, onChange = _a.onChange;
    var isControlled = useRef(controlledIndex !== undefined).current;
    if (!isControlled && controlledIndex !== undefined) {
        console.warn('Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.');
    }
    if (isControlled && controlledIndex === undefined) {
        console.warn('Tabs is changing from uncontrolled to controlled. Tabs should not switch from uncontrolled to controlled (or vice versa). Decide between using a controlled or uncontrolled Tabs for the lifetime of the component. Check the `index` prop being passed in.');
    }
    var tabs = useTabs({ defaultIndex: defaultIndex, isControlled: isControlled, onChange: onChange });
    var clonedChildren = Children.map(children, function (child) {
        return cloneElement(child, tabs);
    });
    return React.createElement(React.Fragment, null, clonedChildren);
};
//# sourceMappingURL=Tabs.js.map