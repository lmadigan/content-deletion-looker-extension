/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import { ExtensionSDK } from '@looker/extension-sdk'
import { LookerSDK } from '@looker/sdk/dist/sdk/methods'

/**
 * Extension context
 */
export interface ExtensionContextData {
  /**
   * Extension SDK.
   */
  extensionSDK: ExtensionSDK
  /**
   * Looker SDK. Note that SDK calls are made by the extension host.
   */
  coreSDK: LookerSDK
  /**
   * Error message will be set in an initialization error occors
   */
  initializeError?: string
}

export interface ExtensionProviderProps {
  /**
   * When true, a react router MemoryRouter will be created and changes to the
   * extension route will be propagated to the host. The host will then track
   * the clients route by appending it to the host route.
   * Note that this is only supported where the extension is mounted
   * in the main extension view. If the extension is mounted as a component of a
   * looker composite component (dashboard for example), hostTracksRoute will be
   * ignored.
   */
  hostTracksRoute?: boolean
  /**
   * Pathname change callback. Use when extension components need to modify their
   * state based upon the current route.
   */
  onPathnameChange?: (pathname: string) => void
  /**
   * Loading component to display while the provider is
   * establishing communication with the Looker host
   */
  loadingComponent?: JSX.Element
  /**
   * Required looker version. An error will be thrown if the host
   * Looker is not at the version specified.
   */
  requiredLookerVersion?: string
  /**
   * Extension components
   */
  children: any
}

/**
 * @deprecated use ExtensionProviderProps instead
 */
export interface ExportWrapperProps extends ExtensionProviderProps {}
