/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2019 Looker Data Sciences, Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import { shallow, mount, ReactWrapper } from 'enzyme'
import { act } from 'react-dom/test-utils'
import * as React from 'react'
import { ExtensionProvider } from './ExtensionProvider'

describe('ExtensionProvider component', () => {
  it('renders loading', () => {
    const comp = shallow(
      <ExtensionProvider loadingComponent={<span id='loading'>Loading</span>}>
        <div id='extension'></div>
      </ExtensionProvider>
    )
    expect(comp.find('MemoryRouter')).toHaveLength(0)
    expect(comp.find('#loading')).toHaveLength(1)
    expect(comp.find('#extension')).toHaveLength(0)
  })

  it('does not render loading', () => {
    const comp = shallow(
      <ExtensionProvider>
        <div id='extension'></div>
      </ExtensionProvider>
    )
    expect(comp.find('MemoryRouter')).toHaveLength(0)
    expect(comp.find('#loading')).toHaveLength(0)
    expect(comp.find('#extension')).toHaveLength(0)
  })

  it('renders content with MemoryRouter', async () => {
    let comp: ReactWrapper | undefined
    await act(async () => {
      comp = mount(
        <ExtensionProvider loadingComponent={<span id='loading'>Loading</span>}>
          <div id='extension'></div>
        </ExtensionProvider>
      )
    })
    if (comp) {
      expect(comp.find('MemoryRouter')).toHaveLength(0)
      expect(comp.find('#loading')).toHaveLength(1)
      // Trigger rerender to remove loading and add content
      await act(async () => {
        if (comp) {
          comp.update()
        } else {
          fail()
        }
      })
      expect(comp.find('MemoryRouter')).toHaveLength(1)
      expect(comp.find('#loading')).toHaveLength(0)
      expect(comp.find('#extension')).toHaveLength(1)
    } else {
      fail()
    }
  })

  it('renders content without MemoryRouter', async () => {
    let comp: ReactWrapper | undefined
    await act(async () => {
      comp = mount(
        <ExtensionProvider loadingComponent={<span id='loading'>Loading</span>} hostTracksRoute={false}>
          <div id='extension'></div>
        </ExtensionProvider>
      )
    })
    if (comp) {
      expect(comp.find('MemoryRouter')).toHaveLength(0)
      expect(comp.find('#loading')).toHaveLength(1)
      // Trigger rerender to remove loading and add content
      await act(async () => {
        if (comp) {
          comp.update()
        } else {
          fail()
        }
      })
      expect(comp.find('MemoryRouter')).toHaveLength(0)
      expect(comp.find('#loading')).toHaveLength(0)
      expect(comp.find('#extension')).toHaveLength(1)
    } else {
      fail()
    }
  })
})
