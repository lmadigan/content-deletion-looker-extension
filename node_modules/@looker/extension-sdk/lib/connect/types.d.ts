import { ChattyHostConnection } from '@looker/chatty';
/**
 * Extension event used for chatty communication
 */
export declare enum ExtensionEvent {
    /**
     * Notification from host to client
     */
    EXTENSION_HOST_NOTIFICATION = "EXTENSION_NOTIFICATION",
    /**
     * Process request from client. This is actually a sendAndRecieve request
     */
    EXTENSION_API_REQUEST = "EXTENSION_API_REQUEST"
}
/**
 * Request types used by the underlying API. The ENTENSION_API_REQUEST delegates
 * work based upon the request type
 */
export declare enum ExtensionRequestType {
    /**
     * Verify that the host exists and is working correctly. Host is the Looker window
     * instance that owns the client IFRAME.
     */
    VERIFY_HOST = "VERIFY_HOST",
    /**
     * Execute a call on the Looker CORE SDK
     */
    INVOKE_CORE_SDK = "INVOKE_CORE_SDK",
    /**
     * Update title
     */
    UPDATE_TITLE = "UPDATE_TITLE",
    /**
     * Update location
     */
    UPDATE_LOCATION = "UPDATE_LOCATION",
    /**
     * Location route changed
     */
    ROUTE_CHANGED = "ROUTE_CHANGED",
    /**
     * Close popovers in the looker host
     */
    CLOSE_HOST_POPOVERS = "CLOSE_HOST_POPOVERS"
}
/**
 * The message that is associated with the Chatty EXTENSION_API_REQUEST event
 */
export interface ExtensionRequest {
    /**
     * Extension request type
     */
    type: ExtensionRequestType;
    /**
     * Optional payload assocoayed with extension request type
     */
    payload?: InvokeCoreSdkRequest | undefined;
}
export interface InvokeCoreSdkRequest {
    apiMethodName?: string;
    httpMethod?: string;
    path?: string;
    body?: any;
    params?: any;
    options?: any;
}
export interface UpdateTitleRequest {
    title: string;
}
export interface UpdateLocationRequest {
    url: string;
    state?: any;
}
export interface ExtensionHostApi extends ExtensionSDK {
    handleNotification(message: ExtensionNotification): any | void;
    invokeCoreSdkByName(methodName: string, body?: any, params?: any, options?: any): Promise<any>;
    invokeCoreSdkByPath(httpMethod: string, path: string, body?: any, params?: any, authenticator?: any, options?: any): Promise<any>;
    clientRouteChanged(route: string): void;
}
export interface ExtensionClientApi {
    handleRequest(message: ExtensionRequest): any | void;
}
export interface RouteChangeRequest {
    route: string;
}
/**
 * Notification type
 */
export declare enum ExtensionNotificationType {
    /**
     * Initialize message sent when chatty host and client have established
     * communication
     */
    INITIALIZE = "INITIALIZE"
}
/**
 * Initialization data. Looker host data.
 */
export interface LookerHostData {
    /**
     * Version of looker
     */
    lookerVersion: string;
    /**
     * Initial route for the extension
     */
    route?: string;
}
/**
 * Extension notification
 */
export interface ExtensionNotification {
    type: ExtensionNotificationType;
    payload?: LookerHostData | undefined;
}
/**
 * Extension host configuration
 */
export interface ExtensionHostConfiguration {
    /**
     * Callback once extension initialized
     * @param errorMessage details of any errors that have
     *  occured during initialization
     */
    initializedCallback?: (errorMessage?: string) => void;
    /**
     * Callback to set the initial route to be restored. Ignored if
     */
    setInitialRoute?: (route: string) => void;
    /**
     * Required looker version. An error will be thrown if the host
     * Looker is not at the version specified.
     */
    requiredLookerVersion?: string;
}
export interface ExtensionHostApiConfiguration extends ExtensionHostConfiguration {
    chattyHost: ChattyHostConnection;
}
/**
 * Public extension SDK
 */
export interface ExtensionSDK {
    /**
     * Looker host data
     */
    lookerHostData?: Readonly<LookerHostData>;
    /**
     * Verify that looker host is available
     */
    verifyHostConnection(): Promise<boolean>;
    /**
     * Update window title (if allowed)
     * @param title new window title
     */
    updateTitle(title: string): void;
    /**
     * Update location of current window (if allowed). Navigating to
     * a new host is NOT allowed
     * @param url - new url - should begin with '/'
     * @param state push state
     * @param target when set opens new browser window. Use
     *        openBrowserWindow instead.
     */
    updateLocation(url: string, state?: any, target?: string): void;
    /**
     * Open new browser window with URL
     * @param url for window
     * @param target name of window. Defaults to _blank
     */
    openBrowserWindow(url: string, target?: string): void;
    /**
     * Close currently opened popovers (menus for example)
     */
    closeHostPopovers(): void;
}
